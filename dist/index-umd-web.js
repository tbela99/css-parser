(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.CSSParser = {}));
})(this, (function (exports) { 'use strict';

    var ValidationLevel;
    (function (ValidationLevel) {
        ValidationLevel[ValidationLevel["None"] = 0] = "None";
        ValidationLevel[ValidationLevel["Valid"] = 1] = "Valid";
        ValidationLevel[ValidationLevel["Drop"] = 2] = "Drop";
    })(ValidationLevel || (ValidationLevel = {}));
    exports.EnumToken = void 0;
    (function (EnumToken) {
        EnumToken[EnumToken["CommentTokenType"] = 0] = "CommentTokenType";
        EnumToken[EnumToken["CDOCOMMTokenType"] = 1] = "CDOCOMMTokenType";
        EnumToken[EnumToken["StyleSheetNodeType"] = 2] = "StyleSheetNodeType";
        EnumToken[EnumToken["AtRuleNodeType"] = 3] = "AtRuleNodeType";
        EnumToken[EnumToken["RuleNodeType"] = 4] = "RuleNodeType";
        EnumToken[EnumToken["DeclarationNodeType"] = 5] = "DeclarationNodeType";
        EnumToken[EnumToken["LiteralTokenType"] = 6] = "LiteralTokenType";
        EnumToken[EnumToken["IdenTokenType"] = 7] = "IdenTokenType";
        EnumToken[EnumToken["DashedIdenTokenType"] = 8] = "DashedIdenTokenType";
        EnumToken[EnumToken["CommaTokenType"] = 9] = "CommaTokenType";
        EnumToken[EnumToken["ColonTokenType"] = 10] = "ColonTokenType";
        EnumToken[EnumToken["SemiColonTokenType"] = 11] = "SemiColonTokenType";
        EnumToken[EnumToken["NumberTokenType"] = 12] = "NumberTokenType";
        EnumToken[EnumToken["AtRuleTokenType"] = 13] = "AtRuleTokenType";
        EnumToken[EnumToken["PercentageTokenType"] = 14] = "PercentageTokenType";
        EnumToken[EnumToken["FunctionTokenType"] = 15] = "FunctionTokenType";
        EnumToken[EnumToken["TimelineFunctionTokenType"] = 16] = "TimelineFunctionTokenType";
        EnumToken[EnumToken["TimingFunctionTokenType"] = 17] = "TimingFunctionTokenType";
        EnumToken[EnumToken["UrlFunctionTokenType"] = 18] = "UrlFunctionTokenType";
        EnumToken[EnumToken["ImageFunctionTokenType"] = 19] = "ImageFunctionTokenType";
        EnumToken[EnumToken["StringTokenType"] = 20] = "StringTokenType";
        EnumToken[EnumToken["UnclosedStringTokenType"] = 21] = "UnclosedStringTokenType";
        EnumToken[EnumToken["DimensionTokenType"] = 22] = "DimensionTokenType";
        EnumToken[EnumToken["LengthTokenType"] = 23] = "LengthTokenType";
        EnumToken[EnumToken["AngleTokenType"] = 24] = "AngleTokenType";
        EnumToken[EnumToken["TimeTokenType"] = 25] = "TimeTokenType";
        EnumToken[EnumToken["FrequencyTokenType"] = 26] = "FrequencyTokenType";
        EnumToken[EnumToken["ResolutionTokenType"] = 27] = "ResolutionTokenType";
        EnumToken[EnumToken["HashTokenType"] = 28] = "HashTokenType";
        EnumToken[EnumToken["BlockStartTokenType"] = 29] = "BlockStartTokenType";
        EnumToken[EnumToken["BlockEndTokenType"] = 30] = "BlockEndTokenType";
        EnumToken[EnumToken["AttrStartTokenType"] = 31] = "AttrStartTokenType";
        EnumToken[EnumToken["AttrEndTokenType"] = 32] = "AttrEndTokenType";
        EnumToken[EnumToken["StartParensTokenType"] = 33] = "StartParensTokenType";
        EnumToken[EnumToken["EndParensTokenType"] = 34] = "EndParensTokenType";
        EnumToken[EnumToken["ParensTokenType"] = 35] = "ParensTokenType";
        EnumToken[EnumToken["WhitespaceTokenType"] = 36] = "WhitespaceTokenType";
        EnumToken[EnumToken["IncludeMatchTokenType"] = 37] = "IncludeMatchTokenType";
        EnumToken[EnumToken["DashMatchTokenType"] = 38] = "DashMatchTokenType";
        EnumToken[EnumToken["LtTokenType"] = 39] = "LtTokenType";
        EnumToken[EnumToken["LteTokenType"] = 40] = "LteTokenType";
        EnumToken[EnumToken["GtTokenType"] = 41] = "GtTokenType";
        EnumToken[EnumToken["GteTokenType"] = 42] = "GteTokenType";
        EnumToken[EnumToken["PseudoClassTokenType"] = 43] = "PseudoClassTokenType";
        EnumToken[EnumToken["PseudoClassFuncTokenType"] = 44] = "PseudoClassFuncTokenType";
        EnumToken[EnumToken["DelimTokenType"] = 45] = "DelimTokenType";
        EnumToken[EnumToken["UrlTokenTokenType"] = 46] = "UrlTokenTokenType";
        EnumToken[EnumToken["EOFTokenType"] = 47] = "EOFTokenType";
        EnumToken[EnumToken["ImportantTokenType"] = 48] = "ImportantTokenType";
        EnumToken[EnumToken["ColorTokenType"] = 49] = "ColorTokenType";
        EnumToken[EnumToken["AttrTokenType"] = 50] = "AttrTokenType";
        EnumToken[EnumToken["BadCommentTokenType"] = 51] = "BadCommentTokenType";
        EnumToken[EnumToken["BadCdoTokenType"] = 52] = "BadCdoTokenType";
        EnumToken[EnumToken["BadUrlTokenType"] = 53] = "BadUrlTokenType";
        EnumToken[EnumToken["BadStringTokenType"] = 54] = "BadStringTokenType";
        EnumToken[EnumToken["BinaryExpressionTokenType"] = 55] = "BinaryExpressionTokenType";
        EnumToken[EnumToken["UnaryExpressionTokenType"] = 56] = "UnaryExpressionTokenType";
        EnumToken[EnumToken["FlexTokenType"] = 57] = "FlexTokenType";
        /* catch all */
        EnumToken[EnumToken["ListToken"] = 58] = "ListToken";
        /* arithmetic tokens */
        EnumToken[EnumToken["Add"] = 59] = "Add";
        EnumToken[EnumToken["Mul"] = 60] = "Mul";
        EnumToken[EnumToken["Div"] = 61] = "Div";
        EnumToken[EnumToken["Sub"] = 62] = "Sub";
        /* new tokens */
        EnumToken[EnumToken["ColumnCombinatorTokenType"] = 63] = "ColumnCombinatorTokenType";
        EnumToken[EnumToken["ContainMatchTokenType"] = 64] = "ContainMatchTokenType";
        EnumToken[EnumToken["StartMatchTokenType"] = 65] = "StartMatchTokenType";
        EnumToken[EnumToken["EndMatchTokenType"] = 66] = "EndMatchTokenType";
        EnumToken[EnumToken["MatchExpressionTokenType"] = 67] = "MatchExpressionTokenType";
        EnumToken[EnumToken["NameSpaceAttributeTokenType"] = 68] = "NameSpaceAttributeTokenType";
        EnumToken[EnumToken["FractionTokenType"] = 69] = "FractionTokenType";
        EnumToken[EnumToken["IdenListTokenType"] = 70] = "IdenListTokenType";
        EnumToken[EnumToken["GridTemplateFuncTokenType"] = 71] = "GridTemplateFuncTokenType";
        EnumToken[EnumToken["KeyFrameRuleNodeType"] = 72] = "KeyFrameRuleNodeType";
        EnumToken[EnumToken["ClassSelectorTokenType"] = 73] = "ClassSelectorTokenType";
        EnumToken[EnumToken["UniversalSelectorTokenType"] = 74] = "UniversalSelectorTokenType";
        EnumToken[EnumToken["ChildCombinatorTokenType"] = 75] = "ChildCombinatorTokenType";
        EnumToken[EnumToken["DescendantCombinatorTokenType"] = 76] = "DescendantCombinatorTokenType";
        EnumToken[EnumToken["NextSiblingCombinatorTokenType"] = 77] = "NextSiblingCombinatorTokenType";
        EnumToken[EnumToken["SubsequentSiblingCombinatorTokenType"] = 78] = "SubsequentSiblingCombinatorTokenType";
        EnumToken[EnumToken["NestingSelectorTokenType"] = 79] = "NestingSelectorTokenType";
        EnumToken[EnumToken["InvalidRuleTokenType"] = 80] = "InvalidRuleTokenType";
        EnumToken[EnumToken["InvalidClassSelectorTokenType"] = 81] = "InvalidClassSelectorTokenType";
        EnumToken[EnumToken["InvalidAttrTokenType"] = 82] = "InvalidAttrTokenType";
        /* aliases */
        EnumToken[EnumToken["Time"] = 25] = "Time";
        EnumToken[EnumToken["Iden"] = 7] = "Iden";
        EnumToken[EnumToken["EOF"] = 47] = "EOF";
        EnumToken[EnumToken["Hash"] = 28] = "Hash";
        EnumToken[EnumToken["Flex"] = 57] = "Flex";
        EnumToken[EnumToken["Angle"] = 24] = "Angle";
        EnumToken[EnumToken["Color"] = 49] = "Color";
        EnumToken[EnumToken["Comma"] = 9] = "Comma";
        EnumToken[EnumToken["String"] = 20] = "String";
        EnumToken[EnumToken["Length"] = 23] = "Length";
        EnumToken[EnumToken["Number"] = 12] = "Number";
        EnumToken[EnumToken["Perc"] = 14] = "Perc";
        EnumToken[EnumToken["Literal"] = 6] = "Literal";
        EnumToken[EnumToken["Comment"] = 0] = "Comment";
        EnumToken[EnumToken["UrlFunc"] = 18] = "UrlFunc";
        EnumToken[EnumToken["Dimension"] = 22] = "Dimension";
        EnumToken[EnumToken["Frequency"] = 26] = "Frequency";
        EnumToken[EnumToken["Resolution"] = 27] = "Resolution";
        EnumToken[EnumToken["Whitespace"] = 36] = "Whitespace";
        EnumToken[EnumToken["IdenList"] = 70] = "IdenList";
        EnumToken[EnumToken["DashedIden"] = 8] = "DashedIden";
        EnumToken[EnumToken["GridTemplateFunc"] = 71] = "GridTemplateFunc";
        EnumToken[EnumToken["ImageFunc"] = 19] = "ImageFunc";
        EnumToken[EnumToken["CommentNodeType"] = 0] = "CommentNodeType";
        EnumToken[EnumToken["CDOCOMMNodeType"] = 1] = "CDOCOMMNodeType";
        EnumToken[EnumToken["TimingFunction"] = 17] = "TimingFunction";
        EnumToken[EnumToken["TimelineFunction"] = 16] = "TimelineFunction";
    })(exports.EnumToken || (exports.EnumToken = {}));
    const funcLike = [
        exports.EnumToken.ParensTokenType,
        exports.EnumToken.FunctionTokenType,
        exports.EnumToken.UrlFunctionTokenType,
        exports.EnumToken.StartParensTokenType,
        exports.EnumToken.ImageFunctionTokenType,
        exports.EnumToken.TimingFunctionTokenType,
        exports.EnumToken.TimingFunctionTokenType,
        exports.EnumToken.PseudoClassFuncTokenType,
        exports.EnumToken.GridTemplateFuncTokenType
    ];

    // from https://www.w3.org/TR/css-color-4/multiply-matrices.js
    /**
     * Simple matrix (and vector) multiplication
     * Warning: No error handling for incompatible dimensions!
     * @author Lea Verou 2020 MIT License
     */
    // A is m x n. B is n x p. product is m x p.
    function multiplyMatrices(A, B) {
        let m = A.length;
        if (!Array.isArray(A[0])) {
            // A is vector, convert to [[a, b, c, ...]]
            A = [A];
        }
        if (!Array.isArray(B[0])) {
            // B is vector, convert to [[a], [b], [c], ...]]
            B = B.map((x) => [x]);
        }
        let p = B[0].length;
        let B_cols = B[0].map((_, i) => B.map((x) => x[i])); // transpose B
        let product = A.map((row) => B_cols.map((col) => {
            if (!Array.isArray(row)) {
                return col.reduce((a, c) => a + c * row, 0);
            }
            return row.reduce((a, c, i) => a + c * (col[i] || 0), 0);
        }));
        if (m === 1) {
            product = product[0]; // Avoid [[a, b, c, ...]]
        }
        if (p === 1) {
            return product.map((x) => x[0]); // Avoid [[a], [b], [c], ...]]
        }
        return product;
    }

    const colorRange = {
        lab: {
            l: [0, 100],
            a: [-125, 125],
            b: [-125, 125]
        },
        lch: {
            l: [0, 100],
            c: [0, 150],
            h: [0, 360]
        },
        oklab: {
            l: [0, 1],
            a: [-0.4, .4],
            b: [-0.4, 0.4]
        },
        oklch: {
            l: [0, 1],
            a: [0, .4],
            b: [0, 0.4]
        }
    };
    const colorFuncColorSpace = ['srgb', 'srgb-linear', 'display-p3', 'prophoto-rgb', 'a98-rgb', 'rec2020', 'xyz', 'xyz-d65', 'xyz-d50'];
    ({ typ: exports.EnumToken.IdenTokenType, val: 'none' });
    const D50 = [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585];
    const k = Math.pow(29, 3) / Math.pow(3, 3);
    const e = Math.pow(6, 3) / Math.pow(29, 3);
    // color module v4
    const systemColors = new Set(['ActiveText', 'ButtonBorder', 'ButtonFace', 'ButtonText', 'Canvas', 'CanvasText', 'Field', 'FieldText', 'GrayText', 'Highlight', 'HighlightText', 'LinkText', 'Mark', 'MarkText', 'VisitedText'].map(m => m.toLowerCase()));
    // deprecated
    const deprecatedSystemColors = new Set(['ActiveBorder', 'ActiveCaption', 'AppWorkspace', 'Background', 'ButtonFace', 'ButtonHighlight', 'ButtonShadow', 'ButtonText', 'CaptionText', 'GrayText', 'Highlight', 'HighlightText', 'InactiveBorder', 'InactiveCaption', 'InactiveCaptionText', 'InfoBackground', 'InfoText', 'Menu', 'MenuText', 'Scrollbar', 'ThreeDDarkShadow', 'ThreeDFace', 'ThreeDHighlight', 'ThreeDLightShadow', 'ThreeDShadow', 'Window', 'WindowFrame', 'WindowText'].map(t => t.toLowerCase()));
    // name to color
    const COLORS_NAMES = Object.seal({
        'aliceblue': '#f0f8ff',
        'antiquewhite': '#faebd7',
        'aqua': '#00ffff',
        'aquamarine': '#7fffd4',
        'azure': '#f0ffff',
        'beige': '#f5f5dc',
        'bisque': '#ffe4c4',
        'black': '#000000',
        'blanchedalmond': '#ffebcd',
        'blue': '#0000ff',
        'blueviolet': '#8a2be2',
        'brown': '#a52a2a',
        'burlywood': '#deb887',
        'cadetblue': '#5f9ea0',
        'chartreuse': '#7fff00',
        'chocolate': '#d2691e',
        'coral': '#ff7f50',
        'cornflowerblue': '#6495ed',
        'cornsilk': '#fff8dc',
        'crimson': '#dc143c',
        'cyan': '#00ffff',
        'darkblue': '#00008b',
        'darkcyan': '#008b8b',
        'darkgoldenrod': '#b8860b',
        'darkgray': '#a9a9a9',
        'darkgrey': '#a9a9a9',
        'darkgreen': '#006400',
        'darkkhaki': '#bdb76b',
        'darkmagenta': '#8b008b',
        'darkolivegreen': '#556b2f',
        'darkorange': '#ff8c00',
        'darkorchid': '#9932cc',
        'darkred': '#8b0000',
        'darksalmon': '#e9967a',
        'darkseagreen': '#8fbc8f',
        'darkslateblue': '#483d8b',
        'darkslategray': '#2f4f4f',
        'darkslategrey': '#2f4f4f',
        'darkturquoise': '#00ced1',
        'darkviolet': '#9400d3',
        'deeppink': '#ff1493',
        'deepskyblue': '#00bfff',
        'dimgray': '#696969',
        'dimgrey': '#696969',
        'dodgerblue': '#1e90ff',
        'firebrick': '#b22222',
        'floralwhite': '#fffaf0',
        'forestgreen': '#228b22',
        'fuchsia': '#ff00ff',
        'gainsboro': '#dcdcdc',
        'ghostwhite': '#f8f8ff',
        'gold': '#ffd700',
        'goldenrod': '#daa520',
        'gray': '#808080',
        'grey': '#808080',
        'green': '#008000',
        'greenyellow': '#adff2f',
        'honeydew': '#f0fff0',
        'hotpink': '#ff69b4',
        'indianred': '#cd5c5c',
        'indigo': '#4b0082',
        'ivory': '#fffff0',
        'khaki': '#f0e68c',
        'lavender': '#e6e6fa',
        'lavenderblush': '#fff0f5',
        'lawngreen': '#7cfc00',
        'lemonchiffon': '#fffacd',
        'lightblue': '#add8e6',
        'lightcoral': '#f08080',
        'lightcyan': '#e0ffff',
        'lightgoldenrodyellow': '#fafad2',
        'lightgray': '#d3d3d3',
        'lightgrey': '#d3d3d3',
        'lightgreen': '#90ee90',
        'lightpink': '#ffb6c1',
        'lightsalmon': '#ffa07a',
        'lightseagreen': '#20b2aa',
        'lightskyblue': '#87cefa',
        'lightslategray': '#778899',
        'lightslategrey': '#778899',
        'lightsteelblue': '#b0c4de',
        'lightyellow': '#ffffe0',
        'lime': '#00ff00',
        'limegreen': '#32cd32',
        'linen': '#faf0e6',
        'magenta': '#ff00ff',
        'maroon': '#800000',
        'mediumaquamarine': '#66cdaa',
        'mediumblue': '#0000cd',
        'mediumorchid': '#ba55d3',
        'mediumpurple': '#9370d8',
        'mediumseagreen': '#3cb371',
        'mediumslateblue': '#7b68ee',
        'mediumspringgreen': '#00fa9a',
        'mediumturquoise': '#48d1cc',
        'mediumvioletred': '#c71585',
        'midnightblue': '#191970',
        'mintcream': '#f5fffa',
        'mistyrose': '#ffe4e1',
        'moccasin': '#ffe4b5',
        'navajowhite': '#ffdead',
        'navy': '#000080',
        'oldlace': '#fdf5e6',
        'olive': '#808000',
        'olivedrab': '#6b8e23',
        'orange': '#ffa500',
        'orangered': '#ff4500',
        'orchid': '#da70d6',
        'palegoldenrod': '#eee8aa',
        'palegreen': '#98fb98',
        'paleturquoise': '#afeeee',
        'palevioletred': '#d87093',
        'papayawhip': '#ffefd5',
        'peachpuff': '#ffdab9',
        'peru': '#cd853f',
        'pink': '#ffc0cb',
        'plum': '#dda0dd',
        'powderblue': '#b0e0e6',
        'purple': '#800080',
        'red': '#ff0000',
        'rosybrown': '#bc8f8f',
        'royalblue': '#4169e1',
        'saddlebrown': '#8b4513',
        'salmon': '#fa8072',
        'sandybrown': '#f4a460',
        'seagreen': '#2e8b57',
        'seashell': '#fff5ee',
        'sienna': '#a0522d',
        'silver': '#c0c0c0',
        'skyblue': '#87ceeb',
        'slateblue': '#6a5acd',
        'slategray': '#708090',
        'slategrey': '#708090',
        'snow': '#fffafa',
        'springgreen': '#00ff7f',
        'steelblue': '#4682b4',
        'tan': '#d2b48c',
        'teal': '#008080',
        'thistle': '#d8bfd8',
        'tomato': '#ff6347',
        'turquoise': '#40e0d0',
        'violet': '#ee82ee',
        'wheat': '#f5deb3',
        'white': '#ffffff',
        'whitesmoke': '#f5f5f5',
        'yellow': '#ffff00',
        'yellowgreen': '#9acd32',
        'rebeccapurple': '#663399',
        'transparent': '#00000000'
    });
    // color to name
    const NAMES_COLORS = Object.seal(Object.entries(COLORS_NAMES).reduce((acc, [key, value]) => {
        acc[value] = key;
        return acc;
    }, Object.create(null)));

    function toHexString(acc, value) {
        return acc + value.toString(16).padStart(2, '0');
    }
    function reduceHexValue(value) {
        const named_color = NAMES_COLORS[expandHexValue(value)];
        if (value.length == 7) {
            if (value[1] == value[2] &&
                value[3] == value[4] &&
                value[5] == value[6]) {
                value = `#${value[1]}${value[3]}${value[5]}`;
            }
        }
        else if (value.length == 9) {
            if (value[1] == value[2] &&
                value[3] == value[4] &&
                value[5] == value[6] &&
                value[7] == value[8]) {
                value = `#${value[1]}${value[3]}${value[5]}${value[7]}`;
            }
        }
        return named_color != null && named_color.length <= value.length ? named_color : value;
    }
    function expandHexValue(value) {
        if (value.length == 4) {
            return `#${value[1]}${value[1]}${value[2]}${value[2]}${value[3]}${value[3]}`;
        }
        if (value.length == 5) {
            return `#${value[1]}${value[1]}${value[2]}${value[2]}${value[3]}${value[3]}${value[4]}${value[4]}`;
        }
        return value;
    }
    function rgb2hex(token) {
        let value = '#';
        let t;
        // @ts-ignore
        const components = getComponents(token);
        // @ts-ignore
        for (let i = 0; i < 3; i++) {
            // @ts-ignore
            t = components[i];
            // @ts-ignore
            value += (t.typ == exports.EnumToken.Iden && t.val == 'none' ? '0' : Math.round(getNumber(t) * (t.typ == exports.EnumToken.PercentageTokenType ? 255 : 1))).toString(16).padStart(2, '0');
        }
        // @ts-ignore
        if (components.length == 4) {
            // @ts-ignore
            t = components[3];
            // @ts-ignore
            const v = (t.typ == exports.EnumToken.IdenTokenType && t.val == 'none') ? 1 : getNumber(t);
            // @ts-ignore
            if (v < 1) {
                // @ts-ignore
                value += Math.round(255 * getNumber(t)).toString(16).padStart(2, '0');
            }
        }
        return value;
    }
    function hsl2hex(token) {
        return `${hsl2rgb(token).reduce(toHexString, '#')}`;
    }
    function hwb2hex(token) {
        return `${hwb2rgb(token).reduce(toHexString, '#')}`;
    }
    function cmyk2hex(token) {
        return `#${cmyk2rgb(token).reduce(toHexString, '')}`;
    }
    function oklab2hex(token) {
        return `${oklab2rgb(token).reduce(toHexString, '#')}`;
    }
    function oklch2hex(token) {
        return `${oklch2rgb(token).reduce(toHexString, '#')}`;
    }
    function lab2hex(token) {
        return `${lab2rgb(token).reduce(toHexString, '#')}`;
    }
    function lch2hex(token) {
        return `${lch2rgb(token).reduce(toHexString, '#')}`;
    }
    function srgb2hexvalues(r, g, b, alpha) {
        return [r, g, b].concat(alpha == null || alpha == 1 ? [] : [alpha]).reduce((acc, value) => acc + minmax(Math.round(255 * value), 0, 255).toString(16).padStart(2, '0'), '#');
    }

    function getComponents(token) {
        if (token.kin == 'hex' || token.kin == 'lit') {
            const value = expandHexValue(token.kin == 'lit' ? COLORS_NAMES[token.val.toLowerCase()] : token.val);
            // @ts-ignore
            return value.slice(1).match(/([a-fA-F0-9]{2})/g).map((t) => {
                return { typ: exports.EnumToken.Number, val: parseInt(t, 16).toString() };
            });
        }
        return token.chi
            .filter((t) => ![exports.EnumToken.LiteralTokenType, exports.EnumToken.CommentTokenType, exports.EnumToken.CommaTokenType, exports.EnumToken.WhitespaceTokenType].includes(t.typ));
    }

    function xyzd502srgb(x, y, z) {
        // @ts-ignore
        return lsrgb2srgbvalues(
        /* r: */
        x * 3.1341359569958707 -
            y * 1.6173863321612538 -
            0.4906619460083532 * z, 
        /*  g: */
        x * -0.978795502912089 +
            y * 1.916254567259524 +
            0.03344273116131949 * z, 
        /*    b: */
        x * 0.07195537988411677 -
            y * 0.2289768264158322 +
            1.405386058324125 * z);
    }
    function XYZ_to_lin_sRGB(x, y, z) {
        // convert XYZ to linear-light sRGB
        const M = [
            [12831 / 3959, -329 / 214, -1974 / 3959],
            [-851781 / 878810, 1648619 / 878810, 36519 / 878810],
            [705 / 12673, -2585 / 12673, 705 / 667],
        ];
        const XYZ = [x, y, z]; // convert to XYZ
        return multiplyMatrices(M, XYZ).map((v) => v);
    }
    function XYZ_D50_to_D65(x, y, z) {
        // Bradford chromatic adaptation from D50 to D65
        const M = [
            [0.9554734527042182, -0.023098536874261423, 0.0632593086610217],
            [-0.028369706963208136, 1.0099954580058226, 0.021041398966943008],
            [0.012314001688319899, -0.020507696433477912, 1.3303659366080753]
        ];
        const XYZ = [x, y, z];
        return multiplyMatrices(M, XYZ); //.map((v: number) => v);
    }
    function srgb2xyz(r, g, b, alpha) {
        [r, g, b] = srgb2lsrgbvalues(r, g, b);
        const rgb = [
            0.436065742824811 * r +
                0.3851514688337912 * g +
                0.14307845442264197 * b,
            0.22249319175623702 * r +
                0.7168870538238823 * g +
                0.06061979053616537 * b,
            0.013923904500943465 * r +
                0.09708128566574634 * g +
                0.7140993584005155 * b
        ];
        if (alpha != null && alpha != 1) {
            rgb.push(alpha);
        }
        return rgb;
    }

    function hex2lch(token) {
        // @ts-ignore
        return lab2lchvalues(...hex2lab(token));
    }
    function rgb2lch(token) {
        // @ts-ignore
        return lab2lchvalues(...rgb2lab(token));
    }
    function hsl2lch(token) {
        // @ts-ignore
        return lab2lchvalues(...hsl2lab(token));
    }
    function hwb2lch(token) {
        // @ts-ignore
        return lab2lchvalues(...hwb2lab(token));
    }
    function lab2lch(token) {
        // @ts-ignore
        return lab2lchvalues(...getLABComponents(token));
    }
    function srgb2lch(r, g, blue, alpha) {
        // @ts-ignore
        return lab2lchvalues(...srgb2lab(r, g, blue, alpha));
    }
    function oklab2lch(token) {
        // @ts-ignore
        return lab2lchvalues(...oklab2lab(token));
    }
    function oklch2lch(token) {
        // @ts-ignore
        return lab2lchvalues(...oklch2lab(token));
    }
    function lab2lchvalues(l, a, b, alpha = null) {
        let c = Math.sqrt(a * a + b * b);
        let h = Math.atan2(b, a) * 180 / Math.PI;
        if (h < 0) {
            h += 360;
        }
        if (c < .0001) {
            c = h = 0;
        }
        return alpha == null ? [l, c, h] : [l, c, h, alpha];
    }
    function xyz2lchvalues(x, y, z, alpha) {
        // @ts-ignore(
        const lch = lab2lchvalues(...xyz2lab(x, y, z));
        return alpha == null || alpha == 1 ? lch : lch.concat(alpha);
    }
    function getLCHComponents(token) {
        const components = getComponents(token);
        // @ts-ignore
        let t = components[0];
        // @ts-ignore
        const l = getNumber(t) * (t.typ == exports.EnumToken.PercentageTokenType ? 100 : 1);
        // @ts-ignore
        t = components[1];
        // @ts-ignore
        const c = getNumber(t) * (t.typ == exports.EnumToken.PercentageTokenType ? 150 : 1);
        // @ts-ignore
        t = components[2];
        // @ts-ignore
        const h = getAngle(t) * 360;
        // @ts-ignore
        t = components[3];
        // @ts-ignore
        const alpha = t == null ? 1 : getNumber(t);
        return alpha == null ? [l, c, h] : [l, c, h, alpha];
    }

    function hex2oklch(token) {
        // @ts-ignore
        return lab2lchvalues(...hex2oklab(token));
    }
    function rgb2oklch(token) {
        // @ts-ignore
        return lab2lchvalues(...rgb2oklab(token));
    }
    function hsl2oklch(token) {
        // @ts-ignore
        return lab2lchvalues(...hsl2oklab(token));
    }
    function hwb2oklch(token) {
        // @ts-ignore
        return lab2lchvalues(...hwb2oklab(token));
    }
    function lab2oklch(token) {
        // @ts-ignore
        return lab2lchvalues(...lab2oklab(token));
    }
    function lch2oklch(token) {
        // @ts-ignore
        return lab2lchvalues(...lch2oklab(token));
    }
    function oklab2oklch(token) {
        // @ts-ignore
        return lab2lchvalues(...getOKLABComponents(token));
    }
    function srgb2oklch(r, g, blue, alpha) {
        // @ts-ignore
        return lab2lchvalues(...srgb2oklab(r, g, blue, alpha));
    }
    function getOKLCHComponents(token) {
        const components = getComponents(token);
        // @ts-ignore
        let t = components[0];
        // @ts-ignore
        const l = getNumber(t);
        // @ts-ignore
        t = components[1];
        // @ts-ignore
        const c = getNumber(t) * (t.typ == exports.EnumToken.PercentageTokenType ? .4 : 1);
        // @ts-ignore
        t = components[2];
        // @ts-ignore
        const h = getAngle(t) * 360;
        // @ts-ignore
        t = components[3];
        // @ts-ignore
        const alpha = t == null || (t.typ == exports.EnumToken.IdenTokenType && t.val == 'none') ? 1 : getNumber(t);
        return [l, c, h, alpha];
    }

    function hex2oklab(token) {
        // @ts-ignore
        return srgb2oklab(...hex2srgb(token));
    }
    function rgb2oklab(token) {
        // @ts-ignore
        return srgb2oklab(...rgb2srgb(token));
    }
    function hsl2oklab(token) {
        // @ts-ignore
        return srgb2oklab(...hsl2srgb(token));
    }
    function hwb2oklab(token) {
        // @ts-ignore
        return srgb2oklab(...hwb2srgb(token));
    }
    function lab2oklab(token) {
        // @ts-ignore
        return srgb2oklab(...lab2srgb(token));
    }
    function lch2oklab(token) {
        // @ts-ignore
        return srgb2oklab(...lch2srgb(token));
    }
    function oklch2oklab(token) {
        // @ts-ignore
        return lch2labvalues(...getOKLCHComponents(token));
    }
    function srgb2oklab(r, g, blue, alpha) {
        [r, g, blue] = srgb2lsrgbvalues(r, g, blue);
        let L = Math.cbrt(0.41222147079999993 * r + 0.5363325363 * g + 0.0514459929 * blue);
        let M = Math.cbrt(0.2119034981999999 * r + 0.6806995450999999 * g + 0.1073969566 * blue);
        let S = Math.cbrt(0.08830246189999998 * r + 0.2817188376 * g + 0.6299787005000002 * blue);
        const l = 0.2104542553 * L + 0.793617785 * M - 0.0040720468 * S;
        const a = r == g && g == blue ? 0 : 1.9779984951 * L - 2.428592205 * M + 0.4505937099 * S;
        const b = r == g && g == blue ? 0 : 0.0259040371 * L + 0.7827717662 * M - 0.808675766 * S;
        return alpha == null ? [l, a, b] : [l, a, b, alpha];
    }
    function getOKLABComponents(token) {
        const components = getComponents(token);
        // @ts-ignore
        let t = components[0];
        // @ts-ignore
        const l = getNumber(t);
        // @ts-ignore
        t = components[1];
        // @ts-ignore
        const a = getNumber(t) * (t.typ == exports.EnumToken.PercentageTokenType ? .4 : 1);
        // @ts-ignore
        t = components[2];
        // @ts-ignore
        const b = getNumber(t) * (t.typ == exports.EnumToken.PercentageTokenType ? .4 : 1);
        // @ts-ignore
        t = components[3];
        // @ts-ignore
        const alpha = t == null || (t.typ == exports.EnumToken.IdenTokenType && t.val == 'none') ? 1 : getNumber(t);
        const rgb = [l, a, b];
        if (alpha != 1 && alpha != null) {
            rgb.push(alpha);
        }
        return rgb;
    }
    function OKLab_to_XYZ(l, a, b, alpha = null) {
        // Given OKLab, convert to XYZ relative to D65
        const LMStoXYZ = [
            [1.2268798758459243, -0.5578149944602171, 0.2813910456659647],
            [-0.0405757452148008, 1.1122868032803170, -0.0717110580655164],
            [-0.0763729366746601, -0.4214933324022432, 1.5869240198367816]
        ];
        const OKLabtoLMS = [
            [1.0000000000000000, 0.3963377773761749, 0.2158037573099136],
            [1.0000000000000000, -0.1055613458156586, -0.0638541728258133],
            [1.0000000000000000, -0.0894841775298119, -1.2914855480194092]
        ];
        const LMSnl = multiplyMatrices(OKLabtoLMS, [l, a, b]);
        const xyz = multiplyMatrices(LMStoXYZ, LMSnl.map((c) => c ** 3));
        if (alpha != null) {
            xyz.push(alpha);
        }
        return xyz;
    }
    // from https://www.w3.org/TR/css-color-4/#color-conversion-code
    function OKLab_to_sRGB(l, a, b) {
        let L = Math.pow(l * 0.99999999845051981432 +
            0.39633779217376785678 * a +
            0.21580375806075880339 * b, 3);
        let M = Math.pow(l * 1.0000000088817607767 -
            0.1055613423236563494 * a -
            0.063854174771705903402 * b, 3);
        let S = Math.pow(l * 1.0000000546724109177 -
            0.089484182094965759684 * a -
            1.2914855378640917399 * b, 3);
        return lsrgb2srgbvalues(
        /* r: */
        +4.076741661347994 * L -
            3.307711590408193 * M +
            0.230969928729428 * S, 
        /*  g: */
        -1.2684380040921763 * L +
            2.6097574006633715 * M -
            0.3413193963102197 * S, 
        /*  b: */
        -0.004196086541837188 * L -
            0.7034186144594493 * M +
            1.7076147009309444 * S);
    }

    // L: 0% = 0.0, 100% = 100.0
    // for a and b: -100% = -125, 100% = 125
    function hex2lab(token) {
        //  @ts-ignore
        return srgb2lab(...hex2srgb(token));
    }
    function rgb2lab(token) {
        // @ts-ignore
        return srgb2lab(...rgb2srgb(token));
    }
    function hsl2lab(token) {
        // @ts-ignore
        return srgb2lab(...hsl2srgb(token));
    }
    function hwb2lab(token) {
        // @ts-ignore
        return srgb2lab(...hwb2srgb(token));
    }
    function lch2lab(token) {
        // @ts-ignore
        return lch2labvalues(...getLCHComponents(token));
    }
    function oklab2lab(token) {
        // @ts-ignore
        return xyz2lab(...OKLab_to_XYZ(...getOKLABComponents(token)));
    }
    function oklch2lab(token) {
        // @ts-ignore
        return srgb2lab(...oklch2srgb(token));
    }
    function srgb2lab(r, g, b, a) {
        // @ts-ignore */
        const result = xyz2lab(...srgb2xyz(r, g, b));
        // Fixes achromatic RGB colors having a _slight_ chroma due to floating-point errors
        // and approximated computations in sRGB <-> CIELab.
        // See: https://github.com/d3/d3-color/pull/46
        if (r === b && b === g) {
            result[1] = result[2] = 0;
        }
        if (a != null) {
            result.push(a);
        }
        return result;
    }
    function xyz2lab(x, y, z, a = null) {
        // Assuming XYZ is relative to D50, convert to CIE Lab
        // from CIE standard, which now defines these as a rational fraction
        // var e = 216/24389;  // 6^3/29^3
        // var k = 24389/27;   // 29^3/3^3
        // compute xyz, which is XYZ scaled relative to reference white
        const xyz = [x, y, z].map((value, i) => value / D50[i]);
        // now compute f
        const f = xyz.map((value) => value > e ? Math.cbrt(value) : (k * value + 16) / 116);
        const result = [
            (116 * f[1]) - 16, // L
            500 * (f[0] - f[1]), // a
            200 * (f[1] - f[2]) // b
        ];
        // L in range [0,100]. For use in CSS, add a percent
        if (a != null && a != 1) {
            result.push(a);
        }
        return result;
    }
    function lch2labvalues(l, c, h, a = null) {
        // l, c * Math.cos(360 * h * Math.PI / 180), c * Math.sin(360 * h * Math.PI / 180
        const result = [l, c * Math.cos(h * Math.PI / 180), c * Math.sin(h * Math.PI / 180)];
        if (a != null) {
            result.push(a);
        }
        return result;
    }
    function getLABComponents(token) {
        const components = getComponents(token);
        // @ts-ignore
        let t = components[0];
        // @ts-ignore
        const l = getNumber(t) * (t.typ == exports.EnumToken.PercentageTokenType ? 100 : 1);
        // @ts-ignore
        t = components[1];
        // @ts-ignore
        const a = getNumber(t) * (t.typ == exports.EnumToken.PercentageTokenType ? 125 : 1);
        // @ts-ignore
        t = components[2];
        // @ts-ignore
        const b = getNumber(t) * (t.typ == exports.EnumToken.PercentageTokenType ? 125 : 1);
        // @ts-ignore
        t = components[3];
        // @ts-ignore
        const alpha = t == null ? 1 : getNumber(t);
        const result = [l, a, b];
        if (alpha != null && alpha != 1) {
            result.push(alpha);
        }
        return result;
    }
    // from https://www.w3.org/TR/css-color-4/#color-conversion-code
    // D50 LAB
    function Lab_to_sRGB(l, a, b) {
        // @ts-ignore
        return xyzd502srgb(...Lab_to_XYZ(l, a, b));
    }
    // from https://www.w3.org/TR/css-color-4/#color-conversion-code
    function Lab_to_XYZ(l, a, b) {
        // Convert Lab to D50-adapted XYZ
        // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
        const k = 24389 / 27; // 29^3/3^3
        const e = 216 / 24389; // 6^3/29^3
        const f = [];
        // compute f, starting with the luminance-related term
        f[1] = (l + 16) / 116;
        f[0] = a / 500 + f[1];
        f[2] = f[1] - b / 200;
        // compute xyz
        const xyz = [
            Math.pow(f[0], 3) > e ? Math.pow(f[0], 3) : (116 * f[0] - 16) / k,
            l > k * e ? Math.pow((l + 16) / 116, 3) : l / k,
            Math.pow(f[2], 3) > e ? Math.pow(f[2], 3) : (116 * f[2] - 16) / k
        ];
        // Compute XYZ by scaling xyz by reference white
        return xyz.map((value, i) => value * D50[i]);
    }

    // from https://www.w3.org/TR/css-color-4/#color-conversion-code
    // srgb-linear -> srgb
    // 0 <= r, g, b <= 1
    function srgbvalues(token) {
        switch (token.kin) {
            case 'lit':
            case 'hex':
                return hex2srgb(token);
            case 'rgb':
            case 'rgba':
                return rgb2srgb(token);
            case 'hsl':
            case 'hsla':
                return hsl2srgb(token);
            case 'hwb':
                return hwb2srgb(token);
            case 'lab':
                return lab2srgb(token);
            case 'lch':
                return lch2srgb(token);
            case 'oklab':
                return oklab2srgb(token);
            case 'oklch':
                return oklch2srgb(token);
            case 'color':
                return color2srgbvalues(token);
        }
        return null;
    }
    function rgb2srgb(token) {
        return getComponents(token).map((t, index) => index == 3 ? ((t.typ == exports.EnumToken.IdenTokenType && t.val == 'none') ? 1 : getNumber(t)) : (t.typ == exports.EnumToken.PercentageTokenType ? 255 : 1) * getNumber(t) / 255);
    }
    function hex2srgb(token) {
        const value = expandHexValue(token.kin == 'lit' ? COLORS_NAMES[token.val.toLowerCase()] : token.val);
        const rgb = [];
        for (let i = 1; i < value.length; i += 2) {
            rgb.push(parseInt(value.slice(i, i + 2), 16) / 255);
        }
        return rgb;
    }
    function xyz2srgb(x, y, z) {
        // @ts-ignore
        return lsrgb2srgbvalues(...XYZ_to_lin_sRGB(x, y, z));
    }
    function hwb2srgb(token) {
        const { h: hue, s: white, l: black, a: alpha } = hslvalues(token);
        const rgb = hsl2srgbvalues(hue, 1, .5);
        for (let i = 0; i < 3; i++) {
            rgb[i] *= (1 - white - black);
            rgb[i] = rgb[i] + white;
        }
        if (alpha != null && alpha != 1) {
            rgb.push(alpha);
        }
        return rgb;
    }
    function hsl2srgb(token) {
        let { h, s, l, a } = hslvalues(token);
        return hsl2srgbvalues(h, s, l, a);
    }
    function cmyk2srgb(token) {
        const components = getComponents(token);
        // @ts-ignore
        let t = components[0];
        // @ts-ignore
        const c = getNumber(t);
        // @ts-ignore
        t = components[1];
        // @ts-ignore
        const m = getNumber(t);
        // @ts-ignore
        t = components[2];
        // @ts-ignore
        const y = getNumber(t);
        // @ts-ignore
        t = components[3];
        // @ts-ignore
        const k = getNumber(t);
        const rgb = [
            1 - Math.min(1, c * (1 - k) + k),
            1 - Math.min(1, m * (1 - k) + k),
            1 - Math.min(1, y * (1 - k) + k)
        ];
        // @ts-ignore
        if (token.chi.length >= 9) {
            // @ts-ignore
            t = token.chi[8];
            // @ts-ignore
            rgb.push(getNumber(t));
        }
        return rgb;
    }
    function oklab2srgb(token) {
        const [l, a, b, alpha] = getOKLABComponents(token);
        const rgb = OKLab_to_sRGB(l, a, b);
        if (alpha != null && alpha != 1) {
            rgb.push(alpha);
        }
        return rgb;
    }
    function oklch2srgb(token) {
        const [l, c, h, alpha] = getOKLCHComponents(token);
        // @ts-ignore
        const rgb = OKLab_to_sRGB(...lch2labvalues(l, c, h));
        if (alpha != 1) {
            rgb.push(alpha);
        }
        return rgb;
    }
    function hslvalues(token) {
        const components = getComponents(token);
        let t;
        // @ts-ignore
        let h = getAngle(components[0]);
        // @ts-ignore
        t = components[1];
        // @ts-ignore
        let s = getNumber(t);
        // @ts-ignore
        t = components[2];
        // @ts-ignore
        let l = getNumber(t);
        let a = null;
        if (token.chi?.length == 4) {
            // @ts-ignore
            t = token.chi[3];
            // @ts-ignore
            a = getNumber(t);
        }
        return a == null ? { h, s, l } : { h, s, l, a };
    }
    function hsl2srgbvalues(h, s, l, a = null) {
        let v = l <= .5 ? l * (1.0 + s) : l + s - l * s;
        let r = l;
        let g = l;
        let b = l;
        if (v > 0) {
            let m = l + l - v;
            let sv = (v - m) / v;
            h *= 6.0;
            let sextant = Math.floor(h);
            let fract = h - sextant;
            let vsf = v * sv * fract;
            let mid1 = m + vsf;
            let mid2 = v - vsf;
            switch (sextant) {
                case 0:
                    r = v;
                    g = mid1;
                    b = m;
                    break;
                case 1:
                    r = mid2;
                    g = v;
                    b = m;
                    break;
                case 2:
                    r = m;
                    g = v;
                    b = mid1;
                    break;
                case 3:
                    r = m;
                    g = mid2;
                    b = v;
                    break;
                case 4:
                    r = mid1;
                    g = m;
                    b = v;
                    break;
                case 5:
                    r = v;
                    g = m;
                    b = mid2;
                    break;
            }
        }
        const values = [r, g, b];
        if (a != null && a != 1) {
            values.push(a);
        }
        return values;
    }
    function lab2srgb(token) {
        const [l, a, b, alpha] = getLABComponents(token);
        const rgb = Lab_to_sRGB(l, a, b);
        if (alpha != null && alpha != 1) {
            rgb.push(alpha);
        }
        return rgb;
    }
    function lch2srgb(token) {
        // @ts-ignore
        const [l, a, b, alpha] = lch2labvalues(...getLCHComponents(token));
        // https://www.w3.org/TR/css-color-4/#lab-to-lch
        const rgb = Lab_to_sRGB(l, a, b);
        if (alpha != 1) {
            rgb.push(alpha);
        }
        return rgb;
    }
    // sRGB -> lRGB
    function srgb2lsrgbvalues(r, g, b, a = null) {
        // convert an array of linear-light sRGB values in the range 0.0-1.0
        // to gamma corrected form
        // https://en.wikipedia.org/wiki/SRGB
        // Extended transfer function:
        // For negative values, linear portion extends on reflection
        // of axis, then uses reflected pow below that
        const rgb = [r, g, b].map((val) => {
            const abs = Math.abs(val);
            if (abs <= 0.04045) {
                return val / 12.92;
            }
            return (Math.sign(val) || 1) * Math.pow((abs + 0.055) / 1.055, 2.4);
        });
        if (a != 1 && a != null) {
            rgb.push(a);
        }
        return rgb;
    }
    function lsrgb2srgbvalues(r, g, b, alpha) {
        // convert an array of linear-light sRGB values in the range 0.0-1.0
        // to gamma corrected form
        // https://en.wikipedia.org/wiki/SRGB
        // Extended transfer function:
        // For negative values, linear portion extends on reflection
        // of axis, then uses reflected pow below that
        const rgb = [r, g, b].map((val) => {
            let abs = Math.abs(val);
            if (Math.abs(val) > 0.0031308) {
                return (Math.sign(val) || 1) * (1.055 * Math.pow(abs, 1 / 2.4) - 0.055);
            }
            return 12.92 * val;
        });
        if (alpha != 1 && alpha != null) {
            rgb.push(alpha);
        }
        return rgb;
    }

    function srgb2rgb(value) {
        return minmax(Math.round(value * 255), 0, 255);
    }
    function hex2rgb(token) {
        const value = expandHexValue(token.kin == 'lit' ? COLORS_NAMES[token.val.toLowerCase()] : token.val);
        const rgb = [];
        for (let i = 1; i < value.length; i += 2) {
            rgb.push(parseInt(value.slice(i, i + 2), 16));
        }
        return rgb;
    }
    function hwb2rgb(token) {
        return hwb2srgb(token).map(srgb2rgb);
    }
    function hsl2rgb(token) {
        let { h, s, l, a } = hslvalues(token);
        return hsl2srgbvalues(h, s, l, a).map((t) => minmax(Math.round(t * 255), 0, 255));
    }
    function cmyk2rgb(token) {
        return cmyk2srgb(token).map(srgb2rgb);
    }
    function oklab2rgb(token) {
        return oklab2srgb(token).map(srgb2rgb);
    }
    function oklch2rgb(token) {
        return oklch2srgb(token).map(srgb2rgb);
    }
    function lab2rgb(token) {
        return lab2srgb(token).map(srgb2rgb);
    }
    function lch2rgb(token) {
        return lch2srgb(token).map(srgb2rgb);
    }

    function hwb2hsv(h, w, b, a) {
        // @ts-ignore
        return [h, 1 - w / (1 - b), 1 - b, a];
    }
    // https://gist.github.com/defims/0ca2ef8832833186ed396a2f8a204117#file-annotated-js
    function hsl2hsv(h, s, l, a = null) {
        s *= l < .5 ? l : 1 - l;
        const result = [
            //Range should be between 0 - 1
            h, //Hue stays the same
            2 * s / (l + s), //Saturation
            l + s //Value
        ];
        if (a != null) {
            result.push(a);
        }
        return result;
    }

    function hex2hsl(token) {
        // @ts-ignore
        return rgb2hslvalues(...hex2rgb(token));
    }
    function rgb2hsl(token) {
        const chi = getComponents(token);
        // @ts-ignore
        let t = chi[0];
        // @ts-ignore
        let r = getNumber(t);
        // @ts-ignore
        t = chi[1];
        // @ts-ignore
        let g = getNumber(t);
        // @ts-ignore
        t = chi[2];
        // @ts-ignore
        let b = getNumber(t);
        // @ts-ignore
        t = chi[3];
        // @ts-ignore
        let a = null;
        if (t != null && !(t.typ == exports.EnumToken.IdenTokenType && t.val == 'none')) {
            // @ts-ignore
            a = getNumber(t) / 255;
        }
        const values = [r, g, b];
        if (a != null && a != 1) {
            values.push(a);
        }
        // @ts-ignore
        return rgb2hslvalues(...values);
    }
    // https://gist.github.com/defims/0ca2ef8832833186ed396a2f8a204117#file-annotated-js
    function hsv2hsl(h, s, v, a) {
        const result = [
            //[hue, saturation, lightness]
            //Range should be between 0 - 1
            h, //Hue stays the same
            //Saturation is very different between the two color spaces
            //If (2-sat)*val < 1 set it to sat*val/((2-sat)*val)
            //Otherwise sat*val/(2-(2-sat)*val)
            //Conditional is not operating with hue, it is reassigned!
            s * v / ((h = (2 - s) * v) < 1 ? h : 2 - h),
            h / 2, //Lightness is (2-sat)*val/2
        ];
        if (a != null) {
            result.push(a);
        }
        return result;
    }
    function hwb2hsl(token) {
        // @ts-ignore
        return hsv2hsl(...hwb2hsv(...Object.values(hslvalues(token))));
    }
    function lab2hsl(token) {
        // @ts-ignore
        return rgb2hslvalues(...lab2rgb(token));
    }
    function lch2hsl(token) {
        // @ts-ignore
        return rgb2hslvalues(...lch2rgb(token));
    }
    function oklab2hsl(token) {
        // @ts-ignore
        return rgb2hslvalues(...oklab2rgb(token));
    }
    function oklch2hsl(token) {
        // @ts-ignore
        return rgb2hslvalues(...oklch2rgb(token));
    }
    function rgb2hslvalues(r, g, b, a = null) {
        return srgb2hsl(r / 255, g / 255, b / 255, a);
    }
    function srgb2hsl(r, g, b, a = null) {
        let max = Math.max(r, g, b);
        let min = Math.min(r, g, b);
        let h = 0;
        let s = 0;
        let l = (max + min) / 2;
        if (max != min) {
            let d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        const hsl = [h, s, l];
        if (a != null && a < 1) {
            // @ts-ignore
            return hsl.concat([a]);
        }
        // @ts-ignore
        return hsl;
    }

    function rgb2hwb(token) {
        // @ts-ignore
        return srgb2hwb(...getComponents(token).map((t, index) => {
            if (index == 3 && t.typ == exports.EnumToken.IdenTokenType && t.val == 'none') {
                return 1;
            }
            return getNumber(t) / 255;
        }));
    }
    function hsl2hwb(token) {
        // @ts-ignore
        return hsl2hwbvalues(...getComponents(token).map((t, index) => {
            if (index == 3 && (t.typ == exports.EnumToken.IdenTokenType && t.val == 'none')) {
                return 1;
            }
            if (index == 0) {
                return getAngle(t);
            }
            return getNumber(t);
        }));
    }
    function lab2hwb(token) {
        // @ts-ignore
        return srgb2hwb(...lab2srgb(token));
    }
    function lch2hwb(token) {
        // @ts-ignore
        return srgb2hwb(...lch2srgb(token));
    }
    function oklab2hwb(token) {
        // @ts-ignore
        return srgb2hwb(...oklab2srgb(token));
    }
    function oklch2hwb(token) {
        // @ts-ignore
        return srgb2hwb(...oklch2srgb(token));
    }
    function rgb2hue(r, g, b, fallback = 0) {
        let value = rgb2value(r, g, b);
        let whiteness = rgb2whiteness(r, g, b);
        let delta = value - whiteness;
        if (delta > 0) {
            // calculate segment
            let segment = value === r ? (g - b) / delta : (value === g
                ? (b - r) / delta
                : (r - g) / delta);
            // calculate shift
            let shift = value === r ? segment < 0
                ? 360 / 60
                : 0 / 60 : (value === g
                ? 120 / 60
                : 240 / 60);
            // calculate hue
            return (segment + shift) * 60;
        }
        return fallback;
    }
    function rgb2value(r, g, b) {
        return Math.max(r, g, b);
    }
    function rgb2whiteness(r, g, b) {
        return Math.min(r, g, b);
    }
    function srgb2hwb(r, g, b, a = null, fallback = 0) {
        r *= 100;
        g *= 100;
        b *= 100;
        let hue = rgb2hue(r, g, b, fallback);
        let whiteness = rgb2whiteness(r, g, b);
        let value = Math.round(rgb2value(r, g, b));
        let blackness = 100 - value;
        const result = [hue / 360, whiteness / 100, blackness / 100];
        if (a != null) {
            result.push(a);
        }
        return result;
    }
    function hsv2hwb(h, s, v, a = null) {
        const result = [h, (1 - s) * v, 1 - v];
        if (a != null) {
            result.push(a);
        }
        return result;
    }
    function hsl2hwbvalues(h, s, l, a = null) {
        // @ts-ignore
        return hsv2hwb(...hsl2hsv(h, s, l, a));
    }

    function xyzd502lch(x, y, z, alpha) {
        // @ts-ignore
        const [l, a, b] = xyz2lab(...XYZ_D50_to_D65(x, y, z));
        // L in range [0,100]. For use in CSS, add a percent
        // @ts-ignore
        return lab2lchvalues(l, a, b, alpha);
    }
    function XYZ_D65_to_D50(x, y, z) {
        // Bradford chromatic adaptation from D65 to D50
        // The matrix below is the result of three operations:
        // - convert from XYZ to retinal cone domain
        // - scale components from one reference white to another
        // - convert back to XYZ
        // see https://github.com/LeaVerou/color.js/pull/354/files
        var M = [
            [1.0479297925449969, 0.022946870601609652, -0.05019226628920524],
            [0.02962780877005599, 0.9904344267538799, -0.017073799063418826],
            [-0.009243040646204504, 0.015055191490298152, 0.7518742814281371]
        ];
        return multiplyMatrices(M, [x, y, z]);
    }

    function prophotorgb2srgbvalues(r, g, b, a = null) {
        // @ts-ignore
        return xyzd502srgb(...prophotorgb2xyz50(r, g, b, a));
    }
    function srgb2prophotorgbvalues(r, g, b, a) {
        // @ts-ignore
        return xyz50_to_prophotorgb(...XYZ_D65_to_D50(...srgb2xyz(r, g, b, a)));
    }
    function prophotorgb2lin_ProPhoto(r, g, b, a = null) {
        return [r, g, b].map(v => {
            let abs = Math.abs(v);
            if (abs >= 16 / 512) {
                return Math.sign(v) * Math.pow(abs, 1.8);
            }
            return v / 16;
        }).concat(a == null || a == 1 ? [] : [a]);
    }
    function prophotorgb2xyz50(r, g, b, a = null) {
        [r, g, b, a] = prophotorgb2lin_ProPhoto(r, g, b, a);
        const xyz = [
            0.7977666449006423 * r +
                0.1351812974005331 * g +
                0.0313477341283922 * b,
            0.2880748288194013 * r +
                0.7118352342418731 * g +
                0.0000899369387256 * b,
            0.8251046025104602 * b
        ];
        return xyz.concat(a == null || a == 1 ? [] : [a]);
    }
    function xyz50_to_prophotorgb(x, y, z, a) {
        // @ts-ignore
        return gam_prophotorgb(...[
            x * 1.3457868816471585 -
                y * 0.2555720873797946 -
                0.0511018649755453 * z,
            x * -0.5446307051249019 +
                y * 1.5082477428451466 +
                0.0205274474364214 * z,
            1.2119675456389452 * z
        ].concat(a == null || a == 1 ? [] : [a]));
    }
    function gam_prophotorgb(r, g, b, a) {
        return [r, g, b].map(v => {
            let abs = Math.abs(v);
            if (abs >= 1 / 512) {
                return Math.sign(v) * Math.pow(abs, 1 / 1.8);
            }
            return 16 * v;
        }).concat(a == null || a == 1 ? [] : [a]);
    }

    function a98rgb2srgbvalues(r, g, b, a = null) {
        //  @ts-ignore
        return xyz2srgb(...la98rgb2xyz(...a98rgb2la98(r, g, b, a)));
    }
    function srgb2a98values(r, g, b, a = null) {
        // @ts-ignore
        return la98rgb2a98rgb(xyz2la98rgb(...srgb2xyz(r, g, b, a)));
    }
    // a98-rgb functions
    function a98rgb2la98(r, g, b, a = null) {
        // convert an array of a98-rgb values in the range 0.0 - 1.0
        // to linear light (un-companded) form.
        // negative values are also now accepted
        return [r, g, b].map(function (val) {
            let sign = val < 0 ? -1 : 1;
            let abs = Math.abs(val);
            return sign * Math.pow(abs, 563 / 256);
        }).concat(a == null || a == 1 ? [] : [a]);
    }
    function la98rgb2a98rgb(r, g, b, a = null) {
        // convert an array of linear-light a98-rgb  in the range 0.0-1.0
        // to gamma corrected form
        // negative values are also now accepted
        return [r, b, g].map(function (val) {
            let sign = val < 0 ? -1 : 1;
            let abs = Math.abs(val);
            return sign * Math.pow(abs, 256 / 563);
        }).concat(a == null || a == 1 ? [] : [a]);
    }
    function la98rgb2xyz(r, g, b, a = null) {
        // convert an array of linear-light a98-rgb values to CIE XYZ
        // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
        // has greater numerical precision than section 4.3.5.3 of
        // https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf
        // but the values below were calculated from first principles
        // from the chromaticity coordinates of R G B W
        // see matrixmaker.html
        var M = [
            [573536 / 994567, 263643 / 1420810, 187206 / 994567],
            [591459 / 1989134, 6239551 / 9945670, 374412 / 4972835],
            [53769 / 1989134, 351524 / 4972835, 4929758 / 4972835],
        ];
        return multiplyMatrices(M, [r, g, b]).concat(a == null || a == 1 ? [] : [a]);
    }
    function xyz2la98rgb(x, y, z, a = null) {
        // convert XYZ to linear-light a98-rgb
        var M = [
            [1829569 / 896150, -506331 / 896150, -308931 / 896150],
            [-851781 / 878810, 1648619 / 878810, 36519 / 878810],
            [16779 / 1248040, -147721 / 1248040, 1266979 / 1248040],
        ];
        return multiplyMatrices(M, [x, y, z]).concat(a == null || a == 1 ? [] : [a]);
    }

    function rec20202srgb(r, g, b, a) {
        // @ts-ignore
        return xyz2srgb(...lrec20202xyz(...rec20202lrec2020(r, g, b)), a);
    }
    function srgb2rec2020values(r, g, b, a) {
        // @ts-ignore
        return lrec20202rec2020(...xyz2lrec2020(...srgb2xyz(r, g, b)), a);
    }
    function rec20202lrec2020(r, g, b, a) {
        // convert an array of rec2020 RGB values in the range 0.0 - 1.0
        // to linear light (un-companded) form.
        // ITU-R BT.2020-2 p.4
        const α = 1.09929682680944;
        const β = 0.018053968510807;
        return [r, g, b].map(function (val) {
            let sign = val < 0 ? -1 : 1;
            let abs = Math.abs(val);
            if (abs < β * 4.5) {
                return val / 4.5;
            }
            return sign * (Math.pow((abs + α - 1) / α, 1 / 0.45));
        }).concat([] );
    }
    function lrec20202rec2020(r, g, b, a) {
        // convert an array of linear-light rec2020 RGB  in the range 0.0-1.0
        // to gamma corrected form
        // ITU-R BT.2020-2 p.4
        const α = 1.09929682680944;
        const β = 0.018053968510807;
        return [r, g, b].map(function (val) {
            let sign = val < 0 ? -1 : 1;
            let abs = Math.abs(val);
            if (abs > β) {
                return sign * (α * Math.pow(abs, 0.45) - (α - 1));
            }
            return 4.5 * val;
        }).concat(a == null || a == 1 ? [] : [a]);
    }
    function lrec20202xyz(r, g, b, a) {
        // convert an array of linear-light rec2020 values to CIE XYZ
        // using  D65 (no chromatic adaptation)
        // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
        var M = [
            [63426534 / 99577255, 20160776 / 139408157, 47086771 / 278816314],
            [26158966 / 99577255, 472592308 / 697040785, 8267143 / 139408157],
            [0, 19567812 / 697040785, 295819943 / 278816314],
        ];
        // 0 is actually calculated as  4.994106574466076e-17
        return multiplyMatrices(M, [r, g, b]).concat(a == null || a == 1 ? [] : [a]);
    }
    function xyz2lrec2020(x, y, z, a) {
        // convert XYZ to linear-light rec2020
        var M = [
            [30757411 / 17917100, -6372589 / 17917100, -4539589 / 17917100],
            [-19765991 / 29648200, 47925759 / 29648200, 467509 / 29648200],
            [792561 / 44930125, -1921689 / 44930125, 42328811 / 44930125],
        ];
        return multiplyMatrices(M, [x, y, z]).concat(a == null || a == 1 ? [] : [a]);
    }

    function p32srgbvalues(r, g, b, alpha) {
        // @ts-ignore
        return xyz2srgb(...lp32xyz(...p32lp3(r, g, b, alpha)));
    }
    function srgb2p3values(r, g, b, alpha) {
        // @ts-ignore
        return srgb2xyz(...xyz2lp3(...lp32p3(r, g, b, alpha)));
    }
    function p32lp3(r, g, b, alpha) {
        // convert an array of display-p3 RGB values in the range 0.0 - 1.0
        // to linear light (un-companded) form.
        return srgb2lsrgbvalues(r, g, b, alpha); // same as sRGB
    }
    function lp32p3(r, g, b, alpha) {
        // convert an array of linear-light display-p3 RGB  in the range 0.0-1.0
        // to gamma corrected form
        return lsrgb2srgbvalues(r, g, b, alpha); // same as sRGB
    }
    function lp32xyz(r, g, b, alpha) {
        // convert an array of linear-light display-p3 values to CIE XYZ
        // using  D65 (no chromatic adaptation)
        // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
        const M = [
            [608311 / 1250200, 189793 / 714400, 198249 / 1000160],
            [35783 / 156275, 247089 / 357200, 198249 / 2500400],
            [0, 32229 / 714400, 5220557 / 5000800],
        ];
        const result = multiplyMatrices(M, [r, g, b]);
        if (alpha != null && alpha != 1) {
            result.push(alpha);
        }
        return result;
    }
    function xyz2lp3(x, y, z, alpha) {
        // convert XYZ to linear-light P3
        const M = [
            [446124 / 178915, -333277 / 357830, -72051 / 178915],
            [-14852 / 17905, 63121 / 35810, 423 / 17905],
            [11844 / 330415, -50337 / 660830, 316169 / 330415],
        ];
        const result = multiplyMatrices(M, [x, y, z]);
        if (alpha != null && alpha != 1) {
            result.push(alpha);
        }
        return result;
    }

    function convert(token, to) {
        if (token.kin == to) {
            return token;
        }
        if (token.kin == 'color') {
            const colorSpace = token.chi.find(t => ![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(t.typ));
            if (colorSpace.val == to) {
                return token;
            }
        }
        let values = [];
        if (to == 'hsl') {
            switch (token.kin) {
                case 'rgb':
                case 'rgba':
                    values.push(...rgb2hsl(token));
                    break;
                case 'hex':
                case 'lit':
                    values.push(...hex2hsl(token));
                    break;
                case 'hwb':
                    values.push(...hwb2hsl(token));
                    break;
                case 'oklab':
                    values.push(...oklab2hsl(token));
                    break;
                case 'oklch':
                    values.push(...oklch2hsl(token));
                    break;
                case 'lab':
                    values.push(...lab2hsl(token));
                    break;
                case 'lch':
                    values.push(...lch2hsl(token));
                    break;
                case 'color':
                    // @ts-ignore
                    values.push(...srgb2hsl(...color2srgbvalues(token)));
                    break;
            }
            if (values.length > 0) {
                return values2hsltoken(values);
            }
        }
        else if (to == 'hwb') {
            switch (token.kin) {
                case 'rgb':
                case 'rgba':
                    values.push(...rgb2hwb(token));
                    break;
                case 'hex':
                case 'lit':
                    values.push(...hex2hsl(token));
                    break;
                case 'hsl':
                case 'hsla':
                    values.push(...hsl2hwb(token));
                    break;
                case 'oklab':
                    values.push(...oklab2hwb(token));
                    break;
                case 'oklch':
                    values.push(...oklch2hwb(token));
                    break;
                case 'lab':
                    values.push(...lab2hwb(token));
                    break;
                case 'lch':
                    values.push(...lch2hwb(token));
                    break;
            }
            if (values.length > 0) {
                return values2hwbtoken(values);
            }
        }
        else if (to == 'rgb') {
            switch (token.kin) {
                case 'hex':
                case 'lit':
                    values.push(...hex2rgb(token));
                    break;
                case 'hsl':
                    values.push(...hsl2rgb(token));
                    break;
                case 'hwb':
                    values.push(...hwb2rgb(token));
                    break;
                case 'oklab':
                    values.push(...oklab2rgb(token));
                    break;
                case 'oklch':
                    values.push(...oklch2rgb(token));
                    break;
                case 'lab':
                    values.push(...lab2rgb(token));
                    break;
                case 'lch':
                    values.push(...lch2rgb(token));
                    break;
                case 'color':
                    // @ts-ignore
                    values.push(...srgb2rgb(...color2srgbvalues(token)));
                    break;
            }
            if (values.length > 0) {
                return values2rgbtoken(values);
            }
        }
        else if (to == 'lab') {
            switch (token.kin) {
                case 'hex':
                case 'lit':
                    values.push(...hex2lab(token));
                    break;
                case 'rgb':
                case 'rgba':
                    values.push(...rgb2lab(token));
                    break;
                case 'hsl':
                case 'hsla':
                    values.push(...hsl2lab(token));
                    break;
                case 'hwb':
                    values.push(...hwb2lab(token));
                    break;
                case 'lch':
                    values.push(...lch2lab(token));
                    break;
                case 'oklab':
                    values.push(...oklab2lab(token));
                    break;
                case 'oklch':
                    values.push(...oklch2lab(token));
                    break;
                case 'color':
                    // @ts-ignore
                    values.push(...srgb2lab(...color2srgbvalues(token)));
                    break;
            }
            if (values.length > 0) {
                return values2colortoken(values, to);
            }
        }
        else if (to == 'lch') {
            switch (token.kin) {
                case 'hex':
                case 'lit':
                    values.push(...hex2lch(token));
                    break;
                case 'rgb':
                case 'rgba':
                    values.push(...rgb2lch(token));
                    break;
                case 'hsl':
                case 'hsla':
                    values.push(...hsl2lch(token));
                    break;
                case 'hwb':
                    values.push(...hwb2lch(token));
                    break;
                case 'lab':
                    values.push(...lab2lch(token));
                    break;
                case 'oklab':
                    values.push(...oklab2lch(token));
                    break;
                case 'oklch':
                    values.push(...oklch2lch(token));
                    break;
                case 'color':
                    // @ts-ignore
                    values.push(...srgb2lch(...color2srgbvalues(token)));
                    break;
            }
            if (values.length > 0) {
                return values2colortoken(values, to);
            }
        }
        else if (to == 'oklab') {
            switch (token.kin) {
                case 'hex':
                case 'lit':
                    values.push(...hex2oklab(token));
                    break;
                case 'rgb':
                case 'rgba':
                    values.push(...rgb2oklab(token));
                    break;
                case 'hsl':
                case 'hsla':
                    values.push(...hsl2oklab(token));
                    break;
                case 'hwb':
                    values.push(...hwb2oklab(token));
                    break;
                case 'lab':
                    values.push(...lab2oklab(token));
                    break;
                case 'lch':
                    values.push(...lch2oklab(token));
                    break;
                case 'oklch':
                    values.push(...oklch2oklab(token));
                    break;
                case 'color':
                    // @ts-ignore
                    values.push(...srgb2oklab(...color2srgbvalues(token)));
                    break;
            }
            if (values.length > 0) {
                return values2colortoken(values, to);
            }
        }
        else if (to == 'oklch') {
            switch (token.kin) {
                case 'hex':
                case 'lit':
                    values.push(...hex2oklch(token));
                    break;
                case 'rgb':
                case 'rgba':
                    values.push(...rgb2oklch(token));
                    break;
                case 'hsl':
                case 'hsla':
                    values.push(...hsl2oklch(token));
                    break;
                case 'hwb':
                    values.push(...hwb2oklch(token));
                    break;
                case 'lab':
                    values.push(...lab2oklch(token));
                    break;
                case 'oklab':
                    values.push(...oklab2oklch(token));
                    break;
                case 'lch':
                    values.push(...lch2oklch(token));
                    break;
                case 'color':
                    // @ts-ignore
                    let val = color2srgbvalues(token);
                    switch (to) {
                        case 'srgb':
                            values.push(...val);
                            break;
                        case 'srgb-linear':
                            // @ts-ignore
                            values.push(...srgb2lsrgbvalues(...val));
                            break;
                        case 'display-p3':
                            // @ts-ignore
                            values.push(...srgb2p3values(...val));
                            break;
                        case 'prophoto-rgb':
                            // @ts-ignore
                            values.push(...srgb2prophotorgbvalues(...val));
                            break;
                        case 'a98-rgb':
                            // @ts-ignore
                            values.push(...srgb2a98values(...val));
                            break;
                        case 'rec2020':
                            // @ts-ignore
                            values.push(...srgb2rec2020values(...val));
                            break;
                        case 'xyz':
                        case 'xyz-d65':
                            // @ts-ignore
                            values.push(...srgb2xyz(...val));
                            break;
                        case 'xyz-d50':
                            // @ts-ignore
                            values.push(...(XYZ_D65_to_D50(...srgb2xyz(...val))));
                            break;
                    }
                    break;
            }
            if (values.length > 0) {
                return values2colortoken(values, to);
            }
        }
        else if (colorFuncColorSpace.includes(to)) {
            switch (token.kin) {
                case 'hex':
                case 'lit':
                    values.push(...hex2srgb(token));
                    break;
                case 'rgb':
                case 'rgba':
                    values.push(...rgb2srgb(token));
                    break;
                case 'hsl':
                case 'hsla':
                    values.push(...hsl2srgb(token));
                    break;
                case 'hwb':
                    values.push(...hwb2srgb(token));
                    break;
                case 'lab':
                    values.push(...lab2srgb(token));
                    break;
                case 'oklab':
                    values.push(...oklab2srgb(token));
                    break;
                case 'lch':
                    values.push(...lch2srgb(token));
                    break;
                case 'oklch':
                    // @ts-ignore
                    values.push(...srgb2oklch(...color2srgbvalues(token)));
                    break;
                case 'color':
                    const val = color2srgbvalues(token);
                    switch (to) {
                        case 'srgb':
                            values.push(...val);
                            break;
                        case 'srgb-linear':
                            // @ts-ignore
                            values.push(...srgb2lsrgbvalues(...val));
                            break;
                        case 'display-p3':
                            // @ts-ignore
                            values.push(...srgb2p3values(...val));
                            break;
                        case 'prophoto-rgb':
                            // @ts-ignore
                            values.push(...srgb2prophotorgbvalues(...val));
                            break;
                        case 'a98-rgb':
                            // @ts-ignore
                            values.push(...srgb2a98values(...val));
                            break;
                        case 'rec2020':
                            // @ts-ignore
                            values.push(...srgb2rec2020values(...val));
                            break;
                        case 'xyz':
                        case 'xyz-d65':
                            // @ts-ignore
                            values.push(...srgb2xyz(...val));
                            break;
                        case 'xyz-d50':
                            // @ts-ignore
                            values.push(...(XYZ_D65_to_D50(...srgb2xyz(...val))));
                            break;
                    }
                    break;
            }
            if (values.length > 0) {
                return values2colortoken(values, to);
            }
        }
        return null;
    }
    function minmax(value, min, max) {
        if (value < min) {
            return min;
        }
        if (value > max) {
            return max;
        }
        return value;
    }
    function color2srgbvalues(token) {
        const components = getComponents(token);
        const colorSpace = components.shift();
        let values = components.map((val) => getNumber(val));
        switch (colorSpace.val) {
            case 'display-p3':
                // @ts-ignore
                values = p32srgbvalues(...values);
                break;
            case 'srgb-linear':
                // @ts-ignore
                values = lsrgb2srgbvalues(...values);
                break;
            case 'prophoto-rgb':
                // @ts-ignore
                values = prophotorgb2srgbvalues(...values);
                break;
            case 'a98-rgb':
                // @ts-ignore
                values = a98rgb2srgbvalues(...values);
                break;
            case 'rec2020':
                // @ts-ignore
                values = rec20202srgb(...values);
                break;
            case 'xyz':
            case 'xyz-d65':
                // @ts-ignore
                values = xyz2srgb(...values);
                break;
            case 'xyz-d50':
                // @ts-ignore
                values = xyzd502srgb(...values);
                break;
            // case srgb:
        }
        return values;
    }
    function values2hsltoken(values) {
        const to = 'hsl';
        const chi = [
            { typ: exports.EnumToken.AngleTokenType, val: String(values[0] * 360), unit: 'deg' },
            { typ: exports.EnumToken.PercentageTokenType, val: String(values[1] * 100) },
            { typ: exports.EnumToken.PercentageTokenType, val: String(values[2] * 100) },
        ];
        if (values.length == 4) {
            chi.push({ typ: exports.EnumToken.PercentageTokenType, val: String(values[3] * 100) });
        }
        return {
            typ: exports.EnumToken.ColorTokenType,
            val: to,
            chi,
            kin: to
        };
    }
    function values2rgbtoken(values) {
        const to = 'rgb';
        const chi = [
            { typ: exports.EnumToken.NumberTokenType, val: String(values[0]) },
            { typ: exports.EnumToken.NumberTokenType, val: String(values[1]) },
            { typ: exports.EnumToken.NumberTokenType, val: String(values[2]) },
        ];
        if (values.length == 4) {
            chi.push({ typ: exports.EnumToken.PercentageTokenType, val: String(values[3] * 100) });
        }
        return {
            typ: exports.EnumToken.ColorTokenType,
            val: to,
            chi,
            kin: to
        };
    }
    function values2hwbtoken(values) {
        const to = 'hwb';
        const chi = [
            { typ: exports.EnumToken.AngleTokenType, val: String(values[0] * 360), unit: 'deg' },
            { typ: exports.EnumToken.PercentageTokenType, val: String(values[1] * 100) },
            { typ: exports.EnumToken.PercentageTokenType, val: String(values[2] * 100) },
        ];
        if (values.length == 4) {
            chi.push({ typ: exports.EnumToken.PercentageTokenType, val: String(values[3] * 100) });
        }
        return {
            typ: exports.EnumToken.ColorTokenType,
            val: to,
            chi,
            kin: to
        };
    }
    function values2colortoken(values, to) {
        const chi = [
            { typ: exports.EnumToken.NumberTokenType, val: String(values[0]) },
            { typ: exports.EnumToken.NumberTokenType, val: String(values[1]) },
            { typ: exports.EnumToken.NumberTokenType, val: String(values[2]) },
        ];
        if (values.length == 4) {
            chi.push({ typ: exports.EnumToken.PercentageTokenType, val: String(values[3] * 100) });
        }
        return colorFuncColorSpace.includes(to) ? {
            typ: exports.EnumToken.ColorTokenType,
            val: 'color',
            chi: [{ typ: exports.EnumToken.IdenTokenType, val: to }].concat(chi),
            kin: 'color'
        } : {
            typ: exports.EnumToken.ColorTokenType,
            val: to,
            chi,
            kin: to
        };
    }
    /**
     * clamp color values
     * @param token
     */
    function clamp(token) {
        if (token.kin == 'rgb' || token.kin == 'rgba') {
            token.chi.filter((token) => ![exports.EnumToken.LiteralTokenType, exports.EnumToken.CommaTokenType, exports.EnumToken.WhitespaceTokenType].includes(token.typ)).forEach((token, index) => {
                if (index <= 2) {
                    if (token.typ == exports.EnumToken.NumberTokenType) {
                        token.val = String(minmax(+token.val, 0, 255));
                    }
                    else if (token.typ == exports.EnumToken.PercentageTokenType) {
                        token.val = String(minmax(+token.val, 0, 100));
                    }
                }
                else {
                    if (token.typ == exports.EnumToken.NumberTokenType) {
                        token.val = String(minmax(+token.val, 0, 1));
                    }
                    else if (token.typ == exports.EnumToken.PercentageTokenType) {
                        token.val = String(minmax(+token.val, 0, 100));
                    }
                }
            });
        }
        return token;
    }
    function getNumber(token) {
        if (token.typ == exports.EnumToken.IdenTokenType && token.val == 'none') {
            return 0;
        }
        // @ts-ignore
        return token.typ == exports.EnumToken.PercentageTokenType ? token.val / 100 : +token.val;
    }
    function getAngle(token) {
        if (token.typ == exports.EnumToken.IdenTokenType) {
            if (token.val == 'none') {
                return 0;
            }
        }
        if (token.typ == exports.EnumToken.AngleTokenType) {
            switch (token.unit) {
                case 'deg':
                    // @ts-ignore
                    return token.val / 360;
                case 'rad':
                    // @ts-ignore
                    return token.val / (2 * Math.PI);
                case 'grad':
                    // @ts-ignore
                    return token.val / 400;
                case 'turn':
                    // @ts-ignore
                    return +token.val;
            }
        }
        // @ts-ignore
        return token.val / 360;
    }

    function interpolateHue(interpolationMethod, h1, h2) {
        switch (interpolationMethod.val) {
            case 'longer':
                if (h2 - h1 < 180 && h2 - h1 > 0) {
                    h1 += 360;
                }
                else if (h2 - h1 <= 0 && h2 - h1 > -180) {
                    h2 += 360;
                }
                break;
            case 'increasing':
                if (h2 < h1) {
                    h2 += 360;
                }
                break;
            case 'decreasing':
                if (h2 > h1) {
                    h1 += 360;
                }
                break;
            case 'shorter':
            default:
                // shorter
                if (h2 - h1 > 180) {
                    h1 += 360;
                }
                else if (h2 - h1 < -180) {
                    h2 += 360;
                }
                break;
        }
        return [h1, h2];
    }
    function colorMix(colorSpace, hueInterpolationMethod, color1, percentage1, color2, percentage2) {
        if (hueInterpolationMethod != null && isRectangularOrthogonalColorspace(colorSpace)) {
            return null;
        }
        if (isPolarColorspace(colorSpace) && hueInterpolationMethod == null) {
            hueInterpolationMethod = { typ: exports.EnumToken.IdenTokenType, val: 'shorter' };
        }
        if (percentage1 == null) {
            if (percentage2 == null) {
                // @ts-ignore
                percentage1 = { typ: exports.EnumToken.NumberTokenType, val: '.5' };
                // @ts-ignore
                percentage2 = { typ: exports.EnumToken.NumberTokenType, val: '.5' };
            }
            else {
                if (+percentage2.val <= 0) {
                    return null;
                }
                if (+percentage2.val >= 100) {
                    // @ts-ignore
                    percentage2 = { typ: exports.EnumToken.NumberTokenType, val: '1' };
                }
                // @ts-ignore
                percentage1 = { typ: exports.EnumToken.NumberTokenType, val: String(1 - percentage2.val / 100) };
            }
        }
        else {
            // @ts-ignore
            if (percentage1.val <= 0) {
                return null;
            }
            if (percentage2 == null) {
                // @ts-ignore
                if (percentage1.val >= 100) {
                    // @ts-ignore
                    percentage1 = { typ: exports.EnumToken.NumberTokenType, val: '1' };
                }
                // @ts-ignore
                percentage2 = { typ: exports.EnumToken.NumberTokenType, val: String(1 - percentage1.val / 100) };
            }
            else {
                // @ts-ignore
                if (percentage2.val <= 0) {
                    return null;
                }
            }
        }
        let values1 = srgbvalues(color1);
        let values2 = srgbvalues(color2);
        if (values1 == null || values2 == null) {
            return null;
        }
        const components1 = getComponents(color1);
        const components2 = getComponents(color2);
        if ((components1[3] != null && components1[3].typ == exports.EnumToken.IdenTokenType && components1[3].val == 'none') && values2.length == 4) {
            values1[3] = values2[3];
        }
        if ((components2[3] != null && components2[3].typ == exports.EnumToken.IdenTokenType && components2[3].val == 'none') && values1.length == 4) {
            values2[3] = values1[3];
        }
        const p1 = getNumber(percentage1);
        const p2 = getNumber(percentage2);
        const mul1 = values1.length == 4 ? values1.pop() : 1;
        const mul2 = values2.length == 4 ? values2.pop() : 1;
        const mul = mul1 * p1 + mul2 * p2;
        // @ts-ignore
        const calculate = () => [colorSpace].concat(values1.map((v1, i) => {
            return {
                // @ts-ignore
                typ: exports.EnumToken.NumberTokenType, val: String((mul1 * v1 * p1 + mul2 * values2[i] * p2) / mul)
            };
        }).concat(mul == 1 ? [] : [{
                typ: exports.EnumToken.NumberTokenType, val: String(mul)
            }]));
        switch (colorSpace.val) {
            case 'srgb':
                break;
            case 'display-p3':
                // @ts-ignore
                values1 = srgb2p3values(...values1);
                // @ts-ignore
                values2 = srgb2p3values(...values2);
                break;
            case 'a98-rgb':
                // @ts-ignore
                values1 = srgb2a98values(...values1);
                // @ts-ignore
                values2 = srgb2a98values(...values2);
                break;
            case 'prophoto-rgb':
                // @ts-ignore
                values1 = srgb2prophotorgbvalues(...values1);
                // @ts-ignore
                values2 = srgb2prophotorgbvalues(...values2);
                break;
            case 'srgb-linear':
                // @ts-ignore
                values1 = srgb2lsrgbvalues(...values1);
                // @ts-ignore
                values2 = srgb2lsrgbvalues(...values2);
                break;
            case 'rec2020':
                // @ts-ignore
                values1 = srgb2rec2020values(...values1);
                // @ts-ignore
                values2 = srgb2rec2020values(...values2);
                break;
            case 'xyz':
            case 'xyz-d65':
            case 'xyz-d50':
                // @ts-ignore
                values1 = srgb2xyz(...values1);
                // @ts-ignore
                values2 = srgb2xyz(...values2);
                if (colorSpace.val == 'xyz-d50') {
                    // @ts-ignore
                    values1 = XYZ_D65_to_D50(...values1);
                    // @ts-ignore
                    values2 = XYZ_D65_to_D50(...values2);
                }
                break;
            case 'rgb':
                // @ts-ignore
                values1 = srgb2rgb(...values1);
                // @ts-ignore
                values2 = srgb2rgb(...values2);
                break;
            case 'hsl':
                // @ts-ignore
                values1 = srgb2hsl(...values1);
                // @ts-ignore
                values2 = srgb2hsl(...values2);
                break;
            case 'hwb':
                // @ts-ignore
                values1 = srgb2hwb(...values1);
                // @ts-ignore
                values2 = srgb2hwb(...values2);
                break;
            case 'lab':
                // @ts-ignore
                values1 = srgb2lab(...values1);
                // @ts-ignore
                values2 = srgb2lab(...values2);
                break;
            case 'lch':
                // @ts-ignore
                values1 = srgb2lch(...values1);
                // @ts-ignore
                values2 = srgb2lch(...values2);
                break;
            case 'oklab':
                // @ts-ignore
                values1 = srgb2oklab(...values1);
                // @ts-ignore
                values2 = srgb2oklab(...values2);
                break;
            case 'oklch':
                // @ts-ignore
                values1 = srgb2oklch(...values1);
                // @ts-ignore
                values2 = srgb2oklch(...values2);
                break;
            default:
                return null;
        }
        const lchSpaces = ['lch', 'oklch'];
        // powerless
        if (lchSpaces.includes(color1.kin) || lchSpaces.includes(colorSpace.val)) {
            if ((components1[2].typ == exports.EnumToken.IdenTokenType && components1[2].val == 'none') || values1[2] == 0) {
                values1[2] = values2[2];
            }
        }
        // powerless
        if (lchSpaces.includes(color1.kin) || lchSpaces.includes(colorSpace.val)) {
            if ((components2[2].typ == exports.EnumToken.IdenTokenType && components2[2].val == 'none') || values2[2] == 0) {
                values2[2] = values1[2];
            }
        }
        if (hueInterpolationMethod != null) {
            let hueIndex = 2;
            let multiplier = 1;
            if (['hwb', 'hsl'].includes(colorSpace.val)) {
                hueIndex = 0;
                multiplier = 360;
            }
            const [h1, h2] = interpolateHue(hueInterpolationMethod, values1[hueIndex] * multiplier, values2[hueIndex] * multiplier);
            values1[hueIndex] = h1 / multiplier;
            values2[hueIndex] = h2 / multiplier;
        }
        switch (colorSpace.val) {
            case 'xyz':
            case 'xyz-d65':
            case 'xyz-d50':
                let values = values1.map((v1, i) => (mul1 * v1 * p1 + mul2 * values2[i] * p2) / mul)
                    .concat(mul == 1 ? [] : [mul]);
                if (colorSpace.val == 'xyz-d50') {
                    // @ts-ignore
                    values = xyzd502lch(...values);
                }
                else {
                    // @ts-ignore
                    values = xyz2lchvalues(...values);
                }
                // @ts-ignore
                return {
                    typ: exports.EnumToken.ColorTokenType,
                    val: 'lch',
                    chi: values.map(v => {
                        return {
                            typ: exports.EnumToken.NumberTokenType,
                            val: String(v)
                        };
                    }),
                    kin: 'lch'
                };
            case 'srgb':
            case 'srgb-linear':
            case 'a98-rgb':
            case 'rec2020':
                // @ts-ignore
                return {
                    typ: exports.EnumToken.ColorTokenType,
                    val: 'color',
                    chi: calculate(),
                    kin: 'color',
                    cal: 'col'
                };
            case 'rgb':
            case 'hsl':
            case 'hwb':
            case 'lab':
            case 'lch':
            case 'oklab':
            case 'oklch':
                if (['hsl', 'hwb'].includes(colorSpace.val)) {
                    // @ts-ignore
                    if (values1[2] < 0) {
                        // @ts-ignore
                        values1[2] += 1;
                    }
                    // @ts-ignore
                    if (values2[2] < 0) {
                        // @ts-ignore
                        values2[2] += 1;
                    }
                }
                else if (['lch', 'oklch'].includes(colorSpace.val)) {
                    // @ts-ignore
                    if (values1[2] < 0) {
                        // @ts-ignore
                        values1[2] += 360;
                    }
                    // @ts-ignore
                    if (values2[2] < 0) {
                        // @ts-ignore
                        values2[2] += 360;
                    }
                }
                // @ts-ignore
                const result = {
                    typ: exports.EnumToken.ColorTokenType,
                    val: colorSpace.val,
                    chi: calculate().slice(1),
                    kin: colorSpace.val
                };
                if (colorSpace.val == 'hsl' || colorSpace.val == 'hwb') {
                    // @ts-ignore
                    result.chi[0] = { typ: exports.EnumToken.AngleTokenType, val: String(result.chi[0].val * 360), unit: 'deg' };
                    // @ts-ignore
                    result.chi[1] = { typ: exports.EnumToken.PercentageTokenType, val: String(result.chi[1].val * 100) };
                    // @ts-ignore
                    result.chi[2] = { typ: exports.EnumToken.PercentageTokenType, val: String(result.chi[2].val * 100) };
                }
                return result;
        }
        return null;
    }

    function gcd(x, y) {
        x = Math.abs(x);
        y = Math.abs(y);
        let t;
        if (x == 0 || y == 0) {
            return 1;
        }
        while (y) {
            t = y;
            y = x % y;
            x = t;
        }
        return x;
    }
    function compute(a, b, op) {
        if (typeof a == 'number' && typeof b == 'number') {
            switch (op) {
                case exports.EnumToken.Add:
                    return a + b;
                case exports.EnumToken.Sub:
                    return a - b;
                case exports.EnumToken.Mul:
                    return a * b;
                case exports.EnumToken.Div:
                    const r = simplify(a, b);
                    if (r[1] == 1) {
                        return r[0];
                    }
                    const result = a / b;
                    const r2 = reduceNumber(r[0]) + '/' + reduceNumber(r[1]);
                    return reduceNumber(result).length <= r2.length ? result : {
                        typ: exports.EnumToken.FractionTokenType,
                        l: { typ: exports.EnumToken.NumberTokenType, val: reduceNumber(r[0]) },
                        r: { typ: exports.EnumToken.NumberTokenType, val: reduceNumber(r[1]) }
                    };
            }
        }
        let l1 = typeof a == 'number' ? {
            typ: exports.EnumToken.FractionTokenType,
            l: { typ: exports.EnumToken.NumberTokenType, val: reduceNumber(a) },
            r: { typ: exports.EnumToken.NumberTokenType, val: '1' }
        } : a;
        let r1 = typeof b == 'number' ? {
            typ: exports.EnumToken.FractionTokenType,
            l: { typ: exports.EnumToken.NumberTokenType, val: reduceNumber(b) },
            r: { typ: exports.EnumToken.NumberTokenType, val: '1' }
        } : b;
        let l2;
        let r2;
        switch (op) {
            case exports.EnumToken.Add:
                // @ts-ignore
                l2 = l1.l.val * r1.r.val + l1.r.val * r1.l.val;
                // @ts-ignore
                r2 = l1.r.val * r1.r.val;
                break;
            case exports.EnumToken.Sub:
                // @ts-ignore
                l2 = l1.l.val * r1.r.val - l1.r.val * r1.l.val;
                // @ts-ignore
                r2 = l1.r.val * r1.r.val;
                break;
            case exports.EnumToken.Mul:
                // @ts-ignore
                l2 = l1.l.val * r1.l.val;
                // @ts-ignore
                r2 = l1.r.val * r1.r.val;
                break;
            case exports.EnumToken.Div:
                // @ts-ignore
                l2 = l1.l.val * r1.r.val;
                // @ts-ignore
                r2 = l1.r.val * r1.l.val;
                break;
        }
        const a2 = simplify(l2, r2);
        if (a2[1] == 1) {
            return a2[0];
        }
        const result = a2[0] / a2[1];
        return reduceNumber(result).length <= reduceNumber(a2[0]).length + 1 + reduceNumber(a2[1]).length ? result : {
            typ: exports.EnumToken.FractionTokenType,
            l: { typ: exports.EnumToken.NumberTokenType, val: reduceNumber(a2[0]) },
            r: { typ: exports.EnumToken.NumberTokenType, val: reduceNumber(a2[1]) }
        };
    }
    function simplify(a, b) {
        const g = gcd(a, b);
        return g > 1 ? [a / g, b / g] : [a, b];
    }

    /**
     * evaluate an array of tokens
     * @param tokens
     */
    function evaluate(tokens) {
        let nodes;
        try {
            nodes = inlineExpression(evaluateExpression(buildExpression(tokens)));
        }
        catch (e) {
            // console.error({tokens});
            // console.error(e);
            return tokens;
        }
        if (nodes.length <= 1) {
            return nodes;
        }
        const map = new Map;
        let token;
        let i;
        for (i = 0; i < nodes.length; i++) {
            token = nodes[i];
            if (token.typ == exports.EnumToken.Add) {
                continue;
            }
            if (token.typ == exports.EnumToken.Sub) {
                if (!isScalarToken(nodes[i + 1])) {
                    token = { typ: exports.EnumToken.ListToken, chi: [nodes[i], nodes[i + 1]] };
                }
                else {
                    token = doEvaluate(nodes[i + 1], { typ: exports.EnumToken.NumberTokenType, val: '-1' }, exports.EnumToken.Mul);
                }
                i++;
            }
            if (!map.has(token.typ)) {
                map.set(token.typ, [token]);
            }
            else {
                map.get(token.typ).push(token);
            }
        }
        return [...map].reduce((acc, curr) => {
            const token = curr[1].reduce((acc, curr) => doEvaluate(acc, curr, exports.EnumToken.Add));
            if (token.typ != exports.EnumToken.BinaryExpressionTokenType) {
                if ('val' in token && +token.val < 0) {
                    acc.push({ typ: exports.EnumToken.Sub }, { ...token, val: String(-token.val) });
                    return acc;
                }
            }
            if (acc.length > 0 && curr[0] != exports.EnumToken.ListToken) {
                acc.push({ typ: exports.EnumToken.Add });
            }
            acc.push(token);
            return acc;
        }, []);
    }
    /**
     * evaluate arithmetic operation
     * @param l
     * @param r
     * @param op
     */
    function doEvaluate(l, r, op) {
        const defaultReturn = {
            typ: exports.EnumToken.BinaryExpressionTokenType,
            op,
            l,
            r
        };
        if (!isScalarToken(l) || !isScalarToken(r)) {
            return defaultReturn;
        }
        if ((op == exports.EnumToken.Add || op == exports.EnumToken.Sub)) {
            // @ts-ignore
            if (l.typ != r.typ) {
                return defaultReturn;
            }
        }
        else if (op == exports.EnumToken.Mul &&
            ![exports.EnumToken.NumberTokenType, exports.EnumToken.PercentageTokenType].includes(l.typ) &&
            ![exports.EnumToken.NumberTokenType, exports.EnumToken.PercentageTokenType].includes(r.typ)) {
            return defaultReturn;
        }
        const typ = l.typ == exports.EnumToken.NumberTokenType ? r.typ : (r.typ == exports.EnumToken.NumberTokenType ? l.typ : (l.typ == exports.EnumToken.PercentageTokenType ? r.typ : l.typ));
        // @ts-ignore
        let v1 = typeof l.val == 'string' ? +l.val : l.val;
        // @ts-ignore
        let v2 = typeof r.val == 'string' ? +r.val : r.val;
        if (op == exports.EnumToken.Mul) {
            if (l.typ != exports.EnumToken.NumberTokenType && r.typ != exports.EnumToken.NumberTokenType) {
                if (typeof v1 == 'number' && l.typ == exports.EnumToken.PercentageTokenType) {
                    v1 = {
                        typ: exports.EnumToken.FractionTokenType,
                        l: { typ: exports.EnumToken.NumberTokenType, val: String(v1) },
                        r: { typ: exports.EnumToken.NumberTokenType, val: '100' }
                    };
                }
                else if (typeof v2 == 'number' && r.typ == exports.EnumToken.PercentageTokenType) {
                    v2 = {
                        typ: exports.EnumToken.FractionTokenType,
                        l: { typ: exports.EnumToken.NumberTokenType, val: String(v2) },
                        r: { typ: exports.EnumToken.NumberTokenType, val: '100' }
                    };
                }
            }
        }
        // @ts-ignore
        const val = compute(v1, v2, op);
        return {
            ...(l.typ == exports.EnumToken.NumberTokenType ? r : l),
            typ,
            val: typeof val == 'number' ? reduceNumber(val) : val
        };
    }
    /**
     * convert BinaryExpression into an array
     * @param token
     */
    function inlineExpression(token) {
        const result = [];
        if (token.typ == exports.EnumToken.ParensTokenType && token.chi.length == 1) {
            result.push(token.chi[0]);
        }
        else if (token.typ == exports.EnumToken.BinaryExpressionTokenType) {
            if ([exports.EnumToken.Mul, exports.EnumToken.Div].includes(token.op)) {
                result.push(token);
            }
            else {
                result.push(...inlineExpression(token.l), { typ: token.op }, ...inlineExpression(token.r));
            }
        }
        else {
            result.push(token);
        }
        return result;
    }
    /**
     * evaluate expression
     * @param token
     */
    function evaluateExpression(token) {
        if (token.typ != exports.EnumToken.BinaryExpressionTokenType) {
            return token;
        }
        if (token.r.typ == exports.EnumToken.BinaryExpressionTokenType) {
            token.r = evaluateExpression(token.r);
        }
        if (token.l.typ == exports.EnumToken.BinaryExpressionTokenType) {
            token.l = evaluateExpression(token.l);
        }
        return doEvaluate(token.l, token.r, token.op);
    }
    function isScalarToken(token) {
        return 'unit' in token || [exports.EnumToken.NumberTokenType, exports.EnumToken.FractionTokenType, exports.EnumToken.PercentageTokenType].includes(token.typ);
    }
    /**
     *
     * generate binary expression tree
     * @param tokens
     */
    function buildExpression(tokens) {
        return factor(factor(tokens.filter(t => t.typ != exports.EnumToken.WhitespaceTokenType), ['/', '*']), ['+', '-'])[0];
    }
    function getArithmeticOperation(op) {
        if (op == '+') {
            return exports.EnumToken.Add;
        }
        if (op == '-') {
            return exports.EnumToken.Sub;
        }
        if (op == '/') {
            return exports.EnumToken.Div;
        }
        return exports.EnumToken.Mul;
    }
    /**
     *
     * generate binary expression tree
     * @param token
     */
    function factorToken(token) {
        if (token.typ == exports.EnumToken.ParensTokenType || (token.typ == exports.EnumToken.FunctionTokenType && token.val == 'calc')) {
            if (token.typ == exports.EnumToken.FunctionTokenType && token.val == 'calc') {
                token = { ...token, typ: exports.EnumToken.ParensTokenType };
                // @ts-ignore
                delete token.val;
            }
            return buildExpression(token.chi);
        }
        return token;
    }
    /**
     * generate binary expression tree
     * @param tokens
     * @param ops
     */
    function factor(tokens, ops) {
        let isOp;
        const opList = ops.map(x => getArithmeticOperation(x));
        if (tokens.length == 1) {
            return [factorToken(tokens[0])];
        }
        for (let i = 0; i < tokens.length; i++) {
            if (tokens[i].typ == exports.EnumToken.ListToken) {
                // @ts-ignore
                tokens.splice(i, 1, ...tokens[i].chi);
            }
            isOp = opList.includes(tokens[i].typ);
            if (isOp ||
                // @ts-ignore
                (tokens[i].typ == exports.EnumToken.LiteralTokenType && ops.includes(tokens[i].val))) {
                tokens.splice(i - 1, 3, {
                    typ: exports.EnumToken.BinaryExpressionTokenType,
                    op: isOp ? tokens[i].typ : getArithmeticOperation(tokens[i].val),
                    l: factorToken(tokens[i - 1]),
                    r: factorToken(tokens[i + 1])
                });
                i--;
            }
        }
        return tokens;
    }

    function parseRelativeColor(relativeKeys, original, rExp, gExp, bExp, aExp) {
        let r;
        let g;
        let b;
        let alpha = null;
        let keys = {};
        let values = {};
        // colorFuncColorSpace x,y,z or r,g,b
        const names = relativeKeys.startsWith('xyz') ? 'xyz' : relativeKeys.slice(-3);
        // @ts-ignore
        const converted = convert(original, relativeKeys);
        if (converted == null) {
            return null;
        }
        const children = converted.chi.filter(t => ![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.LiteralTokenType, exports.EnumToken.CommentTokenType].includes(t.typ));
        [r, g, b, alpha] = converted.kin == 'color' ? children.slice(1) : children;
        values = {
            [names[0]]: getValue(r, converted, names[0]),
            [names[1]]: getValue(g, converted, names[1]), // string,
            [names[2]]: getValue(b, converted, names[2]),
            // @ts-ignore
            alpha: alpha == null || (alpha.typ == exports.EnumToken.IdenTokenType && alpha.val == 'none') ? {
                typ: exports.EnumToken.NumberTokenType,
                val: '1'
            } : (alpha.typ == exports.EnumToken.PercentageTokenType ? {
                typ: exports.EnumToken.NumberTokenType,
                val: String(getNumber(alpha))
            } : alpha)
        };
        keys = {
            [names[0]]: getValue(rExp, converted, names[0]),
            [names[1]]: getValue(gExp, converted, names[1]),
            [names[2]]: getValue(bExp, converted, names[2]),
            // @ts-ignore
            alpha: getValue(aExp == null || (aExp.typ == exports.EnumToken.IdenTokenType && aExp.val == 'none') ? {
                typ: exports.EnumToken.NumberTokenType,
                val: '1'
            } : aExp)
        };
        return computeComponentValue(keys, values);
    }
    function getValue(t, converted, component) {
        if (t == null) {
            return t;
        }
        if (t.typ == exports.EnumToken.PercentageTokenType) {
            let value = getNumber(t);
            if (converted.kin in colorRange) {
                // @ts-ignore
                value *= colorRange[converted.kin][component].at(-1);
            }
            return {
                typ: exports.EnumToken.NumberTokenType,
                val: String(value)
            };
        }
        return t;
    }
    function computeComponentValue(expr, values) {
        for (const object of [values, expr]) {
            if ('h' in object) {
                // normalize hue
                // @ts-ignore
                for (const k of walkValues([object.h])) {
                    if (k.value.typ == exports.EnumToken.AngleTokenType && k.value.unit == 'deg') {
                        // @ts-ignore
                        k.value.typ = exports.EnumToken.NumberTokenType;
                        // @ts-ignore
                        delete k.value.unit;
                    }
                }
            }
        }
        for (const [key, exp] of Object.entries(expr)) {
            if (exp == null) {
                if (key in values) {
                    if (typeof values[key] == 'number') {
                        expr[key] = {
                            typ: exports.EnumToken.NumberTokenType,
                            val: reduceNumber(values[key])
                        };
                    }
                    else {
                        expr[key] = values[key];
                    }
                }
            }
            else if ([exports.EnumToken.NumberTokenType, exports.EnumToken.PercentageTokenType, exports.EnumToken.AngleTokenType, exports.EnumToken.LengthTokenType].includes(exp.typ)) ;
            else if (exp.typ == exports.EnumToken.IdenTokenType && exp.val in values) {
                if (typeof values[exp.val] == 'number') {
                    expr[key] = {
                        typ: exports.EnumToken.NumberTokenType,
                        val: reduceNumber(values[exp.val])
                    };
                }
                else {
                    expr[key] = values[exp.val];
                }
            }
            else if (exp.typ == exports.EnumToken.FunctionTokenType && exp.val == 'calc') {
                for (let { value, parent } of walkValues(exp.chi)) {
                    if (value.typ == exports.EnumToken.IdenTokenType) {
                        if (!(value.val in values)) {
                            return null;
                        }
                        if (parent == null) {
                            parent = exp;
                        }
                        if (parent.typ == exports.EnumToken.BinaryExpressionTokenType) {
                            if (parent.l == value) {
                                parent.l = values[value.val];
                            }
                            else {
                                parent.r = values[value.val];
                            }
                        }
                        else {
                            for (let i = 0; i < parent.chi.length; i++) {
                                if (parent.chi[i] == value) {
                                    parent.chi.splice(i, 1, values[value.val]);
                                    break;
                                }
                            }
                        }
                    }
                }
                const result = evaluate(exp.chi);
                if (result.length == 1 && result[0].typ != exports.EnumToken.BinaryExpressionTokenType) {
                    expr[key] = result[0];
                }
                else {
                    return null;
                }
            }
        }
        return expr;
    }

    // from https://github.com/Rich-Harris/vlq/tree/master
    // credit: Rich Harris
    const integer_to_char = {};
    let i = 0;
    for (const char of 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=') {
        integer_to_char[i++] = char;
    }
    function encode(value) {
        if (typeof value === 'number') {
            return encode_integer(value);
        }
        let result = '';
        for (let i = 0; i < value.length; i += 1) {
            result += encode_integer(value[i]);
        }
        return result;
    }
    function encode_integer(num) {
        let result = '';
        if (num < 0) {
            num = (-num << 1) | 1;
        }
        else {
            num <<= 1;
        }
        do {
            let clamped = num & 31;
            num >>>= 5;
            if (num > 0) {
                clamped |= 32;
            }
            result += integer_to_char[clamped];
        } while (num > 0);
        return result;
    }

    class SourceMap {
        #version = 3;
        #sources = [];
        #map = new Map;
        #line = -1;
        lastLocation = null;
        add(source, original) {
            if (original.src !== '') {
                if (!this.#sources.includes(original.src)) {
                    this.#sources.push(original.src);
                }
                const line = source.sta.lin - 1;
                let record;
                if (line > this.#line) {
                    this.#line = line;
                }
                if (!this.#map.has(line)) {
                    record = [Math.max(0, source.sta.col - 1), this.#sources.indexOf(original.src), original.sta.lin - 1, original.sta.col - 1];
                    this.#map.set(line, [record]);
                }
                else {
                    const arr = this.#map.get(line);
                    record = [Math.max(0, source.sta.col - 1 - arr[0][0]), this.#sources.indexOf(original.src) - arr[0][1], original.sta.lin - 1, original.sta.col - 1];
                    arr.push(record);
                }
                if (this.lastLocation != null) {
                    record[2] -= this.lastLocation.sta.lin - 1;
                    record[3] -= this.lastLocation.sta.col - 1;
                }
                this.lastLocation = original;
            }
        }
        toUrl() {
            // /*# sourceMappingURL = ${url} */
            return `data:application/json,${encodeURIComponent(JSON.stringify(this.toJSON()))}`;
        }
        toJSON() {
            const mappings = [];
            let i = 0;
            for (; i <= this.#line; i++) {
                if (!this.#map.has(i)) {
                    mappings.push('');
                }
                else {
                    mappings.push(this.#map.get(i).reduce((acc, curr) => acc + (acc === '' ? '' : ',') + encode(curr), ''));
                }
            }
            return {
                version: this.#version,
                sources: this.#sources.slice(),
                mappings: mappings.join(';')
            };
        }
    }

    const colorsFunc = ['rgb', 'rgba', 'hsl', 'hsla', 'hwb', 'device-cmyk', 'color-mix', 'color', 'oklab', 'lab', 'oklch', 'lch', 'light-dark'];
    function reduceNumber(val) {
        val = String(+val);
        if (val === '0') {
            return '0';
        }
        const chr = val.charAt(0);
        if (chr == '-') {
            const slice = val.slice(0, 2);
            if (slice == '-0') {
                return val.length == 2 ? '0' : '-' + val.slice(2);
            }
        }
        if (chr == '0') {
            return val.slice(1);
        }
        return val;
    }
    function update(position, str) {
        let i = 0;
        for (; i < str.length; i++) {
            if (isNewLine(str[i].charCodeAt(0))) {
                position.lin++;
                position.col = 0;
            }
            else {
                position.col++;
            }
        }
    }
    function doRender(data, options = {}) {
        options = {
            ...(options.minify ?? true ? {
                indent: '',
                newLine: '',
                removeComments: true
            } : {
                indent: ' ',
                newLine: '\n',
                compress: false,
                removeComments: false,
            }), sourcemap: false, convertColor: true, expandNestingRules: false, preserveLicense: false, ...options
        };
        if (options.withParents) {
            // @ts-ignore
            let parent = data.parent;
            // @ts-ignore
            while (data.parent != null) {
                // @ts-ignore
                parent = { ...data.parent, chi: [{ ...data }] };
                // @ts-ignore
                parent.parent = data.parent.parent;
                // @ts-ignore
                data = parent;
            }
        }
        const startTime = performance.now();
        const errors = [];
        const sourcemap = options.sourcemap ? new SourceMap : null;
        const cache = Object.create(null);
        const result = {
            code: renderAstNode(options.expandNestingRules ? expand(data) : data, options, sourcemap, {
                ind: 0,
                lin: 1,
                col: 1
            }, errors, function reducer(acc, curr) {
                if (curr.typ == exports.EnumToken.CommentTokenType && options.removeComments) {
                    if (!options.preserveLicense || !curr.val.startsWith('/*!')) {
                        return acc;
                    }
                    return acc + curr.val;
                }
                return acc + renderToken(curr, options, cache, reducer, errors);
            }, cache), errors, stats: {
                total: `${(performance.now() - startTime).toFixed(2)}ms`
            }
        };
        if (options.output != null) {
            // @ts-ignore
            options.output = options.resolve(options.output, options.cwd).absolute;
        }
        if (sourcemap != null) {
            result.map = sourcemap;
        }
        return result;
    }
    function updateSourceMap(node, options, cache, sourcemap, position, str) {
        if ([exports.EnumToken.RuleNodeType, exports.EnumToken.AtRuleNodeType, exports.EnumToken.KeyFrameRuleNodeType].includes(node.typ)) {
            let src = node.loc?.src ?? '';
            let output = options.output ?? '';
            if (!(src in cache)) {
                // @ts-ignore
                cache[src] = options.resolve(src, options.cwd ?? '').relative;
            }
            if (!(output in cache)) {
                // @ts-ignore
                cache[output] = options.resolve(output, options.cwd).relative;
            }
            // @ts-ignore
            sourcemap.add({ src: cache[output], sta: { ...position } }, {
                ...node.loc,
                // @ts-ignore
                src: options.resolve(cache[src], options.cwd).relative
            });
        }
        update(position, str);
    }
    // @ts-ignore
    function renderAstNode(data, options, sourcemap, position, errors, reducer, cache, level = 0, indents = []) {
        if (indents.length < level + 1) {
            indents.push(options.indent.repeat(level));
        }
        if (indents.length < level + 2) {
            indents.push(options.indent.repeat(level + 1));
        }
        const indent = indents[level];
        const indentSub = indents[level + 1];
        switch (data.typ) {
            case exports.EnumToken.DeclarationNodeType:
                return `${data.nam}:${options.indent}${data.val.reduce(reducer, '')}`;
            case exports.EnumToken.CommentNodeType:
            case exports.EnumToken.CDOCOMMNodeType:
                if (data.val.startsWith('/*# sourceMappingURL=')) {
                    // ignore sourcemap
                    return '';
                }
                return !options.removeComments || (options.preserveLicense && data.val.startsWith('/*!')) ? data.val : '';
            case exports.EnumToken.StyleSheetNodeType:
                return data.chi.reduce((css, node) => {
                    const str = renderAstNode(node, options, sourcemap, { ...position }, errors, reducer, cache, level, indents);
                    if (str === '') {
                        return css;
                    }
                    if (css === '') {
                        if (sourcemap != null && node.loc != null) {
                            updateSourceMap(node, options, cache, sourcemap, position, str);
                        }
                        return str;
                    }
                    if (sourcemap != null && node.loc != null) {
                        update(position, options.newLine);
                        updateSourceMap(node, options, cache, sourcemap, position, str);
                    }
                    return `${css}${options.newLine}${str}`;
                }, '');
            case exports.EnumToken.AtRuleNodeType:
            case exports.EnumToken.RuleNodeType:
            case exports.EnumToken.KeyFrameRuleNodeType:
                if (data.typ == exports.EnumToken.AtRuleNodeType && !('chi' in data)) {
                    return `${indent}@${data.nam}${data.val === '' ? '' : options.indent || ' '}${data.val};`;
                }
                // @ts-ignore
                let children = data.chi.reduce((css, node) => {
                    let str;
                    if (node.typ == exports.EnumToken.CommentNodeType) {
                        str = options.removeComments && (!options.preserveLicense || !node.val.startsWith('/*!')) ? '' : node.val;
                    }
                    else if (node.typ == exports.EnumToken.DeclarationNodeType) {
                        if (node.val.length == 0) {
                            // @ts-ignore
                            errors.push({
                                action: 'ignore',
                                message: `render: invalid declaration ${JSON.stringify(node)}`,
                                location: node.loc
                            });
                            return '';
                        }
                        str = `${node.nam}:${options.indent}${node.val.reduce(reducer, '').trimEnd()};`;
                    }
                    else if (node.typ == exports.EnumToken.AtRuleNodeType && !('chi' in node)) {
                        str = `${data.val === '' ? '' : options.indent || ' '}${data.val};`;
                    }
                    else {
                        str = renderAstNode(node, options, sourcemap, { ...position }, errors, reducer, cache, level + 1, indents);
                    }
                    if (css === '') {
                        return str;
                    }
                    if (str === '') {
                        return css;
                    }
                    return `${css}${options.newLine}${indentSub}${str}`;
                }, '');
                if (children.endsWith(';')) {
                    children = children.slice(0, -1);
                }
                if (data.typ == exports.EnumToken.AtRuleNodeType) {
                    return `@${data.nam}${data.val === '' ? '' : options.indent || ' '}${data.val}${options.indent}{${options.newLine}` + (children === '' ? '' : indentSub + children + options.newLine) + indent + `}`;
                }
                return data.sel + `${options.indent}{${options.newLine}` + (children === '' ? '' : indentSub + children + options.newLine) + indent + `}`;
            case exports.EnumToken.InvalidRuleTokenType:
                return '';
            default:
                throw new Error(`render: unexpected token ${JSON.stringify(data, null, 1)}`);
        }
        return '';
    }
    function renderToken(token, options = {}, cache = Object.create(null), reducer, errors) {
        if (reducer == null) {
            reducer = function (acc, curr) {
                if (curr.typ == exports.EnumToken.CommentTokenType && options.removeComments) {
                    if (!options.preserveLicense || !curr.val.startsWith('/*!')) {
                        return acc;
                    }
                    return acc + curr.val;
                }
                return acc + renderToken(curr, options, cache, reducer, errors);
            };
        }
        if (token.typ == exports.EnumToken.FunctionTokenType && colorsFunc.includes(token.val)) {
            if (isColor(token)) {
                // @ts-ignore
                token.typ = exports.EnumToken.ColorTokenType;
                if (token.chi[0].typ == exports.EnumToken.IdenTokenType && token.chi[0].val == 'from') {
                    // @ts-ignore
                    token.cal = 'rel';
                }
                else if (token.val == 'color-mix' && token.chi[0].typ == exports.EnumToken.IdenTokenType && token.chi[0].val == 'in') {
                    // @ts-ignore
                    token.cal = 'mix';
                }
                else {
                    if (token.val == 'color') {
                        // @ts-ignore
                        token.cal = 'col';
                    }
                    token.chi = token.chi.filter((t) => ![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommaTokenType, exports.EnumToken.CommentTokenType].includes(t.typ));
                }
            }
        }
        switch (token.typ) {
            case exports.EnumToken.ListToken:
                return token.chi.reduce((acc, curr) => acc + renderToken(curr, options, cache), '');
            case exports.EnumToken.BinaryExpressionTokenType:
                if ([exports.EnumToken.Mul, exports.EnumToken.Div].includes(token.op)) {
                    let result = '';
                    if (token.l.typ == exports.EnumToken.BinaryExpressionTokenType &&
                        [exports.EnumToken.Add, exports.EnumToken.Sub].includes(token.l.op)) {
                        result = '(' + renderToken(token.l, options, cache) + ')';
                    }
                    else {
                        result = renderToken(token.l, options, cache);
                    }
                    result += token.op == exports.EnumToken.Mul ? '*' : '/';
                    if (token.r.typ == exports.EnumToken.BinaryExpressionTokenType &&
                        [exports.EnumToken.Add, exports.EnumToken.Sub].includes(token.r.op)) {
                        result += '(' + renderToken(token.r, options, cache) + ')';
                    }
                    else {
                        result += renderToken(token.r, options, cache);
                    }
                    return result;
                }
                return renderToken(token.l, options, cache) + (token.op == exports.EnumToken.Add ? ' + ' : (token.op == exports.EnumToken.Sub ? ' - ' : (token.op == exports.EnumToken.Mul ? '*' : '/'))) + renderToken(token.r, options, cache);
            case exports.EnumToken.FractionTokenType:
                const fraction = renderToken(token.l) + '/' + renderToken(token.r);
                if (+token.r.val != 0) {
                    const value = reduceNumber(+token.l.val / +token.r.val);
                    if (value.length <= fraction.length) {
                        return value;
                    }
                }
                return fraction;
            case exports.EnumToken.Add:
                return ' + ';
            case exports.EnumToken.Sub:
                return ' - ';
            case exports.EnumToken.UniversalSelectorTokenType:
            case exports.EnumToken.Mul:
                return '*';
            case exports.EnumToken.Div:
                return '/';
            case exports.EnumToken.ColorTokenType:
                if (token.kin == 'light-dark') {
                    return token.val + '(' + token.chi.reduce((acc, curr) => acc + renderToken(curr, options, cache), '') + ')';
                }
                if (options.convertColor) {
                    if (token.cal == 'mix' && token.val == 'color-mix') {
                        const children = token.chi.reduce((acc, t) => {
                            if (t.typ == exports.EnumToken.ColorTokenType) {
                                acc.push([t]);
                            }
                            else {
                                if (![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(t.typ)) {
                                    acc[acc.length - 1].push(t);
                                }
                            }
                            return acc;
                        }, [[]]);
                        const value = colorMix(children[0][1], children[0][2], children[1][0], children[1][1], children[2][0], children[2][1]);
                        if (value != null) {
                            token = value;
                        }
                    }
                    if (token.cal == 'rel' && ['rgb', 'hsl', 'hwb', 'lab', 'lch', 'oklab', 'oklch', 'color'].includes(token.val)) {
                        const chi = getComponents(token);
                        const offset = token.val == 'color' ? 2 : 1;
                        // @ts-ignore
                        const color = chi[1];
                        const components = parseRelativeColor(token.val == 'color' ? chi[offset].val : token.val, color, chi[offset + 1], chi[offset + 2], chi[offset + 3], chi[offset + 4]);
                        if (components != null) {
                            token.chi = [...(token.val == 'color' ? [chi[offset]] : []), ...Object.values(components)];
                            delete token.cal;
                        }
                    }
                    if (token.val == 'color') {
                        if (token.chi[0].typ == exports.EnumToken.IdenTokenType && colorFuncColorSpace.includes(token.chi[0].val.toLowerCase())) {
                            // @ts-ignore
                            return reduceHexValue(srgb2hexvalues(...color2srgbvalues(token)));
                        }
                    }
                    if (token.cal != null) {
                        let slice = false;
                        if (token.cal == 'rel') {
                            const last = token.chi.at(-1);
                            if ((last.typ == exports.EnumToken.NumberTokenType && last.val == '1') || (last.typ == exports.EnumToken.IdenTokenType && last.val == 'none')) {
                                const prev = token.chi.at(-2);
                                if (prev.typ == exports.EnumToken.LiteralTokenType && prev.val == '/') {
                                    slice = true;
                                }
                            }
                        }
                        return clamp(token).val + '(' + (slice ? token.chi.slice(0, -2) : token.chi).reduce((acc, curr) => {
                            const val = renderToken(curr, options, cache);
                            if ([exports.EnumToken.LiteralTokenType, exports.EnumToken.CommaTokenType].includes(curr.typ)) {
                                return acc + val;
                            }
                            if (acc.length > 0) {
                                return acc + (['/', ','].includes(acc.at(-1)) ? '' : ' ') + val;
                            }
                            return val;
                        }, '') + ')';
                    }
                    if (token.kin == 'lit' && token.val.localeCompare('currentcolor', undefined, { sensitivity: 'base' }) == 0) {
                        return 'currentcolor';
                    }
                    clamp(token);
                    if (Array.isArray(token.chi) && token.chi.some((t) => t.typ == exports.EnumToken.FunctionTokenType || (t.typ == exports.EnumToken.ColorTokenType && Array.isArray(t.chi)))) {
                        return (token.val.endsWith('a') ? token.val.slice(0, -1) : token.val) + '(' + token.chi.reduce((acc, curr) => acc + (acc.length > 0 && !(acc.endsWith('/') || curr.typ == exports.EnumToken.LiteralTokenType) ? ' ' : '') + renderToken(curr, options, cache), '') + ')';
                    }
                    let value = token.kin == 'hex' ? token.val.toLowerCase() : (token.kin == 'lit' ? COLORS_NAMES[token.val.toLowerCase()] : '');
                    if (token.val == 'rgb' || token.val == 'rgba') {
                        value = rgb2hex(token);
                    }
                    else if (token.val == 'hsl' || token.val == 'hsla') {
                        value = hsl2hex(token);
                    }
                    else if (token.val == 'hwb') {
                        value = hwb2hex(token);
                    }
                    else if (token.val == 'device-cmyk') {
                        value = cmyk2hex(token);
                    }
                    else if (token.val == 'oklab') {
                        value = oklab2hex(token);
                    }
                    else if (token.val == 'oklch') {
                        value = oklch2hex(token);
                    }
                    else if (token.val == 'lab') {
                        value = lab2hex(token);
                    }
                    else if (token.val == 'lch') {
                        value = lch2hex(token);
                    }
                    if (value !== '') {
                        return reduceHexValue(value);
                    }
                }
                if (['hex', 'lit', 'sys', 'dpsys'].includes(token.kin)) {
                    return token.val;
                }
                if (Array.isArray(token.chi)) {
                    return (token.val.endsWith('a') ? token.val.slice(0, -1) : token.val) + '(' + token.chi.reduce((acc, curr) => acc + (acc.length > 0 && !(acc.endsWith('/') || curr.typ == exports.EnumToken.LiteralTokenType) ? ' ' : '') + renderToken(curr, options, cache), '') + ')';
                }
            case exports.EnumToken.ParensTokenType:
            case exports.EnumToken.FunctionTokenType:
            case exports.EnumToken.UrlFunctionTokenType:
            case exports.EnumToken.ImageFunctionTokenType:
            case exports.EnumToken.TimingFunctionTokenType:
            case exports.EnumToken.PseudoClassFuncTokenType:
            case exports.EnumToken.TimelineFunctionTokenType:
            case exports.EnumToken.GridTemplateFuncTokenType:
                if (token.typ == exports.EnumToken.FunctionTokenType &&
                    token.val == 'calc' &&
                    token.chi.length == 1 &&
                    token.chi[0].typ != exports.EnumToken.BinaryExpressionTokenType &&
                    token.chi[0].typ != exports.EnumToken.FractionTokenType &&
                    token.chi[0].val?.typ != exports.EnumToken.FractionTokenType) {
                    // calc(200px) => 200px
                    return token.chi.reduce((acc, curr) => acc + renderToken(curr, options, cache, reducer), '');
                }
                // @ts-ignore
                return ( /* options.minify && 'Pseudo-class-func' == token.typ && token.val.slice(0, 2) == '::' ? token.val.slice(1) :*/token.val ?? '') + '(' + token.chi.reduce(reducer, '') + ')';
            case exports.EnumToken.MatchExpressionTokenType:
                return renderToken(token.l, options, cache, reducer, errors) +
                    renderToken({ typ: token.op }, options, cache, reducer, errors) +
                    renderToken(token.r, options, cache, reducer, errors) +
                    (token.attr ? ' ' + token.attr : '');
            case exports.EnumToken.NameSpaceAttributeTokenType:
                return (token.l == null ? '' : renderToken(token.l, options, cache, reducer, errors)) + '|' +
                    renderToken(token.r, options, cache, reducer, errors);
            case exports.EnumToken.BlockStartTokenType:
                return '{';
            case exports.EnumToken.BlockEndTokenType:
                return '}';
            case exports.EnumToken.StartParensTokenType:
                return '(';
            case exports.EnumToken.DelimTokenType:
                return '=';
            case exports.EnumToken.IncludeMatchTokenType:
                return '~=';
            case exports.EnumToken.DashMatchTokenType:
                return '|=';
            case exports.EnumToken.StartMatchTokenType:
                return '^=';
            case exports.EnumToken.EndMatchTokenType:
                return '$=';
            case exports.EnumToken.ContainMatchTokenType:
                return '*=';
            case exports.EnumToken.LtTokenType:
                return '<';
            case exports.EnumToken.LteTokenType:
                return '<=';
            case exports.EnumToken.SubsequentSiblingCombinatorTokenType:
                return '~';
            case exports.EnumToken.NextSiblingCombinatorTokenType:
                return '+';
            case exports.EnumToken.GtTokenType:
            case exports.EnumToken.ChildCombinatorTokenType:
                return '>';
            case exports.EnumToken.GteTokenType:
                return '>=';
            case exports.EnumToken.ColumnCombinatorTokenType:
                return '||';
            case exports.EnumToken.EndParensTokenType:
                return ')';
            case exports.EnumToken.AttrStartTokenType:
                return '[';
            case exports.EnumToken.AttrEndTokenType:
                return ']';
            case exports.EnumToken.DescendantCombinatorTokenType:
            case exports.EnumToken.WhitespaceTokenType:
                return ' ';
            case exports.EnumToken.ColonTokenType:
                return ':';
            case exports.EnumToken.SemiColonTokenType:
                return ';';
            case exports.EnumToken.CommaTokenType:
                return ',';
            case exports.EnumToken.ImportantTokenType:
                return '!important';
            case exports.EnumToken.AttrTokenType:
            case exports.EnumToken.IdenListTokenType:
                return '[' + token.chi.reduce(reducer, '') + ']';
            case exports.EnumToken.TimeTokenType:
            case exports.EnumToken.AngleTokenType:
            case exports.EnumToken.LengthTokenType:
            case exports.EnumToken.DimensionTokenType:
            case exports.EnumToken.FrequencyTokenType:
            case exports.EnumToken.ResolutionTokenType:
                let val = token.val.typ == exports.EnumToken.FractionTokenType ? renderToken(token.val, options, cache) : reduceNumber(token.val);
                let unit = token.unit;
                if (token.typ == exports.EnumToken.AngleTokenType && !val.includes('/')) {
                    const angle = getAngle(token);
                    let v;
                    let value = val + unit;
                    for (const u of ['turn', 'deg', 'rad', 'grad']) {
                        if (token.unit == u) {
                            continue;
                        }
                        switch (u) {
                            case 'turn':
                                v = reduceNumber(angle);
                                if (v.length + 4 < value.length) {
                                    val = v;
                                    unit = u;
                                    value = v + u;
                                }
                                break;
                            case 'deg':
                                v = reduceNumber(angle * 360);
                                if (v.length + 3 < value.length) {
                                    val = v;
                                    unit = u;
                                    value = v + u;
                                }
                                break;
                            case 'rad':
                                v = reduceNumber(angle * (2 * Math.PI));
                                if (v.length + 3 < value.length) {
                                    val = v;
                                    unit = u;
                                    value = v + u;
                                }
                                break;
                            case 'grad':
                                v = reduceNumber(angle * 400);
                                if (v.length + 4 < value.length) {
                                    val = v;
                                    unit = u;
                                    value = v + u;
                                }
                                break;
                        }
                    }
                }
                if (val === '0') {
                    if (token.typ == exports.EnumToken.TimeTokenType) {
                        return '0s';
                    }
                    if (token.typ == exports.EnumToken.FrequencyTokenType) {
                        return '0Hz';
                    }
                    // @ts-ignore
                    if (token.typ == exports.EnumToken.ResolutionTokenType) {
                        return '0x';
                    }
                    return '0';
                }
                if (token.typ == exports.EnumToken.TimeTokenType) {
                    if (unit == 'ms') {
                        // @ts-ignore
                        const v = reduceNumber(val / 1000);
                        if (v.length + 1 <= val.length) {
                            return v + 's';
                        }
                        return val + 'ms';
                    }
                    return val + 's';
                }
                return val.includes('/') ? val.replace('/', unit + '/') : val + unit;
            case exports.EnumToken.FlexTokenType:
            case exports.EnumToken.PercentageTokenType:
                const uni = token.typ == exports.EnumToken.PercentageTokenType ? '%' : 'fr';
                const perc = token.val.typ == exports.EnumToken.FractionTokenType ? renderToken(token.val, options, cache) : reduceNumber(token.val);
                return options.minify && perc == '0' ? '0' : (perc.includes('/') ? perc.replace('/', uni + '/') : perc + uni);
            case exports.EnumToken.NumberTokenType:
                return token.val.typ == exports.EnumToken.FractionTokenType ? renderToken(token.val, options, cache) : reduceNumber(token.val);
            case exports.EnumToken.CommentTokenType:
                if (options.removeComments && (!options.preserveLicense || !token.val.startsWith('/*!'))) {
                    return '';
                }
            case exports.EnumToken.PseudoClassTokenType:
                // https://www.w3.org/TR/selectors-4/#single-colon-pseudos
                if (token.typ == exports.EnumToken.PseudoClassTokenType && ['::before', '::after', '::first-line', '::first-letter'].includes(token.val)) {
                    return token.val.slice(1);
                }
            case exports.EnumToken.UrlTokenTokenType:
                if (token.typ == exports.EnumToken.UrlTokenTokenType) {
                    if (options.output != null) {
                        if (!('original' in token)) {
                            // do not modify original token
                            token = { ...token };
                            Object.defineProperty(token, 'original', { enumerable: false, writable: false, value: token.val });
                        }
                        // @ts-ignore
                        if (!(token.original in cache)) {
                            let output = options.output ?? '';
                            const key = output + 'abs';
                            if (!(key in cache)) {
                                // @ts-ignore
                                cache[key] = options.dirname(options.resolve(output, options.cwd).absolute);
                            }
                            // @ts-ignore
                            cache[token.original] = options.resolve(token.original, cache[key]).relative;
                        }
                        // @ts-ignore
                        token.val = cache[token.original];
                    }
                }
            case exports.EnumToken.HashTokenType:
            case exports.EnumToken.IdenTokenType:
            case exports.EnumToken.AtRuleTokenType:
            case exports.EnumToken.StringTokenType:
            case exports.EnumToken.LiteralTokenType:
            case exports.EnumToken.DashedIdenTokenType:
            case exports.EnumToken.ClassSelectorTokenType:
                return /* options.minify && 'Pseudo-class' == token.typ && '::' == token.val.slice(0, 2) ? token.val.slice(1) :  */ token.val;
            case exports.EnumToken.NestingSelectorTokenType:
                return '&';
            case exports.EnumToken.InvalidAttrTokenType:
                return '[' + token.chi.reduce((acc, curr) => acc + renderToken(curr, options, cache), '');
            case exports.EnumToken.InvalidClassSelectorTokenType:
                return token.val;
            default:
                throw new Error(`render: unexpected token ${JSON.stringify(token, null, 1)}`);
        }
        errors?.push({ action: 'ignore', message: `render: unexpected token ${JSON.stringify(token, null, 1)}` });
        return '';
    }

    // https://www.w3.org/TR/CSS21/syndata.html#syntax
    // https://www.w3.org/TR/2021/CRD-css-syntax-3-20211224/#typedef-ident-token
    // '\\'
    const REVERSE_SOLIDUS = 0x5c;
    const dimensionUnits = new Set([
        'q', 'cap', 'ch', 'cm', 'cqb', 'cqh', 'cqi', 'cqmax', 'cqmin', 'cqw', 'dvb',
        'dvh', 'dvi', 'dvmax', 'dvmin', 'dvw', 'em', 'ex', 'ic', 'in', 'lh', 'lvb',
        'lvh', 'lvi', 'lvmax', 'lvw', 'mm', 'pc', 'pt', 'px', 'rem', 'rlh', 'svb',
        'svh', 'svi', 'svmin', 'svw', 'vb', 'vh', 'vi', 'vmax', 'vmin', 'vw'
    ]);
    function isLength(dimension) {
        return 'unit' in dimension && dimensionUnits.has(dimension.unit.toLowerCase());
    }
    function isResolution(dimension) {
        return 'unit' in dimension && ['dpi', 'dpcm', 'dppx', 'x'].includes(dimension.unit.toLowerCase());
    }
    function isAngle(dimension) {
        return 'unit' in dimension && ['rad', 'turn', 'deg', 'grad'].includes(dimension.unit.toLowerCase());
    }
    function isTime(dimension) {
        return 'unit' in dimension && ['ms', 's'].includes(dimension.unit.toLowerCase());
    }
    function isFrequency(dimension) {
        return 'unit' in dimension && ['hz', 'khz'].includes(dimension.unit.toLowerCase());
    }
    function isColorspace(token) {
        if (token.typ != exports.EnumToken.IdenTokenType) {
            return false;
        }
        return ['srgb', 'srgb-linear', 'lab', 'oklab', 'lch', 'oklch', 'xyz', 'xyz-d50', 'xyz-d65', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec2020', 'rgb', 'hsl', 'hwb'].includes(token.val.toLowerCase());
    }
    function isRectangularOrthogonalColorspace(token) {
        if (token.typ != exports.EnumToken.IdenTokenType) {
            return false;
        }
        return ['srgb', 'srgb-linear', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec2020', 'lab', 'oklab', 'xyz', 'xyz-d50', 'xyz-d65'].includes(token.val.toLowerCase());
    }
    function isPolarColorspace(token) {
        if (token.typ != exports.EnumToken.IdenTokenType) {
            return false;
        }
        return ['hsl', 'hwb', 'lch', 'oklch'].includes(token.val);
    }
    function isHueInterpolationMethod(token) {
        if (token.typ != exports.EnumToken.IdenTokenType) {
            return false;
        }
        return ['shorter', 'longer', 'increasing', 'decreasing'].includes(token.val);
    }
    function isColor(token) {
        if (token.typ == exports.EnumToken.ColorTokenType) {
            return true;
        }
        if (token.typ == exports.EnumToken.IdenTokenType) {
            // named color
            return token.val.toLowerCase() in COLORS_NAMES;
        }
        let isLegacySyntax = false;
        if (token.typ == exports.EnumToken.FunctionTokenType && token.chi.length > 0 && colorsFunc.includes(token.val)) {
            if (token.val == 'light-dark') {
                const children = token.chi.filter((t) => [exports.EnumToken.IdenTokenType, exports.EnumToken.NumberTokenType, exports.EnumToken.LiteralTokenType, exports.EnumToken.ColorTokenType, exports.EnumToken.FunctionTokenType, exports.EnumToken.PercentageTokenType].includes(t.typ));
                if (children.length != 2) {
                    return false;
                }
                if (isColor(children[0]) && isColor(children[1])) {
                    return true;
                }
            }
            if (token.val == 'color') {
                const children = token.chi.filter((t) => [exports.EnumToken.IdenTokenType, exports.EnumToken.NumberTokenType, exports.EnumToken.LiteralTokenType, exports.EnumToken.ColorTokenType, exports.EnumToken.FunctionTokenType, exports.EnumToken.PercentageTokenType].includes(t.typ));
                const isRelative = children[0].typ == exports.EnumToken.IdenTokenType && children[0].val == 'from';
                if (children.length < 4 || children.length > 8) {
                    return false;
                }
                if (!isRelative && !isColorspace(children[0])) {
                    return false;
                }
                for (let i = 1; i < children.length - 2; i++) {
                    if (children[i].typ == exports.EnumToken.IdenTokenType) {
                        if (children[i].val != 'none' &&
                            !(isRelative && ['alpha', 'r', 'g', 'b', 'x', 'y', 'z'].includes(children[i].val) || isColorspace(children[i]))) {
                            return false;
                        }
                    }
                    if (children[i].typ == exports.EnumToken.FunctionTokenType && !['calc'].includes(children[i].val)) {
                        return false;
                    }
                }
                if (children.length == 4 || (isRelative && children.length == 6)) {
                    return true;
                }
                if (children.length == 8 || children.length == 6) {
                    const sep = children.at(-2);
                    const alpha = children.at(-1);
                    // @ts-ignore
                    if ((children.length > 6 || !isRelative) && sep.typ != exports.EnumToken.LiteralTokenType || sep.val != '/') {
                        return false;
                    }
                    if (alpha.typ == exports.EnumToken.IdenTokenType && alpha.val != 'none') {
                        return false;
                    }
                    else {
                        // @ts-ignore
                        if (alpha.typ == exports.EnumToken.PercentageTokenType) {
                            if (+alpha.val < 0 || +alpha.val > 100) {
                                return false;
                            }
                        }
                        else if (alpha.typ == exports.EnumToken.NumberTokenType) {
                            if (+alpha.val < 0 || +alpha.val > 1) {
                                return false;
                            }
                        }
                    }
                }
                return true;
            }
            else if (token.val == 'color-mix') {
                const children = token.chi.reduce((acc, t) => {
                    if (t.typ == exports.EnumToken.CommaTokenType) {
                        acc.push([]);
                    }
                    else {
                        if (![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(t.typ)) {
                            acc[acc.length - 1].push(t);
                        }
                    }
                    return acc;
                }, [[]]);
                if (children.length == 3) {
                    if (children[0].length > 3 ||
                        children[0][0].typ != exports.EnumToken.IdenTokenType ||
                        children[0][0].val != 'in' ||
                        !isColorspace(children[0][1]) ||
                        (children[0].length == 3 && !isHueInterpolationMethod(children[0][2])) ||
                        children[1].length > 2 ||
                        children[1][0].typ != exports.EnumToken.ColorTokenType ||
                        children[2].length > 2 ||
                        children[2][0].typ != exports.EnumToken.ColorTokenType) {
                        return false;
                    }
                    if (children[1].length == 2) {
                        if (!(children[1][1].typ == exports.EnumToken.PercentageTokenType || (children[1][1].typ == exports.EnumToken.NumberTokenType && children[1][1].val == '0'))) {
                            return false;
                        }
                    }
                    if (children[2].length == 2) {
                        if (!(children[2][1].typ == exports.EnumToken.PercentageTokenType || (children[2][1].typ == exports.EnumToken.NumberTokenType && children[2][1].val == '0'))) {
                            return false;
                        }
                    }
                    return true;
                }
                return false;
            }
            else {
                const keywords = ['from', 'none'];
                if (['rgb', 'hsl', 'hwb', 'lab', 'lch', 'oklab', 'oklch'].includes(token.val)) {
                    keywords.push('alpha', ...token.val.slice(-3).split(''));
                }
                // @ts-ignore
                for (const v of token.chi) {
                    if (v.typ == exports.EnumToken.CommaTokenType) {
                        isLegacySyntax = true;
                    }
                    if (v.typ == exports.EnumToken.IdenTokenType) {
                        if (!(keywords.includes(v.val) || v.val.toLowerCase() in COLORS_NAMES)) {
                            return false;
                        }
                        if (keywords.includes(v.val)) {
                            if (isLegacySyntax) {
                                return false;
                            }
                            if (v.val == 'from' && ['rgba', 'hsla'].includes(token.val)) {
                                return false;
                            }
                        }
                        continue;
                    }
                    if (v.typ == exports.EnumToken.FunctionTokenType && (v.val == 'calc' || v.val == 'var' || colorsFunc.includes(v.val))) {
                        continue;
                    }
                    if (![exports.EnumToken.ColorTokenType, exports.EnumToken.IdenTokenType, exports.EnumToken.NumberTokenType, exports.EnumToken.AngleTokenType, exports.EnumToken.PercentageTokenType, exports.EnumToken.CommaTokenType, exports.EnumToken.WhitespaceTokenType, exports.EnumToken.LiteralTokenType].includes(v.typ)) {
                        return false;
                    }
                }
            }
            return true;
        }
        return false;
    }
    function isLetter(codepoint) {
        // lowercase
        return (codepoint >= 0x61 && codepoint <= 0x7a) ||
            // uppercase
            (codepoint >= 0x41 && codepoint <= 0x5a);
    }
    function isNonAscii(codepoint) {
        return codepoint >= 0x80;
    }
    function isIdentStart(codepoint) {
        // _
        return codepoint == 0x5f || isLetter(codepoint) || isNonAscii(codepoint);
    }
    function isDigit(codepoint) {
        return codepoint >= 0x30 && codepoint <= 0x39;
    }
    function isIdentCodepoint(codepoint) {
        // -
        return codepoint == 0x2d || isDigit(codepoint) || isIdentStart(codepoint);
    }
    function isIdent(name) {
        const j = name.length - 1;
        let i = 0;
        let codepoint = name.charCodeAt(0);
        // -
        if (codepoint == 0x2d) {
            const nextCodepoint = name.charCodeAt(1);
            if (Number.isNaN(nextCodepoint)) {
                return false;
            }
            // -
            if (nextCodepoint == 0x2d) {
                return true;
            }
            if (nextCodepoint == REVERSE_SOLIDUS) {
                return name.length > 2 && !isNewLine(name.charCodeAt(2));
            }
            return true;
        }
        if (!isIdentStart(codepoint)) {
            return false;
        }
        while (i < j) {
            i += codepoint < 0x80 ? 1 : String.fromCodePoint(codepoint).length;
            codepoint = name.charCodeAt(i);
            if (codepoint == REVERSE_SOLIDUS) {
                i += codepoint < 0x80 ? 1 : String.fromCodePoint(codepoint).length;
                codepoint = name.charCodeAt(i);
                i += codepoint < 0x80 ? 1 : String.fromCodePoint(codepoint).length;
                continue;
            }
            if (!isIdentCodepoint(codepoint)) {
                return false;
            }
        }
        return true;
    }
    function isNonPrintable(codepoint) {
        // null -> backspace
        return (codepoint >= 0 && codepoint <= 0x8) ||
            // tab
            codepoint == 0xb ||
            // delete
            codepoint == 0x7f ||
            (codepoint >= 0xe && codepoint <= 0x1f);
    }
    function isPseudo(name) {
        return name.charAt(0) == ':' &&
            ((name.endsWith('(') && isIdent(name.charAt(1) == ':' ? name.slice(2, -1) : name.slice(1, -1))) ||
                isIdent(name.charAt(1) == ':' ? name.slice(2) : name.slice(1)));
    }
    function isHash(name) {
        return name.charAt(0) == '#' && isIdent(name.charAt(1));
    }
    function isNumber(name) {
        if (name.length == 0) {
            return false;
        }
        let codepoint = name.charCodeAt(0);
        let i = 0;
        const j = name.length;
        if (j == 1 && !isDigit(codepoint)) {
            return false;
        }
        // '+' '-'
        if ([0x2b, 0x2d].includes(codepoint)) {
            i++;
        }
        // consume digits
        while (i < j) {
            codepoint = name.charCodeAt(i);
            if (isDigit(codepoint)) {
                i++;
                continue;
            }
            // '.' 'E' 'e'
            if (codepoint == 0x2e || codepoint == 0x45 || codepoint == 0x65) {
                break;
            }
            return false;
        }
        // '.'
        if (codepoint == 0x2e) {
            if (!isDigit(name.charCodeAt(++i))) {
                return false;
            }
        }
        while (i < j) {
            codepoint = name.charCodeAt(i);
            if (isDigit(codepoint)) {
                i++;
                continue;
            }
            // 'E' 'e'
            if (codepoint == 0x45 || codepoint == 0x65) {
                i++;
                break;
            }
            return false;
        }
        // 'E' 'e'
        if (codepoint == 0x45 || codepoint == 0x65) {
            if (i == j) {
                return false;
            }
            codepoint = name.charCodeAt(i + 1);
            // '+' '-'
            if ([0x2b, 0x2d].includes(codepoint)) {
                i++;
            }
            codepoint = name.charCodeAt(i + 1);
            if (!isDigit(codepoint)) {
                return false;
            }
        }
        while (++i < j) {
            codepoint = name.charCodeAt(i);
            if (!isDigit(codepoint)) {
                return false;
            }
        }
        return true;
    }
    function isDimension(name) {
        let index = name.length;
        while (index--) {
            if (isLetter(name.charCodeAt(index))) {
                continue;
            }
            index++;
            break;
        }
        const number = name.slice(0, index);
        return number.length > 0 && isIdentStart(name.charCodeAt(index)) && isNumber(number);
    }
    function isPercentage(name) {
        return name.endsWith('%') && isNumber(name.slice(0, -1));
    }
    function isFlex(name) {
        return name.endsWith('fr') && isNumber(name.slice(0, -2));
    }
    function parseDimension(name) {
        let index = name.length;
        while (index--) {
            if (isLetter(name.charCodeAt(index))) {
                continue;
            }
            index++;
            break;
        }
        const dimension = {
            typ: exports.EnumToken.DimensionTokenType,
            val: name.slice(0, index),
            unit: name.slice(index)
        };
        if (isAngle(dimension)) {
            // @ts-ignore
            dimension.typ = exports.EnumToken.AngleTokenType;
        }
        else if (isLength(dimension)) {
            // @ts-ignore
            dimension.typ = exports.EnumToken.LengthTokenType;
        }
        else if (isTime(dimension)) {
            // @ts-ignore
            dimension.typ = exports.EnumToken.TimeTokenType;
        }
        else if (isResolution(dimension)) {
            // @ts-ignore
            dimension.typ = exports.EnumToken.ResolutionTokenType;
            if (dimension.unit == 'dppx') {
                dimension.unit = 'x';
            }
        }
        else if (isFrequency(dimension)) {
            // @ts-ignore
            dimension.typ = exports.EnumToken.FrequencyTokenType;
        }
        return dimension;
    }
    function isHexColor(name) {
        if (name.charAt(0) != '#' || ![4, 5, 7, 9].includes(name.length)) {
            return false;
        }
        for (let chr of name.slice(1)) {
            let codepoint = chr.charCodeAt(0);
            if (!isDigit(codepoint) &&
                // A-F
                !(codepoint >= 0x41 && codepoint <= 0x46) &&
                // a-f
                !(codepoint >= 0x61 && codepoint <= 0x66)) {
                return false;
            }
        }
        return true;
    }
    /*
    export function isHexDigit(name: string): boolean {

        if (name.length || name.length > 6) {

            return false;
        }

        for (let chr of name) {

            let codepoint = <number>chr.charCodeAt(0);

            if (!isDigit(codepoint) &&
                // A F
                !(codepoint >= 0x41 && codepoint <= 0x46) &&
                // a f
                !(codepoint >= 0x61 && codepoint <= 0x66)) {

                return false;
            }
        }

        return true;
    }
    */
    function isFunction(name) {
        return name.endsWith('(') && isIdent(name.slice(0, -1));
    }
    function isAtKeyword(name) {
        return name.charCodeAt(0) == 0x40 && isIdent(name.slice(1));
    }
    function isNewLine(codepoint) {
        // \n \r \f
        return codepoint == 0xa || codepoint == 0xc || codepoint == 0xd;
    }
    function isWhiteSpace(codepoint) {
        return codepoint == 0x9 || codepoint == 0x20 ||
            // isNewLine
            codepoint == 0xa || codepoint == 0xc || codepoint == 0xd;
    }

    var properties = {
    	gap: {
    		shorthand: "gap",
    		properties: [
    			"row-gap",
    			"column-gap"
    		],
    		types: [
    			"Length",
    			"Perc"
    		],
    		multiple: false,
    		separator: null,
    		keywords: [
    			"normal"
    		]
    	},
    	"row-gap": {
    		shorthand: "gap"
    	},
    	"column-gap": {
    		shorthand: "gap"
    	},
    	inset: {
    		shorthand: "inset",
    		properties: [
    			"top",
    			"right",
    			"bottom",
    			"left"
    		],
    		types: [
    			"Length",
    			"Perc"
    		],
    		multiple: false,
    		separator: null,
    		keywords: [
    			"auto"
    		]
    	},
    	top: {
    		shorthand: "inset"
    	},
    	right: {
    		shorthand: "inset"
    	},
    	bottom: {
    		shorthand: "inset"
    	},
    	left: {
    		shorthand: "inset"
    	},
    	margin: {
    		shorthand: "margin",
    		properties: [
    			"margin-top",
    			"margin-right",
    			"margin-bottom",
    			"margin-left"
    		],
    		types: [
    			"Length",
    			"Perc"
    		],
    		multiple: false,
    		separator: null,
    		keywords: [
    			"auto"
    		]
    	},
    	"margin-top": {
    		shorthand: "margin"
    	},
    	"margin-right": {
    		shorthand: "margin"
    	},
    	"margin-bottom": {
    		shorthand: "margin"
    	},
    	"margin-left": {
    		shorthand: "margin"
    	},
    	padding: {
    		shorthand: "padding",
    		properties: [
    			"padding-top",
    			"padding-right",
    			"padding-bottom",
    			"padding-left"
    		],
    		types: [
    			"Length",
    			"Perc"
    		],
    		keywords: [
    		]
    	},
    	"padding-top": {
    		shorthand: "padding"
    	},
    	"padding-right": {
    		shorthand: "padding"
    	},
    	"padding-bottom": {
    		shorthand: "padding"
    	},
    	"padding-left": {
    		shorthand: "padding"
    	},
    	"border-radius": {
    		shorthand: "border-radius",
    		properties: [
    			"border-top-left-radius",
    			"border-top-right-radius",
    			"border-bottom-right-radius",
    			"border-bottom-left-radius"
    		],
    		types: [
    			"Length",
    			"Perc"
    		],
    		multiple: true,
    		separator: "/",
    		keywords: [
    		]
    	},
    	"border-top-left-radius": {
    		shorthand: "border-radius"
    	},
    	"border-top-right-radius": {
    		shorthand: "border-radius"
    	},
    	"border-bottom-right-radius": {
    		shorthand: "border-radius"
    	},
    	"border-bottom-left-radius": {
    		shorthand: "border-radius"
    	},
    	"border-width": {
    		shorthand: "border-width",
    		map: "border",
    		properties: [
    			"border-top-width",
    			"border-right-width",
    			"border-bottom-width",
    			"border-left-width"
    		],
    		types: [
    			"Length",
    			"Perc"
    		],
    		"default": [
    			"medium"
    		],
    		keywords: [
    			"thin",
    			"medium",
    			"thick"
    		]
    	},
    	"border-top-width": {
    		map: "border",
    		shorthand: "border-width"
    	},
    	"border-right-width": {
    		map: "border",
    		shorthand: "border-width"
    	},
    	"border-bottom-width": {
    		map: "border",
    		shorthand: "border-width"
    	},
    	"border-left-width": {
    		map: "border",
    		shorthand: "border-width"
    	},
    	"border-style": {
    		shorthand: "border-style",
    		map: "border",
    		properties: [
    			"border-top-style",
    			"border-right-style",
    			"border-bottom-style",
    			"border-left-style"
    		],
    		types: [
    		],
    		"default": [
    			"none"
    		],
    		keywords: [
    			"none",
    			"hidden",
    			"dotted",
    			"dashed",
    			"solid",
    			"double",
    			"groove",
    			"ridge",
    			"inset",
    			"outset"
    		]
    	},
    	"border-top-style": {
    		map: "border",
    		shorthand: "border-style"
    	},
    	"border-right-style": {
    		map: "border",
    		shorthand: "border-style"
    	},
    	"border-bottom-style": {
    		map: "border",
    		shorthand: "border-style"
    	},
    	"border-left-style": {
    		map: "border",
    		shorthand: "border-style"
    	},
    	"border-color": {
    		shorthand: "border-color",
    		map: "border",
    		properties: [
    			"border-top-color",
    			"border-right-color",
    			"border-bottom-color",
    			"border-left-color"
    		],
    		types: [
    			"Color"
    		],
    		"default": [
    			"currentcolor"
    		],
    		keywords: [
    		]
    	},
    	"border-top-color": {
    		map: "border",
    		shorthand: "border-color"
    	},
    	"border-right-color": {
    		map: "border",
    		shorthand: "border-color"
    	},
    	"border-bottom-color": {
    		map: "border",
    		shorthand: "border-color"
    	},
    	"border-left-color": {
    		map: "border",
    		shorthand: "border-color"
    	}
    };
    var map = {
    	"flex-flow": {
    		shorthand: "flex-flow",
    		pattern: "flex-direction flex-wrap",
    		keywords: [
    		],
    		"default": [
    			"row",
    			"nowrap"
    		],
    		properties: {
    			"flex-direction": {
    				keywords: [
    					"row",
    					"row-reverse",
    					"column",
    					"column-reverse"
    				],
    				"default": [
    					"row"
    				],
    				types: [
    				]
    			},
    			"flex-wrap": {
    				keywords: [
    					"wrap",
    					"nowrap",
    					"wrap-reverse"
    				],
    				"default": [
    					"nowrap"
    				],
    				types: [
    				]
    			}
    		}
    	},
    	"flex-direction": {
    		shorthand: "flex-flow"
    	},
    	"flex-wrap": {
    		shorthand: "flex-flow"
    	},
    	container: {
    		shorthand: "container",
    		pattern: "container-name container-type",
    		keywords: [
    		],
    		"default": [
    		],
    		properties: {
    			"container-name": {
    				required: true,
    				multiple: true,
    				keywords: [
    					"none"
    				],
    				"default": [
    					"none"
    				],
    				types: [
    					"Iden",
    					"DashedIden"
    				]
    			},
    			"container-type": {
    				previous: "container-name",
    				prefix: {
    					typ: "Literal",
    					val: "/"
    				},
    				keywords: [
    					"size",
    					"inline-size",
    					"normal"
    				],
    				"default": [
    					"normal"
    				],
    				types: [
    				]
    			}
    		}
    	},
    	"container-name": {
    		shorthand: "container"
    	},
    	"container-type": {
    		shorthand: "container"
    	},
    	flex: {
    		shorthand: "flex",
    		pattern: "flex-grow flex-shrink flex-basis",
    		keywords: [
    			"auto",
    			"none",
    			"initial"
    		],
    		"default": [
    		],
    		mapping: {
    			"0 1 auto": "initial",
    			"0 0 auto": "none",
    			"1 1 auto": "auto"
    		},
    		properties: {
    			"flex-grow": {
    				required: true,
    				keywords: [
    				],
    				"default": [
    				],
    				types: [
    					"Number"
    				]
    			},
    			"flex-shrink": {
    				keywords: [
    				],
    				"default": [
    				],
    				types: [
    					"Number"
    				]
    			},
    			"flex-basis": {
    				keywords: [
    					"max-content",
    					"min-content",
    					"fit-content",
    					"fit-content",
    					"content",
    					"auto"
    				],
    				"default": [
    				],
    				types: [
    					"Length",
    					"Perc"
    				]
    			}
    		}
    	},
    	"flex-grow": {
    		shorthand: "flex"
    	},
    	"flex-shrink": {
    		shorthand: "flex"
    	},
    	"flex-basis": {
    		shorthand: "flex"
    	},
    	columns: {
    		shorthand: "columns",
    		pattern: "column-count column-width",
    		keywords: [
    			"auto"
    		],
    		"default": [
    			"auto",
    			"auto auto"
    		],
    		properties: {
    			"column-count": {
    				keywords: [
    					"auto"
    				],
    				"default": [
    					"auto"
    				],
    				types: [
    					"Number"
    				]
    			},
    			"column-width": {
    				keywords: [
    					"auto"
    				],
    				"default": [
    					"auto"
    				],
    				types: [
    					"Length"
    				]
    			}
    		}
    	},
    	"column-count": {
    		shorthand: "columns"
    	},
    	"column-width": {
    		shorthand: "columns"
    	},
    	transition: {
    		shorthand: "transition",
    		multiple: true,
    		separator: {
    			typ: "Comma"
    		},
    		pattern: "transition-property transition-duration transition-timing-function transition-delay transition-behavior",
    		keywords: [
    			"none",
    			"all"
    		],
    		"default": [
    			"0s",
    			"0ms",
    			"all",
    			"ease",
    			"none",
    			"normal"
    		],
    		mapping: {
    			"cubic-bezier(.25,.1,.25,1)": "ease",
    			"cubic-bezier(0,0,1,1)": "linear",
    			"cubic-bezier(.42,0,1,1)": "ease-in",
    			"cubic-bezier(0,0,.58,1)": "ease-out",
    			"cubic-bezier(.42,0,.58,.42)": "ease-in-out"
    		},
    		properties: {
    			"transition-property": {
    				keywords: [
    					"none",
    					"all"
    				],
    				"default": [
    					"all"
    				],
    				types: [
    					"Iden"
    				]
    			},
    			"transition-duration": {
    				keywords: [
    				],
    				"default": [
    					"0s",
    					"0ms",
    					"normal"
    				],
    				types: [
    					"Time"
    				]
    			},
    			"transition-timing-function": {
    				keywords: [
    					"ease",
    					"ease-in",
    					"ease-out",
    					"ease-in-out",
    					"linear",
    					"step-start",
    					"step-end"
    				],
    				"default": [
    					"ease"
    				],
    				types: [
    					"TimingFunction"
    				],
    				mapping: {
    					"cubic-bezier(.25,.1,.25,1)": "ease",
    					"cubic-bezier(0,0,1,1)": "linear",
    					"cubic-bezier(.42,0,1,1)": "ease-in",
    					"cubic-bezier(0,0,.58,1)": "ease-out",
    					"cubic-bezier(.42,0,.58,.42)": "ease-in-out"
    				}
    			},
    			"transition-delay": {
    				keywords: [
    				],
    				"default": [
    					"0s"
    				],
    				types: [
    					"Time"
    				]
    			},
    			"transition-behavior": {
    				keywords: [
    					"normal",
    					"allow-discrete"
    				],
    				"default": [
    					"normal"
    				],
    				types: [
    				]
    			}
    		}
    	},
    	"transition-property": {
    		shorthand: "transition"
    	},
    	"transition-duration": {
    		shorthand: "transition"
    	},
    	"transition-timing-function": {
    		shorthand: "transition"
    	},
    	"transition-delay": {
    		shorthand: "transition"
    	},
    	"transition-behavior": {
    		shorthand: "transition"
    	},
    	animation: {
    		shorthand: "animation",
    		pattern: "animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction animation-fill-mode animation-play-state animation-timeline",
    		"default": [
    			"1",
    			"0s",
    			"0ms",
    			"none",
    			"ease",
    			"normal",
    			"running",
    			"auto"
    		],
    		properties: {
    			"animation-name": {
    				keywords: [
    					"none"
    				],
    				"default": [
    					"none"
    				],
    				types: [
    					"Iden"
    				]
    			},
    			"animation-duration": {
    				keywords: [
    					"auto"
    				],
    				"default": [
    					"0s",
    					"0ms",
    					"auto"
    				],
    				types: [
    					"Time"
    				],
    				mapping: {
    					auto: "0s"
    				}
    			},
    			"animation-timing-function": {
    				keywords: [
    					"ease",
    					"ease-in",
    					"ease-out",
    					"ease-in-out",
    					"linear",
    					"step-start",
    					"step-end"
    				],
    				"default": [
    					"ease"
    				],
    				types: [
    					"TimingFunction"
    				],
    				mapping: {
    					"cubic-bezier(.25,.1,.25,1)": "ease",
    					"cubic-bezier(0,0,1,1)": "linear",
    					"cubic-bezier(.42,0,1,1)": "ease-in",
    					"cubic-bezier(0,0,.58,1)": "ease-out",
    					"cubic-bezier(.42,0,.58,.42)": "ease-in-out"
    				}
    			},
    			"animation-delay": {
    				keywords: [
    				],
    				"default": [
    					"0s",
    					"0ms"
    				],
    				types: [
    					"Time"
    				]
    			},
    			"animation-iteration-count": {
    				keywords: [
    					"infinite"
    				],
    				"default": [
    					"1"
    				],
    				types: [
    					"Number"
    				]
    			},
    			"animation-direction": {
    				keywords: [
    					"normal",
    					"reverse",
    					"alternate",
    					"alternate-reverse"
    				],
    				"default": [
    					"normal"
    				],
    				types: [
    				]
    			},
    			"animation-fill-mode": {
    				keywords: [
    					"none",
    					"forwards",
    					"backwards",
    					"both"
    				],
    				"default": [
    					"none"
    				],
    				types: [
    				]
    			},
    			"animation-play-state": {
    				keywords: [
    					"running",
    					"paused"
    				],
    				"default": [
    					"running"
    				],
    				types: [
    				]
    			},
    			"animation-timeline": {
    				keywords: [
    					"none",
    					"auto"
    				],
    				"default": [
    					"auto"
    				],
    				types: [
    					"DashedIden",
    					"TimelineFunction"
    				]
    			}
    		}
    	},
    	"animation-name": {
    		shorthand: "animation"
    	},
    	"animation-duration": {
    		shorthand: "animation"
    	},
    	"animation-timing-function": {
    		shorthand: "animation"
    	},
    	"animation-delay": {
    		shorthand: "animation"
    	},
    	"animation-iteration-count": {
    		shorthand: "animation"
    	},
    	"animation-direction": {
    		shorthand: "animation"
    	},
    	"animation-fill-mode": {
    		shorthand: "animation"
    	},
    	"animation-play-state": {
    		shorthand: "animation"
    	},
    	"animation-timeline": {
    		shorthand: "animation"
    	},
    	"text-emphasis": {
    		shorthand: "text-emphasis",
    		pattern: "text-emphasis-color text-emphasis-style",
    		"default": [
    			"none",
    			"currentcolor"
    		],
    		properties: {
    			"text-emphasis-style": {
    				keywords: [
    					"none",
    					"filled",
    					"open",
    					"dot",
    					"circle",
    					"double-circle",
    					"triangle",
    					"sesame"
    				],
    				"default": [
    					"none"
    				],
    				types: [
    					"String"
    				]
    			},
    			"text-emphasis-color": {
    				"default": [
    					"currentcolor"
    				],
    				types: [
    					"Color"
    				]
    			}
    		}
    	},
    	"text-emphasis-style": {
    		shorthand: "text-emphasis"
    	},
    	"text-emphasis-color": {
    		shorthand: "text-emphasis"
    	},
    	border: {
    		shorthand: "border",
    		pattern: "border-color border-style border-width",
    		keywords: [
    			"none"
    		],
    		"default": [
    			"0",
    			"none"
    		],
    		properties: {
    			"border-color": {
    				types: [
    					"Color"
    				],
    				"default": [
    					"currentcolor"
    				],
    				keywords: [
    				]
    			},
    			"border-style": {
    				types: [
    				],
    				"default": [
    					"none"
    				],
    				keywords: [
    					"none",
    					"hidden",
    					"dotted",
    					"dashed",
    					"solid",
    					"double",
    					"groove",
    					"ridge",
    					"inset",
    					"outset"
    				]
    			},
    			"border-width": {
    				types: [
    					"Length",
    					"Perc"
    				],
    				"default": [
    					"medium"
    				],
    				keywords: [
    					"thin",
    					"medium",
    					"thick"
    				]
    			}
    		}
    	},
    	"border-color": {
    		shorthand: "border"
    	},
    	"border-style": {
    		shorthand: "border"
    	},
    	"border-width": {
    		shorthand: "border"
    	},
    	"list-style": {
    		shorthand: "list-style",
    		pattern: "list-style-type list-style-position list-style-image",
    		keywords: [
    			"none",
    			"outside"
    		],
    		"default": [
    			"none",
    			"outside"
    		],
    		properties: {
    			"list-style-position": {
    				types: [
    				],
    				"default": [
    					"outside"
    				],
    				keywords: [
    					"inside",
    					"outside"
    				]
    			},
    			"list-style-image": {
    				"default": [
    					"none"
    				],
    				keywords: [
    					"node"
    				],
    				types: [
    					"UrlFunc",
    					"ImageFunc"
    				]
    			},
    			"list-style-type": {
    				types: [
    					"String",
    					"Iden",
    					"Symbols"
    				],
    				"default": [
    					"disc"
    				],
    				keywords: [
    					"disc",
    					"circle",
    					"square",
    					"decimal",
    					"decimal-leading-zero",
    					"lower-roman",
    					"upper-roman",
    					"lower-greek",
    					"lower-latin",
    					"upper-latin",
    					"none"
    				]
    			}
    		}
    	},
    	"list-style-position": {
    		shorthand: "list-style"
    	},
    	"list-style-image": {
    		shorthand: "list-style"
    	},
    	"list-style-type": {
    		shorthand: "list-style"
    	},
    	overflow: {
    		shorthand: "overflow",
    		pattern: "overflow-x overflow-y",
    		keywords: [
    			"auto",
    			"visible",
    			"hidden",
    			"clip",
    			"scroll"
    		],
    		"default": [
    		],
    		mapping: {
    			"visible visible": "visible",
    			"auto auto": "auto",
    			"hidden hidden": "hidden",
    			"scroll scroll": "scroll"
    		},
    		properties: {
    			"overflow-x": {
    				"default": [
    				],
    				types: [
    				],
    				keywords: [
    					"auto",
    					"visible",
    					"hidden",
    					"clip",
    					"scroll"
    				]
    			},
    			"overflow-y": {
    				"default": [
    				],
    				types: [
    				],
    				keywords: [
    					"auto",
    					"visible",
    					"hidden",
    					"clip",
    					"scroll"
    				]
    			}
    		}
    	},
    	"overflow-x": {
    		shorthand: "overflow"
    	},
    	"overflow-y": {
    		shorthand: "overflow"
    	},
    	outline: {
    		shorthand: "outline",
    		pattern: "outline-color outline-style outline-width",
    		keywords: [
    			"none"
    		],
    		"default": [
    			"0",
    			"none",
    			"currentcolor"
    		],
    		properties: {
    			"outline-color": {
    				types: [
    					"Color"
    				],
    				"default": [
    					"currentcolor"
    				],
    				keywords: [
    					"currentcolor"
    				]
    			},
    			"outline-style": {
    				types: [
    				],
    				"default": [
    					"none"
    				],
    				keywords: [
    					"auto",
    					"none",
    					"dotted",
    					"dashed",
    					"solid",
    					"double",
    					"groove",
    					"ridge",
    					"inset",
    					"outset"
    				]
    			},
    			"outline-width": {
    				types: [
    					"Length",
    					"Perc"
    				],
    				"default": [
    					"medium"
    				],
    				keywords: [
    					"thin",
    					"medium",
    					"thick"
    				]
    			}
    		}
    	},
    	"outline-color": {
    		shorthand: "outline"
    	},
    	"outline-style": {
    		shorthand: "outline"
    	},
    	"outline-width": {
    		shorthand: "outline"
    	},
    	font: {
    		shorthand: "font",
    		pattern: "font-weight font-style font-size line-height font-stretch font-variant font-family",
    		keywords: [
    			"caption",
    			"icon",
    			"menu",
    			"message-box",
    			"small-caption",
    			"status-bar",
    			"-moz-window, ",
    			"-moz-document, ",
    			"-moz-desktop, ",
    			"-moz-info, ",
    			"-moz-dialog",
    			"-moz-button",
    			"-moz-pull-down-menu",
    			"-moz-list",
    			"-moz-field"
    		],
    		"default": [
    		],
    		properties: {
    			"font-weight": {
    				types: [
    					"Number"
    				],
    				"default": [
    					"400",
    					"normal"
    				],
    				keywords: [
    					"normal",
    					"bold",
    					"lighter",
    					"bolder"
    				],
    				constraints: {
    					value: {
    						min: "1",
    						max: "1000"
    					}
    				},
    				mapping: {
    					thin: "100",
    					hairline: "100",
    					"extra light": "200",
    					"ultra light": "200",
    					light: "300",
    					normal: "400",
    					regular: "400",
    					medium: "500",
    					"semi bold": "600",
    					"demi bold": "600",
    					bold: "700",
    					"extra bold": "800",
    					"ultra bold": "800",
    					black: "900",
    					heavy: "900",
    					"extra black": "950",
    					"ultra black": "950"
    				}
    			},
    			"font-style": {
    				types: [
    					"Angle"
    				],
    				"default": [
    					"normal"
    				],
    				keywords: [
    					"normal",
    					"italic",
    					"oblique"
    				]
    			},
    			"font-size": {
    				types: [
    					"Length",
    					"Perc"
    				],
    				"default": [
    				],
    				keywords: [
    					"xx-small",
    					"x-small",
    					"small",
    					"medium",
    					"large",
    					"x-large",
    					"xx-large",
    					"xxx-large",
    					"larger",
    					"smaller"
    				],
    				required: true
    			},
    			"line-height": {
    				types: [
    					"Length",
    					"Perc",
    					"Number"
    				],
    				"default": [
    					"normal"
    				],
    				keywords: [
    					"normal"
    				],
    				previous: "font-size",
    				prefix: {
    					typ: "Literal",
    					val: "/"
    				}
    			},
    			"font-stretch": {
    				types: [
    					"Perc"
    				],
    				"default": [
    					"normal"
    				],
    				keywords: [
    					"ultra-condensed",
    					"extra-condensed",
    					"condensed",
    					"semi-condensed",
    					"normal",
    					"semi-expanded",
    					"expanded",
    					"extra-expanded",
    					"ultra-expanded"
    				],
    				mapping: {
    					"ultra-condensed": "50%",
    					"extra-condensed": "62.5%",
    					condensed: "75%",
    					"semi-condensed": "87.5%",
    					normal: "100%",
    					"semi-expanded": "112.5%",
    					expanded: "125%",
    					"extra-expanded": "150%",
    					"ultra-expanded": "200%"
    				}
    			},
    			"font-variant": {
    				types: [
    				],
    				"default": [
    					"normal"
    				],
    				keywords: [
    					"normal",
    					"none",
    					"common-ligatures",
    					"no-common-ligatures",
    					"discretionary-ligatures",
    					"no-discretionary-ligatures",
    					"historical-ligatures",
    					"no-historical-ligatures",
    					"contextual",
    					"no-contextual",
    					"historical-forms",
    					"small-caps",
    					"all-small-caps",
    					"petite-caps",
    					"all-petite-caps",
    					"unicase",
    					"titling-caps",
    					"ordinal",
    					"slashed-zero",
    					"lining-nums",
    					"oldstyle-nums",
    					"proportional-nums",
    					"tabular-nums",
    					"diagonal-fractions",
    					"stacked-fractions",
    					"ordinal",
    					"slashed-zero",
    					"ruby",
    					"jis78",
    					"jis83",
    					"jis90",
    					"jis04",
    					"simplified",
    					"traditional",
    					"full-width",
    					"proportional-width",
    					"ruby",
    					"sub",
    					"super",
    					"text",
    					"emoji",
    					"unicode"
    				]
    			},
    			"font-family": {
    				types: [
    					"String",
    					"Iden"
    				],
    				"default": [
    				],
    				keywords: [
    					"serif",
    					"sans-serif",
    					"monospace",
    					"cursive",
    					"fantasy",
    					"system-ui",
    					"ui-serif",
    					"ui-sans-serif",
    					"ui-monospace",
    					"ui-rounded",
    					"math",
    					"emoji",
    					"fangsong"
    				],
    				required: true,
    				multiple: true,
    				separator: {
    					typ: "Comma"
    				}
    			}
    		}
    	},
    	"font-weight": {
    		shorthand: "font"
    	},
    	"font-style": {
    		shorthand: "font"
    	},
    	"font-size": {
    		shorthand: "font"
    	},
    	"line-height": {
    		shorthand: "font"
    	},
    	"font-stretch": {
    		shorthand: "font"
    	},
    	"font-variant": {
    		shorthand: "font"
    	},
    	"font-family": {
    		shorthand: "font"
    	},
    	background: {
    		shorthand: "background",
    		pattern: "background-attachment background-origin background-clip background-color background-image background-repeat background-position background-size",
    		keywords: [
    			"none"
    		],
    		"default": [
    			"0 0",
    			"none",
    			"auto",
    			"repeat",
    			"transparent",
    			"#0000",
    			"scroll",
    			"padding-box",
    			"border-box"
    		],
    		multiple: true,
    		set: {
    			"background-origin": [
    				"background-clip"
    			]
    		},
    		separator: {
    			typ: "Comma"
    		},
    		properties: {
    			"background-repeat": {
    				types: [
    				],
    				"default": [
    					"repeat"
    				],
    				multiple: true,
    				keywords: [
    					"repeat-x",
    					"repeat-y",
    					"repeat",
    					"space",
    					"round",
    					"no-repeat"
    				],
    				mapping: {
    					"repeat no-repeat": "repeat-x",
    					"no-repeat repeat": "repeat-y",
    					"repeat repeat": "repeat",
    					"space space": "space",
    					"round round": "round",
    					"no-repeat no-repeat": "no-repeat"
    				}
    			},
    			"background-color": {
    				types: [
    					"Color"
    				],
    				"default": [
    					"#0000",
    					"transparent"
    				],
    				multiple: true,
    				keywords: [
    				]
    			},
    			"background-image": {
    				types: [
    					"UrlFunc",
    					"ImageFunc"
    				],
    				"default": [
    					"none"
    				],
    				keywords: [
    					"none"
    				]
    			},
    			"background-attachment": {
    				types: [
    				],
    				"default": [
    					"scroll"
    				],
    				multiple: true,
    				keywords: [
    					"scroll",
    					"fixed",
    					"local"
    				]
    			},
    			"background-clip": {
    				types: [
    				],
    				"default": [
    					"border-box"
    				],
    				multiple: true,
    				keywords: [
    					"border-box",
    					"padding-box",
    					"content-box",
    					"text"
    				]
    			},
    			"background-origin": {
    				types: [
    				],
    				"default": [
    					"padding-box"
    				],
    				multiple: true,
    				keywords: [
    					"border-box",
    					"padding-box",
    					"content-box"
    				]
    			},
    			"background-position": {
    				multiple: true,
    				types: [
    					"Perc",
    					"Length"
    				],
    				"default": [
    					"0 0",
    					"top left",
    					"left top"
    				],
    				keywords: [
    					"top",
    					"left",
    					"center",
    					"bottom",
    					"right"
    				],
    				mapping: {
    					left: "0",
    					top: "0",
    					center: "50%",
    					"center center": "50%",
    					"50% 50%": "50%",
    					bottom: "100%",
    					right: "100%"
    				},
    				constraints: {
    					mapping: {
    						max: 2
    					}
    				}
    			},
    			"background-size": {
    				multiple: true,
    				previous: "background-position",
    				prefix: {
    					typ: "Literal",
    					val: "/"
    				},
    				types: [
    					"Perc",
    					"Length"
    				],
    				"default": [
    					"auto",
    					"auto auto"
    				],
    				keywords: [
    					"auto",
    					"cover",
    					"contain"
    				],
    				mapping: {
    					"auto auto": "auto"
    				}
    			}
    		}
    	},
    	"background-repeat": {
    		shorthand: "background"
    	},
    	"background-color": {
    		shorthand: "background"
    	},
    	"background-image": {
    		shorthand: "background"
    	},
    	"background-attachment": {
    		shorthand: "background"
    	},
    	"background-clip": {
    		shorthand: "background"
    	},
    	"background-origin": {
    		shorthand: "background"
    	},
    	"background-position": {
    		shorthand: "background"
    	},
    	"background-size": {
    		shorthand: "background"
    	}
    };
    var config$3 = {
    	properties: properties,
    	map: map
    };

    Object.freeze(config$3);
    const getConfig$1 = () => config$3;

    // https://www.w3.org/TR/css-values-4/#math-function
    const funcList = ['clamp', 'calc'];
    function matchType(val, properties) {
        if (val.typ == exports.EnumToken.IdenTokenType && properties.keywords.includes(val.val) ||
            // @ts-ignore
            (properties.types.some((t) => exports.EnumToken[t] == val.typ))) {
            return true;
        }
        if (val.typ == exports.EnumToken.NumberTokenType && val.val == '0') {
            // @ts-ignore
            return properties.types.some((type) => {
                // @ts-ignore
                const typ = exports.EnumToken[type];
                return typ == exports.EnumToken.LengthTokenType || typ == exports.EnumToken.AngleTokenType;
            });
        }
        if (val.typ == exports.EnumToken.FunctionTokenType) {
            if (funcList.includes(val.val)) {
                return val.chi.every(((t) => [exports.EnumToken.LiteralTokenType, exports.EnumToken.CommaTokenType, exports.EnumToken.WhitespaceTokenType, exports.EnumToken.StartParensTokenType, exports.EnumToken.EndParensTokenType].includes(t.typ) || matchType(t, properties)));
            }
            // match type defined like function 'symbols()', 'url()', 'attr()' etc.
            // return properties.types.includes((<FunctionToken>val).val + '()')
        }
        return false;
    }

    function parseDeclaration(node, errors, src, position) {
        while (node.val[0]?.typ == exports.EnumToken.WhitespaceTokenType) {
            node.val.shift();
        }
        if (node.val.filter((t) => ![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(t.typ)).length == 0) {
            errors.push({
                action: 'drop',
                message: 'doParse: invalid declaration',
                location: { src, ...position }
            });
            return null;
        }
        for (const { value: val, parent } of walkValues(node.val, node)) {
            if (val.typ == exports.EnumToken.AttrTokenType && val.chi.every((t) => [exports.EnumToken.IdenTokenType, exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(t.typ))) {
                // @ts-ignore
                val.typ = exports.EnumToken.IdenListTokenType;
            }
            else if (val.typ == exports.EnumToken.StringTokenType && (node.nam == 'grid' || node.nam == 'grid-template-areas' || node.nam == 'grid-template-rows' || node.nam == 'grid-template-columns')) {
                val.val = val.val.at(0) + parseGridTemplate(val.val.slice(1, -1)) + val.val.at(-1);
                // @ts-ignore
                const array = parent?.chi ?? node.val;
                const index = array.indexOf(val);
                if (index > 0 && array[index - 1].typ == exports.EnumToken.WhitespaceTokenType) {
                    array.splice(index - 1, 1);
                }
            }
        }
        return node;
    }
    function parseGridTemplate(template) {
        let result = '';
        let buffer = '';
        for (let i = 0; i < template.length; i++) {
            const char = template[i];
            if (isWhiteSpace(char.codePointAt(0))) {
                while (i + 1 < template.length && isWhiteSpace(template[i + 1].codePointAt(0))) {
                    i++;
                }
                result += buffer + ' ';
                buffer = '';
            }
            else if (char == '.') {
                while (i + 1 < template.length && template[i + 1] == '.') {
                    i++;
                }
                if (isWhiteSpace((result.at(-1)?.codePointAt(0)))) {
                    result = result.slice(0, -1);
                }
                result += buffer + char;
                buffer = '';
            }
            else {
                buffer += char;
            }
        }
        return buffer.length > 0 ? result + buffer : result;
    }

    function consumeWhiteSpace(parseInfo) {
        let count = 0;
        while (isWhiteSpace(parseInfo.stream.charAt(count + parseInfo.currentPosition.ind + 1).charCodeAt(0))) {
            count++;
        }
        next(parseInfo, count);
        return count;
    }
    function pushToken(token, parseInfo, hint) {
        const result = { token, hint, position: { ...parseInfo.position }, bytesIn: parseInfo.currentPosition.ind + 1 };
        parseInfo.position.ind = parseInfo.currentPosition.ind;
        parseInfo.position.lin = parseInfo.currentPosition.lin;
        parseInfo.position.col = Math.max(parseInfo.currentPosition.col, 1);
        return result;
    }
    function* consumeString(quoteStr, buffer, parseInfo) {
        const quote = quoteStr;
        let value;
        let hasNewLine = false;
        if (buffer.length > 0) {
            yield pushToken(buffer, parseInfo);
            buffer = '';
        }
        buffer += quoteStr;
        while (value = peek(parseInfo)) {
            if (value == '\\') {
                const sequence = peek(parseInfo, 6);
                let escapeSequence = '';
                let codepoint;
                let i;
                for (i = 1; i < sequence.length; i++) {
                    codepoint = sequence.charCodeAt(i);
                    if (codepoint == 0x20 ||
                        (codepoint >= 0x61 && codepoint <= 0x66) ||
                        (codepoint >= 0x41 && codepoint <= 0x46) ||
                        (codepoint >= 0x30 && codepoint <= 0x39)) {
                        escapeSequence += sequence[i];
                        if (codepoint == 0x20) {
                            break;
                        }
                        continue;
                    }
                    break;
                }
                if (i == 1) {
                    buffer += value + sequence[i];
                    next(parseInfo, 2);
                    continue;
                }
                if (escapeSequence.trimEnd().length > 0) {
                    const codepoint = parseInt(escapeSequence, 16);
                    if (codepoint == 0 ||
                        // leading surrogate
                        (0xD800 <= codepoint && codepoint <= 0xDBFF) ||
                        // trailing surrogate
                        (0xDC00 <= codepoint && codepoint <= 0xDFFF)) {
                        buffer += String.fromCodePoint(0xFFFD);
                    }
                    else {
                        buffer += String.fromCodePoint(codepoint);
                    }
                    next(parseInfo, escapeSequence.length + 1 + (isWhiteSpace(peek(parseInfo)?.charCodeAt(0)) ? 1 : 0));
                    continue;
                }
                buffer += next(parseInfo, 2);
                continue;
            }
            if (value == quote) {
                buffer += value;
                yield pushToken(buffer, parseInfo, hasNewLine ? exports.EnumToken.BadStringTokenType : exports.EnumToken.StringTokenType);
                next(parseInfo);
                // i += value.length;
                buffer = '';
                return;
            }
            if (isNewLine(value.charCodeAt(0))) {
                hasNewLine = true;
            }
            if (hasNewLine && value == ';') {
                yield pushToken(buffer + value, parseInfo, exports.EnumToken.BadStringTokenType);
                buffer = '';
                next(parseInfo);
                break;
            }
            buffer += value;
            next(parseInfo);
        }
        if (hasNewLine) {
            yield pushToken(buffer, parseInfo, exports.EnumToken.BadStringTokenType);
        }
        else {
            // EOF - 'Unclosed-string' fixed
            yield pushToken(buffer + quote, parseInfo, exports.EnumToken.StringTokenType);
        }
    }
    function peek(parseInfo, count = 1) {
        if (count == 1) {
            return parseInfo.stream.charAt(parseInfo.currentPosition.ind + 1);
        }
        return parseInfo.stream.slice(parseInfo.currentPosition.ind + 1, parseInfo.currentPosition.ind + count + 1);
    }
    function prev(parseInfo, count = 1) {
        if (count == 1) {
            return parseInfo.currentPosition.ind == 0 ? '' : parseInfo.stream.charAt(parseInfo.currentPosition.ind - 1);
        }
        return parseInfo.stream.slice(parseInfo.currentPosition.ind - 1 - count, parseInfo.currentPosition.ind - 1);
    }
    function next(parseInfo, count = 1) {
        let char = '';
        let chr = '';
        if (count < 0) {
            return '';
        }
        while (count-- && (chr = parseInfo.stream.charAt(parseInfo.currentPosition.ind + 1))) {
            char += chr;
            const codepoint = parseInfo.stream.charCodeAt(++parseInfo.currentPosition.ind);
            if (isNaN(codepoint)) {
                return char;
            }
            if (isNewLine(codepoint)) {
                parseInfo.currentPosition.lin++;
                parseInfo.currentPosition.col = 0;
            }
            else {
                parseInfo.currentPosition.col++;
            }
        }
        return char;
    }
    function* tokenize(stream) {
        const parseInfo = {
            stream,
            position: { ind: 0, lin: 1, col: 1 },
            currentPosition: { ind: -1, lin: 1, col: 0 }
        };
        let value;
        let buffer = '';
        while (value = next(parseInfo)) {
            if (isWhiteSpace(value.charCodeAt(0))) {
                if (buffer.length > 0) {
                    yield pushToken(buffer, parseInfo);
                    buffer = '';
                }
                while (value = next(parseInfo)) {
                    if (!isWhiteSpace(value.charCodeAt(0))) {
                        break;
                    }
                }
                yield pushToken('', parseInfo, exports.EnumToken.WhitespaceTokenType);
                buffer = '';
            }
            switch (value) {
                case '/':
                    if (buffer.length > 0) {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                        if (peek(parseInfo) != '*') {
                            yield pushToken(value, parseInfo);
                            break;
                        }
                    }
                    buffer += value;
                    if (peek(parseInfo) == '*') {
                        buffer += next(parseInfo);
                        while (value = next(parseInfo)) {
                            if (value == '*') {
                                buffer += value;
                                if (peek(parseInfo) == '/') {
                                    yield pushToken(buffer + next(parseInfo), parseInfo, exports.EnumToken.CommentTokenType);
                                    buffer = '';
                                    break;
                                }
                            }
                            else {
                                buffer += value;
                            }
                        }
                        yield pushToken(buffer, parseInfo, exports.EnumToken.BadCommentTokenType);
                        buffer = '';
                    }
                    break;
                case '<':
                    if (buffer.length > 0) {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                    }
                    if (peek(parseInfo) == '=') {
                        yield pushToken('', parseInfo, exports.EnumToken.LteTokenType);
                        next(parseInfo);
                        break;
                    }
                    buffer += value;
                    if (peek(parseInfo, 3) == '!--') {
                        buffer += next(parseInfo, 3);
                        while (value = next(parseInfo)) {
                            buffer += value;
                            if (value == '-' && peek(parseInfo, 2) == '->') {
                                break;
                            }
                        }
                        if (value === '') {
                            yield pushToken(buffer, parseInfo, exports.EnumToken.BadCdoTokenType);
                        }
                        else {
                            yield pushToken(buffer + next(parseInfo, 2), parseInfo, exports.EnumToken.CDOCOMMTokenType);
                        }
                        buffer = '';
                    }
                    break;
                case '\\':
                    // EOF
                    if (!(value = next(parseInfo))) {
                        // end of stream ignore \\
                        if (buffer.length > 0) {
                            yield pushToken(buffer, parseInfo);
                            buffer = '';
                        }
                        break;
                    }
                    buffer += prev(parseInfo) + value;
                    break;
                case '"':
                case "'":
                    yield* consumeString(value, buffer, parseInfo);
                    buffer = '';
                    break;
                case '^':
                case '~':
                case '|':
                case '$':
                    if (buffer.length > 0) {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                    }
                    if (value == '|') {
                        if (peek(parseInfo) == '|') {
                            next(parseInfo);
                            yield pushToken('', parseInfo, exports.EnumToken.ColumnCombinatorTokenType);
                        }
                        else if (peek(parseInfo) == '=') {
                            buffer += next(parseInfo);
                            yield pushToken(buffer, parseInfo);
                        }
                        else {
                            yield pushToken('|', parseInfo);
                        }
                        buffer = '';
                        break;
                    }
                    if (buffer.length > 0) {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                    }
                    buffer += value;
                    if (!(value = peek(parseInfo))) {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                        break;
                    }
                    // ~=
                    // ^=
                    // $=
                    // |=
                    if (peek(parseInfo) == '=') {
                        next(parseInfo);
                        switch (buffer.charAt(0)) {
                            case '~':
                                yield pushToken(buffer, parseInfo, exports.EnumToken.IncludeMatchTokenType);
                                break;
                            case '^':
                                yield pushToken(buffer, parseInfo, exports.EnumToken.StartMatchTokenType);
                                break;
                            case '$':
                                yield pushToken(buffer, parseInfo, exports.EnumToken.EndMatchTokenType);
                                break;
                            case '|':
                                yield pushToken(buffer, parseInfo, exports.EnumToken.DashMatchTokenType);
                                break;
                        }
                        buffer = '';
                        break;
                    }
                    yield pushToken(buffer, parseInfo);
                    buffer = '';
                    break;
                case '>':
                    if (buffer !== '') {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                    }
                    if (peek(parseInfo) == '=') {
                        yield pushToken('', parseInfo, exports.EnumToken.GteTokenType);
                        next(parseInfo);
                    }
                    else {
                        yield pushToken('', parseInfo, exports.EnumToken.GtTokenType);
                    }
                    consumeWhiteSpace(parseInfo);
                    break;
                case '.':
                    const codepoint = peek(parseInfo).charCodeAt(0);
                    if (!isDigit(codepoint) && buffer !== '') {
                        yield pushToken(buffer, parseInfo);
                        buffer = value;
                        break;
                    }
                    buffer += value;
                    break;
                case '+':
                case '*':
                case ':':
                case ',':
                case '=':
                    if (buffer.length > 0) {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                    }
                    const val = peek(parseInfo);
                    if (val == '=') {
                        next(parseInfo);
                        yield pushToken(value + val, parseInfo, exports.EnumToken.ContainMatchTokenType);
                        break;
                    }
                    if (value == ':' && ':' == val) {
                        buffer += value + next(parseInfo);
                        break;
                    }
                    yield pushToken(value, parseInfo);
                    buffer = '';
                    if (['+', '*', '/'].includes(value) && isWhiteSpace(peek(parseInfo).charCodeAt(0))) {
                        yield pushToken(next(parseInfo), parseInfo);
                    }
                    while (isWhiteSpace(peek(parseInfo).charCodeAt(0))) {
                        next(parseInfo);
                    }
                    break;
                case ')':
                    if (buffer.length > 0) {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                    }
                    yield pushToken('', parseInfo, exports.EnumToken.EndParensTokenType);
                    break;
                case '(':
                    if (buffer.length == 0) {
                        yield pushToken(value, parseInfo);
                        break;
                    }
                    buffer += value;
                    // @ts-ignore
                    if (buffer == 'url(') {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                        consumeWhiteSpace(parseInfo);
                        value = peek(parseInfo);
                        let cp;
                        let whitespace = '';
                        let hasWhiteSpace = false;
                        let errorState = false;
                        if (value == '"' || value == "'") {
                            const quote = value;
                            let inquote = true;
                            let hasNewLine = false;
                            buffer = next(parseInfo);
                            while (value = next(parseInfo)) {
                                cp = value.charCodeAt(0);
                                // consume an invalid string
                                if (inquote) {
                                    buffer += value;
                                    if (isNewLine(cp)) {
                                        hasNewLine = true;
                                        while (value = next(parseInfo)) {
                                            buffer += value;
                                            if (value == ';') {
                                                inquote = false;
                                                break;
                                            }
                                        }
                                        if (value === '') {
                                            yield pushToken(buffer, parseInfo, exports.EnumToken.BadUrlTokenType);
                                            buffer = '';
                                            break;
                                        }
                                        cp = value.charCodeAt(0);
                                    }
                                    // '\\'
                                    if (cp == 0x5c) {
                                        buffer += next(parseInfo);
                                    }
                                    else if (value == quote) {
                                        inquote = false;
                                    }
                                    continue;
                                }
                                if (!inquote) {
                                    if (isWhiteSpace(cp)) {
                                        whitespace += value;
                                        while (value = peek(parseInfo)) {
                                            hasWhiteSpace = true;
                                            if (isWhiteSpace(value?.charCodeAt(0))) {
                                                whitespace += next(parseInfo);
                                                continue;
                                            }
                                            break;
                                        }
                                        if (!(value = next(parseInfo))) {
                                            yield pushToken(buffer, parseInfo, hasNewLine ? exports.EnumToken.BadUrlTokenType : exports.EnumToken.UrlTokenTokenType);
                                            buffer = '';
                                            break;
                                        }
                                    }
                                    cp = value.charCodeAt(0);
                                    // ')'
                                    if (cp == 0x29) {
                                        yield pushToken(buffer, parseInfo, hasNewLine ? exports.EnumToken.BadStringTokenType : exports.EnumToken.StringTokenType);
                                        yield pushToken('', parseInfo, exports.EnumToken.EndParensTokenType);
                                        buffer = '';
                                        break;
                                    }
                                    while (value = next(parseInfo)) {
                                        cp = value.charCodeAt(0);
                                        if (cp == 0x5c) {
                                            buffer += value + next(parseInfo);
                                            continue;
                                        }
                                        if (cp == 0x29) {
                                            yield pushToken(buffer, parseInfo, exports.EnumToken.BadStringTokenType);
                                            yield pushToken('', parseInfo, exports.EnumToken.EndParensTokenType);
                                            buffer = '';
                                            break;
                                        }
                                        buffer += value;
                                    }
                                    if (hasNewLine) {
                                        yield pushToken(buffer, parseInfo, exports.EnumToken.BadStringTokenType);
                                        buffer = '';
                                    }
                                    break;
                                }
                                buffer += value;
                            }
                            break;
                        }
                        else {
                            buffer = '';
                            while (value = next(parseInfo)) {
                                cp = value.charCodeAt(0);
                                // ')'
                                if (cp == 0x29) {
                                    yield pushToken(buffer, parseInfo, exports.EnumToken.UrlTokenTokenType);
                                    yield pushToken('', parseInfo, exports.EnumToken.EndParensTokenType);
                                    buffer = '';
                                    break;
                                }
                                if (isWhiteSpace(cp)) {
                                    hasWhiteSpace = true;
                                    whitespace = value;
                                    while (isWhiteSpace(peek(parseInfo)?.charCodeAt(0))) {
                                        whitespace += next(parseInfo);
                                    }
                                    continue;
                                }
                                if (isNonPrintable(cp) ||
                                    // '"'
                                    cp == 0x22 ||
                                    // "'"
                                    cp == 0x27 ||
                                    // \('
                                    cp == 0x28 ||
                                    hasWhiteSpace) {
                                    errorState = true;
                                }
                                if (errorState) {
                                    buffer += whitespace + value;
                                    while (value = peek(parseInfo)) {
                                        cp = value.charCodeAt(0);
                                        if (cp == 0x5c) {
                                            buffer += next(parseInfo, 2);
                                            continue;
                                        }
                                        // ')'
                                        if (cp == 0x29) {
                                            break;
                                        }
                                        buffer += next(parseInfo);
                                    }
                                    yield pushToken(buffer, parseInfo, exports.EnumToken.BadUrlTokenType);
                                    buffer = '';
                                    break;
                                }
                                buffer += value;
                            }
                        }
                        if (buffer !== '') {
                            yield pushToken(buffer, parseInfo, exports.EnumToken.UrlTokenTokenType);
                            buffer = '';
                            break;
                        }
                        break;
                    }
                    yield pushToken(buffer, parseInfo);
                    buffer = '';
                    break;
                case '[':
                case ']':
                case '{':
                case '}':
                case ';':
                    if (buffer.length > 0) {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                    }
                    yield pushToken(value, parseInfo);
                    break;
                case '!':
                    if (buffer.length > 0) {
                        yield pushToken(buffer, parseInfo);
                        buffer = '';
                    }
                    if (peek(parseInfo, 9) == 'important') {
                        yield pushToken('', parseInfo, exports.EnumToken.ImportantTokenType);
                        next(parseInfo, 9);
                        buffer = '';
                        break;
                    }
                    buffer = '!';
                    break;
                default:
                    buffer += value;
                    break;
            }
        }
        if (buffer.length > 0) {
            yield pushToken(buffer, parseInfo);
        }
        // yield pushToken('', EnumToken.EOFTokenType);
    }

    var declarations = {
    	"-ms-accelerator": {
    		syntax: "false | true",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "false"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "true"
    					}
    				]
    			}
    		]
    	},
    	"-ms-block-progression": {
    		syntax: "tb | rl | bt | lr",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "tb"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "rl"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "bt"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "lr"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-content-zoom-chaining": {
    		syntax: "none | chained",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "chained"
    					}
    				]
    			}
    		]
    	},
    	"-ms-content-zooming": {
    		syntax: "none | zoom",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "zoom"
    					}
    				]
    			}
    		]
    	},
    	"-ms-content-zoom-limit": {
    		syntax: "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
    		ast: [
    			{
    				typ: 3,
    				val: "-ms-content-zoom-limit-min"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "-ms-content-zoom-limit-max"
    			}
    		]
    	},
    	"-ms-content-zoom-limit-max": {
    		syntax: "<percentage>",
    		ast: [
    			{
    				typ: 2,
    				val: "percentage"
    			}
    		]
    	},
    	"-ms-content-zoom-limit-min": {
    		syntax: "<percentage>",
    		ast: [
    			{
    				typ: 2,
    				val: "percentage"
    			}
    		]
    	},
    	"-ms-content-zoom-snap": {
    		syntax: "<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "-ms-content-zoom-snap-type"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "-ms-content-zoom-snap-points"
    					}
    				]
    			}
    		]
    	},
    	"-ms-content-zoom-snap-points": {
    		syntax: "snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "snapInterval",
    						chi: [
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "snapList",
    						chi: [
    							{
    								typ: 2,
    								val: "percentage",
    								isList: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-content-zoom-snap-type": {
    		syntax: "none | proximity | mandatory",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "proximity"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "mandatory"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-filter": {
    		syntax: "<string>",
    		ast: [
    			{
    				typ: 2,
    				val: "string"
    			}
    		]
    	},
    	"-ms-flow-from": {
    		syntax: "[ none | <custom-ident> ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "custom-ident"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"-ms-flow-into": {
    		syntax: "[ none | <custom-ident> ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "custom-ident"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"-ms-grid-columns": {
    		syntax: "none | <track-list> | <auto-track-list>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "track-list"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "auto-track-list"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-grid-rows": {
    		syntax: "none | <track-list> | <auto-track-list>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "track-list"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "auto-track-list"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-high-contrast-adjust": {
    		syntax: "auto | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-ms-hyphenate-limit-chars": {
    		syntax: "auto | <integer>{1,3}",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "integer",
    						occurence: {
    							min: 1,
    							max: 3
    						}
    					}
    				]
    			}
    		]
    	},
    	"-ms-hyphenate-limit-lines": {
    		syntax: "no-limit | <integer>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "no-limit"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "integer"
    					}
    				]
    			}
    		]
    	},
    	"-ms-hyphenate-limit-zone": {
    		syntax: "<percentage> | <length>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "percentage"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"-ms-ime-align": {
    		syntax: "auto | after",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "after"
    					}
    				]
    			}
    		]
    	},
    	"-ms-overflow-style": {
    		syntax: "auto | none | scrollbar | -ms-autohiding-scrollbar",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "scrollbar"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "-ms-autohiding-scrollbar"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-scrollbar-3dlight-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-ms-scrollbar-arrow-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-ms-scrollbar-base-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-ms-scrollbar-darkshadow-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-ms-scrollbar-face-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-ms-scrollbar-highlight-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-ms-scrollbar-shadow-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-ms-scrollbar-track-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-ms-scroll-chaining": {
    		syntax: "chained | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "chained"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-ms-scroll-limit": {
    		syntax: "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
    		ast: [
    			{
    				typ: 3,
    				val: "-ms-scroll-limit-x-min"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "-ms-scroll-limit-y-min"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "-ms-scroll-limit-x-max"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "-ms-scroll-limit-y-max"
    			}
    		]
    	},
    	"-ms-scroll-limit-x-max": {
    		syntax: "auto | <length>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"-ms-scroll-limit-x-min": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"-ms-scroll-limit-y-max": {
    		syntax: "auto | <length>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"-ms-scroll-limit-y-min": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"-ms-scroll-rails": {
    		syntax: "none | railed",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "railed"
    					}
    				]
    			}
    		]
    	},
    	"-ms-scroll-snap-points-x": {
    		syntax: "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "snapInterval",
    						chi: [
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "snapList",
    						chi: [
    							{
    								typ: 2,
    								val: "length-percentage",
    								isList: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-scroll-snap-points-y": {
    		syntax: "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "snapInterval",
    						chi: [
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "snapList",
    						chi: [
    							{
    								typ: 2,
    								val: "length-percentage",
    								isList: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-scroll-snap-type": {
    		syntax: "none | proximity | mandatory",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "proximity"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "mandatory"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-scroll-snap-x": {
    		syntax: "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
    		ast: [
    			{
    				typ: 3,
    				val: "-ms-scroll-snap-type"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "-ms-scroll-snap-points-x"
    			}
    		]
    	},
    	"-ms-scroll-snap-y": {
    		syntax: "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
    		ast: [
    			{
    				typ: 3,
    				val: "-ms-scroll-snap-type"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "-ms-scroll-snap-points-y"
    			}
    		]
    	},
    	"-ms-scroll-translation": {
    		syntax: "none | vertical-to-horizontal",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "vertical-to-horizontal"
    					}
    				]
    			}
    		]
    	},
    	"-ms-text-autospace": {
    		syntax: "none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "ideograph-alpha"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "ideograph-numeric"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "ideograph-parenthesis"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "ideograph-space"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-touch-select": {
    		syntax: "grippers | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "grippers"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-ms-user-select": {
    		syntax: "none | element | text",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "element"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "text"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-wrap-flow": {
    		syntax: "auto | both | start | end | maximum | clear",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "both"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "start"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "end"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "maximum"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "clear"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-ms-wrap-margin": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"-ms-wrap-through": {
    		syntax: "wrap | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "wrap"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-moz-appearance": {
    		syntax: "none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "button"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "button-arrow-down"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "button-arrow-next"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "button-arrow-previous"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "button-arrow-up"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "button-bevel"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "button-focus"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "caret"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "checkbox"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "checkbox-container"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "checkbox-label"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "checkmenuitem"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 27,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 1,
    																																val: "dualbutton"
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 27,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "groupbox"
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 27,
    																																		l: [
    																																			{
    																																				typ: 20
    																																			},
    																																			{
    																																				typ: 1,
    																																				val: "listbox"
    																																			},
    																																			{
    																																				typ: 20
    																																			}
    																																		],
    																																		r: [
    																																			{
    																																				typ: 27,
    																																				l: [
    																																					{
    																																						typ: 20
    																																					},
    																																					{
    																																						typ: 1,
    																																						val: "listitem"
    																																					},
    																																					{
    																																						typ: 20
    																																					}
    																																				],
    																																				r: [
    																																					{
    																																						typ: 27,
    																																						l: [
    																																							{
    																																								typ: 20
    																																							},
    																																							{
    																																								typ: 1,
    																																								val: "menuarrow"
    																																							},
    																																							{
    																																								typ: 20
    																																							}
    																																						],
    																																						r: [
    																																							{
    																																								typ: 27,
    																																								l: [
    																																									{
    																																										typ: 20
    																																									},
    																																									{
    																																										typ: 1,
    																																										val: "menubar"
    																																									},
    																																									{
    																																										typ: 20
    																																									}
    																																								],
    																																								r: [
    																																									{
    																																										typ: 27,
    																																										l: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 1,
    																																												val: "menucheckbox"
    																																											},
    																																											{
    																																												typ: 20
    																																											}
    																																										],
    																																										r: [
    																																											{
    																																												typ: 27,
    																																												l: [
    																																													{
    																																														typ: 20
    																																													},
    																																													{
    																																														typ: 1,
    																																														val: "menuimage"
    																																													},
    																																													{
    																																														typ: 20
    																																													}
    																																												],
    																																												r: [
    																																													{
    																																														typ: 27,
    																																														l: [
    																																															{
    																																																typ: 20
    																																															},
    																																															{
    																																																typ: 1,
    																																																val: "menuitem"
    																																															},
    																																															{
    																																																typ: 20
    																																															}
    																																														],
    																																														r: [
    																																															{
    																																																typ: 27,
    																																																l: [
    																																																	{
    																																																		typ: 20
    																																																	},
    																																																	{
    																																																		typ: 1,
    																																																		val: "menuitemtext"
    																																																	},
    																																																	{
    																																																		typ: 20
    																																																	}
    																																																],
    																																																r: [
    																																																	{
    																																																		typ: 27,
    																																																		l: [
    																																																			{
    																																																				typ: 20
    																																																			},
    																																																			{
    																																																				typ: 1,
    																																																				val: "menulist"
    																																																			},
    																																																			{
    																																																				typ: 20
    																																																			}
    																																																		],
    																																																		r: [
    																																																			{
    																																																				typ: 27,
    																																																				l: [
    																																																					{
    																																																						typ: 20
    																																																					},
    																																																					{
    																																																						typ: 1,
    																																																						val: "menulist-button"
    																																																					},
    																																																					{
    																																																						typ: 20
    																																																					}
    																																																				],
    																																																				r: [
    																																																					{
    																																																						typ: 27,
    																																																						l: [
    																																																							{
    																																																								typ: 20
    																																																							},
    																																																							{
    																																																								typ: 1,
    																																																								val: "menulist-text"
    																																																							},
    																																																							{
    																																																								typ: 20
    																																																							}
    																																																						],
    																																																						r: [
    																																																							{
    																																																								typ: 27,
    																																																								l: [
    																																																									{
    																																																										typ: 20
    																																																									},
    																																																									{
    																																																										typ: 1,
    																																																										val: "menulist-textfield"
    																																																									},
    																																																									{
    																																																										typ: 20
    																																																									}
    																																																								],
    																																																								r: [
    																																																									{
    																																																										typ: 27,
    																																																										l: [
    																																																											{
    																																																												typ: 20
    																																																											},
    																																																											{
    																																																												typ: 1,
    																																																												val: "menupopup"
    																																																											},
    																																																											{
    																																																												typ: 20
    																																																											}
    																																																										],
    																																																										r: [
    																																																											{
    																																																												typ: 27,
    																																																												l: [
    																																																													{
    																																																														typ: 20
    																																																													},
    																																																													{
    																																																														typ: 1,
    																																																														val: "menuradio"
    																																																													},
    																																																													{
    																																																														typ: 20
    																																																													}
    																																																												],
    																																																												r: [
    																																																													{
    																																																														typ: 27,
    																																																														l: [
    																																																															{
    																																																																typ: 20
    																																																															},
    																																																															{
    																																																																typ: 1,
    																																																																val: "menuseparator"
    																																																															},
    																																																															{
    																																																																typ: 20
    																																																															}
    																																																														],
    																																																														r: [
    																																																															{
    																																																																typ: 27,
    																																																																l: [
    																																																																	{
    																																																																		typ: 20
    																																																																	},
    																																																																	{
    																																																																		typ: 1,
    																																																																		val: "meterbar"
    																																																																	},
    																																																																	{
    																																																																		typ: 20
    																																																																	}
    																																																																],
    																																																																r: [
    																																																																	{
    																																																																		typ: 27,
    																																																																		l: [
    																																																																			{
    																																																																				typ: 20
    																																																																			},
    																																																																			{
    																																																																				typ: 1,
    																																																																				val: "meterchunk"
    																																																																			},
    																																																																			{
    																																																																				typ: 20
    																																																																			}
    																																																																		],
    																																																																		r: [
    																																																																			{
    																																																																				typ: 27,
    																																																																				l: [
    																																																																					{
    																																																																						typ: 20
    																																																																					},
    																																																																					{
    																																																																						typ: 1,
    																																																																						val: "progressbar"
    																																																																					},
    																																																																					{
    																																																																						typ: 20
    																																																																					}
    																																																																				],
    																																																																				r: [
    																																																																					{
    																																																																						typ: 27,
    																																																																						l: [
    																																																																							{
    																																																																								typ: 20
    																																																																							},
    																																																																							{
    																																																																								typ: 1,
    																																																																								val: "progressbar-vertical"
    																																																																							},
    																																																																							{
    																																																																								typ: 20
    																																																																							}
    																																																																						],
    																																																																						r: [
    																																																																							{
    																																																																								typ: 27,
    																																																																								l: [
    																																																																									{
    																																																																										typ: 20
    																																																																									},
    																																																																									{
    																																																																										typ: 1,
    																																																																										val: "progresschunk"
    																																																																									},
    																																																																									{
    																																																																										typ: 20
    																																																																									}
    																																																																								],
    																																																																								r: [
    																																																																									{
    																																																																										typ: 27,
    																																																																										l: [
    																																																																											{
    																																																																												typ: 20
    																																																																											},
    																																																																											{
    																																																																												typ: 1,
    																																																																												val: "progresschunk-vertical"
    																																																																											},
    																																																																											{
    																																																																												typ: 20
    																																																																											}
    																																																																										],
    																																																																										r: [
    																																																																											{
    																																																																												typ: 27,
    																																																																												l: [
    																																																																													{
    																																																																														typ: 20
    																																																																													},
    																																																																													{
    																																																																														typ: 1,
    																																																																														val: "radio"
    																																																																													},
    																																																																													{
    																																																																														typ: 20
    																																																																													}
    																																																																												],
    																																																																												r: [
    																																																																													{
    																																																																														typ: 27,
    																																																																														l: [
    																																																																															{
    																																																																																typ: 20
    																																																																															},
    																																																																															{
    																																																																																typ: 1,
    																																																																																val: "radio-container"
    																																																																															},
    																																																																															{
    																																																																																typ: 20
    																																																																															}
    																																																																														],
    																																																																														r: [
    																																																																															{
    																																																																																typ: 27,
    																																																																																l: [
    																																																																																	{
    																																																																																		typ: 20
    																																																																																	},
    																																																																																	{
    																																																																																		typ: 1,
    																																																																																		val: "radio-label"
    																																																																																	},
    																																																																																	{
    																																																																																		typ: 20
    																																																																																	}
    																																																																																],
    																																																																																r: [
    																																																																																	{
    																																																																																		typ: 27,
    																																																																																		l: [
    																																																																																			{
    																																																																																				typ: 20
    																																																																																			},
    																																																																																			{
    																																																																																				typ: 1,
    																																																																																				val: "radiomenuitem"
    																																																																																			},
    																																																																																			{
    																																																																																				typ: 20
    																																																																																			}
    																																																																																		],
    																																																																																		r: [
    																																																																																			{
    																																																																																				typ: 27,
    																																																																																				l: [
    																																																																																					{
    																																																																																						typ: 20
    																																																																																					},
    																																																																																					{
    																																																																																						typ: 1,
    																																																																																						val: "range"
    																																																																																					},
    																																																																																					{
    																																																																																						typ: 20
    																																																																																					}
    																																																																																				],
    																																																																																				r: [
    																																																																																					{
    																																																																																						typ: 27,
    																																																																																						l: [
    																																																																																							{
    																																																																																								typ: 20
    																																																																																							},
    																																																																																							{
    																																																																																								typ: 1,
    																																																																																								val: "range-thumb"
    																																																																																							},
    																																																																																							{
    																																																																																								typ: 20
    																																																																																							}
    																																																																																						],
    																																																																																						r: [
    																																																																																							{
    																																																																																								typ: 27,
    																																																																																								l: [
    																																																																																									{
    																																																																																										typ: 20
    																																																																																									},
    																																																																																									{
    																																																																																										typ: 1,
    																																																																																										val: "resizer"
    																																																																																									},
    																																																																																									{
    																																																																																										typ: 20
    																																																																																									}
    																																																																																								],
    																																																																																								r: [
    																																																																																									{
    																																																																																										typ: 27,
    																																																																																										l: [
    																																																																																											{
    																																																																																												typ: 20
    																																																																																											},
    																																																																																											{
    																																																																																												typ: 1,
    																																																																																												val: "resizerpanel"
    																																																																																											},
    																																																																																											{
    																																																																																												typ: 20
    																																																																																											}
    																																																																																										],
    																																																																																										r: [
    																																																																																											{
    																																																																																												typ: 27,
    																																																																																												l: [
    																																																																																													{
    																																																																																														typ: 20
    																																																																																													},
    																																																																																													{
    																																																																																														typ: 1,
    																																																																																														val: "scale-horizontal"
    																																																																																													},
    																																																																																													{
    																																																																																														typ: 20
    																																																																																													}
    																																																																																												],
    																																																																																												r: [
    																																																																																													{
    																																																																																														typ: 27,
    																																																																																														l: [
    																																																																																															{
    																																																																																																typ: 20
    																																																																																															},
    																																																																																															{
    																																																																																																typ: 1,
    																																																																																																val: "scalethumbend"
    																																																																																															},
    																																																																																															{
    																																																																																																typ: 20
    																																																																																															}
    																																																																																														],
    																																																																																														r: [
    																																																																																															{
    																																																																																																typ: 27,
    																																																																																																l: [
    																																																																																																	{
    																																																																																																		typ: 20
    																																																																																																	},
    																																																																																																	{
    																																																																																																		typ: 1,
    																																																																																																		val: "scalethumb-horizontal"
    																																																																																																	},
    																																																																																																	{
    																																																																																																		typ: 20
    																																																																																																	}
    																																																																																																],
    																																																																																																r: [
    																																																																																																	{
    																																																																																																		typ: 27,
    																																																																																																		l: [
    																																																																																																			{
    																																																																																																				typ: 20
    																																																																																																			},
    																																																																																																			{
    																																																																																																				typ: 1,
    																																																																																																				val: "scalethumbstart"
    																																																																																																			},
    																																																																																																			{
    																																																																																																				typ: 20
    																																																																																																			}
    																																																																																																		],
    																																																																																																		r: [
    																																																																																																			{
    																																																																																																				typ: 27,
    																																																																																																				l: [
    																																																																																																					{
    																																																																																																						typ: 20
    																																																																																																					},
    																																																																																																					{
    																																																																																																						typ: 1,
    																																																																																																						val: "scalethumbtick"
    																																																																																																					},
    																																																																																																					{
    																																																																																																						typ: 20
    																																																																																																					}
    																																																																																																				],
    																																																																																																				r: [
    																																																																																																					{
    																																																																																																						typ: 27,
    																																																																																																						l: [
    																																																																																																							{
    																																																																																																								typ: 20
    																																																																																																							},
    																																																																																																							{
    																																																																																																								typ: 1,
    																																																																																																								val: "scalethumb-vertical"
    																																																																																																							},
    																																																																																																							{
    																																																																																																								typ: 20
    																																																																																																							}
    																																																																																																						],
    																																																																																																						r: [
    																																																																																																							{
    																																																																																																								typ: 27,
    																																																																																																								l: [
    																																																																																																									{
    																																																																																																										typ: 20
    																																																																																																									},
    																																																																																																									{
    																																																																																																										typ: 1,
    																																																																																																										val: "scale-vertical"
    																																																																																																									},
    																																																																																																									{
    																																																																																																										typ: 20
    																																																																																																									}
    																																																																																																								],
    																																																																																																								r: [
    																																																																																																									{
    																																																																																																										typ: 27,
    																																																																																																										l: [
    																																																																																																											{
    																																																																																																												typ: 20
    																																																																																																											},
    																																																																																																											{
    																																																																																																												typ: 1,
    																																																																																																												val: "scrollbarbutton-down"
    																																																																																																											},
    																																																																																																											{
    																																																																																																												typ: 20
    																																																																																																											}
    																																																																																																										],
    																																																																																																										r: [
    																																																																																																											{
    																																																																																																												typ: 27,
    																																																																																																												l: [
    																																																																																																													{
    																																																																																																														typ: 20
    																																																																																																													},
    																																																																																																													{
    																																																																																																														typ: 1,
    																																																																																																														val: "scrollbarbutton-left"
    																																																																																																													},
    																																																																																																													{
    																																																																																																														typ: 20
    																																																																																																													}
    																																																																																																												],
    																																																																																																												r: [
    																																																																																																													{
    																																																																																																														typ: 27,
    																																																																																																														l: [
    																																																																																																															{
    																																																																																																																typ: 20
    																																																																																																															},
    																																																																																																															{
    																																																																																																																typ: 1,
    																																																																																																																val: "scrollbarbutton-right"
    																																																																																																															},
    																																																																																																															{
    																																																																																																																typ: 20
    																																																																																																															}
    																																																																																																														],
    																																																																																																														r: [
    																																																																																																															{
    																																																																																																																typ: 27,
    																																																																																																																l: [
    																																																																																																																	{
    																																																																																																																		typ: 20
    																																																																																																																	},
    																																																																																																																	{
    																																																																																																																		typ: 1,
    																																																																																																																		val: "scrollbarbutton-up"
    																																																																																																																	},
    																																																																																																																	{
    																																																																																																																		typ: 20
    																																																																																																																	}
    																																																																																																																],
    																																																																																																																r: [
    																																																																																																																	{
    																																																																																																																		typ: 27,
    																																																																																																																		l: [
    																																																																																																																			{
    																																																																																																																				typ: 20
    																																																																																																																			},
    																																																																																																																			{
    																																																																																																																				typ: 1,
    																																																																																																																				val: "scrollbarthumb-horizontal"
    																																																																																																																			},
    																																																																																																																			{
    																																																																																																																				typ: 20
    																																																																																																																			}
    																																																																																																																		],
    																																																																																																																		r: [
    																																																																																																																			{
    																																																																																																																				typ: 27,
    																																																																																																																				l: [
    																																																																																																																					{
    																																																																																																																						typ: 20
    																																																																																																																					},
    																																																																																																																					{
    																																																																																																																						typ: 1,
    																																																																																																																						val: "scrollbarthumb-vertical"
    																																																																																																																					},
    																																																																																																																					{
    																																																																																																																						typ: 20
    																																																																																																																					}
    																																																																																																																				],
    																																																																																																																				r: [
    																																																																																																																					{
    																																																																																																																						typ: 27,
    																																																																																																																						l: [
    																																																																																																																							{
    																																																																																																																								typ: 20
    																																																																																																																							},
    																																																																																																																							{
    																																																																																																																								typ: 1,
    																																																																																																																								val: "scrollbartrack-horizontal"
    																																																																																																																							},
    																																																																																																																							{
    																																																																																																																								typ: 20
    																																																																																																																							}
    																																																																																																																						],
    																																																																																																																						r: [
    																																																																																																																							{
    																																																																																																																								typ: 27,
    																																																																																																																								l: [
    																																																																																																																									{
    																																																																																																																										typ: 20
    																																																																																																																									},
    																																																																																																																									{
    																																																																																																																										typ: 1,
    																																																																																																																										val: "scrollbartrack-vertical"
    																																																																																																																									},
    																																																																																																																									{
    																																																																																																																										typ: 20
    																																																																																																																									}
    																																																																																																																								],
    																																																																																																																								r: [
    																																																																																																																									{
    																																																																																																																										typ: 27,
    																																																																																																																										l: [
    																																																																																																																											{
    																																																																																																																												typ: 20
    																																																																																																																											},
    																																																																																																																											{
    																																																																																																																												typ: 1,
    																																																																																																																												val: "searchfield"
    																																																																																																																											},
    																																																																																																																											{
    																																																																																																																												typ: 20
    																																																																																																																											}
    																																																																																																																										],
    																																																																																																																										r: [
    																																																																																																																											{
    																																																																																																																												typ: 27,
    																																																																																																																												l: [
    																																																																																																																													{
    																																																																																																																														typ: 20
    																																																																																																																													},
    																																																																																																																													{
    																																																																																																																														typ: 1,
    																																																																																																																														val: "separator"
    																																																																																																																													},
    																																																																																																																													{
    																																																																																																																														typ: 20
    																																																																																																																													}
    																																																																																																																												],
    																																																																																																																												r: [
    																																																																																																																													{
    																																																																																																																														typ: 27,
    																																																																																																																														l: [
    																																																																																																																															{
    																																																																																																																																typ: 20
    																																																																																																																															},
    																																																																																																																															{
    																																																																																																																																typ: 1,
    																																																																																																																																val: "sheet"
    																																																																																																																															},
    																																																																																																																															{
    																																																																																																																																typ: 20
    																																																																																																																															}
    																																																																																																																														],
    																																																																																																																														r: [
    																																																																																																																															{
    																																																																																																																																typ: 27,
    																																																																																																																																l: [
    																																																																																																																																	{
    																																																																																																																																		typ: 20
    																																																																																																																																	},
    																																																																																																																																	{
    																																																																																																																																		typ: 1,
    																																																																																																																																		val: "spinner"
    																																																																																																																																	},
    																																																																																																																																	{
    																																																																																																																																		typ: 20
    																																																																																																																																	}
    																																																																																																																																],
    																																																																																																																																r: [
    																																																																																																																																	{
    																																																																																																																																		typ: 27,
    																																																																																																																																		l: [
    																																																																																																																																			{
    																																																																																																																																				typ: 20
    																																																																																																																																			},
    																																																																																																																																			{
    																																																																																																																																				typ: 1,
    																																																																																																																																				val: "spinner-downbutton"
    																																																																																																																																			},
    																																																																																																																																			{
    																																																																																																																																				typ: 20
    																																																																																																																																			}
    																																																																																																																																		],
    																																																																																																																																		r: [
    																																																																																																																																			{
    																																																																																																																																				typ: 27,
    																																																																																																																																				l: [
    																																																																																																																																					{
    																																																																																																																																						typ: 20
    																																																																																																																																					},
    																																																																																																																																					{
    																																																																																																																																						typ: 1,
    																																																																																																																																						val: "spinner-textfield"
    																																																																																																																																					},
    																																																																																																																																					{
    																																																																																																																																						typ: 20
    																																																																																																																																					}
    																																																																																																																																				],
    																																																																																																																																				r: [
    																																																																																																																																					{
    																																																																																																																																						typ: 27,
    																																																																																																																																						l: [
    																																																																																																																																							{
    																																																																																																																																								typ: 20
    																																																																																																																																							},
    																																																																																																																																							{
    																																																																																																																																								typ: 1,
    																																																																																																																																								val: "spinner-upbutton"
    																																																																																																																																							},
    																																																																																																																																							{
    																																																																																																																																								typ: 20
    																																																																																																																																							}
    																																																																																																																																						],
    																																																																																																																																						r: [
    																																																																																																																																							{
    																																																																																																																																								typ: 27,
    																																																																																																																																								l: [
    																																																																																																																																									{
    																																																																																																																																										typ: 20
    																																																																																																																																									},
    																																																																																																																																									{
    																																																																																																																																										typ: 1,
    																																																																																																																																										val: "splitter"
    																																																																																																																																									},
    																																																																																																																																									{
    																																																																																																																																										typ: 20
    																																																																																																																																									}
    																																																																																																																																								],
    																																																																																																																																								r: [
    																																																																																																																																									{
    																																																																																																																																										typ: 27,
    																																																																																																																																										l: [
    																																																																																																																																											{
    																																																																																																																																												typ: 20
    																																																																																																																																											},
    																																																																																																																																											{
    																																																																																																																																												typ: 1,
    																																																																																																																																												val: "statusbar"
    																																																																																																																																											},
    																																																																																																																																											{
    																																																																																																																																												typ: 20
    																																																																																																																																											}
    																																																																																																																																										],
    																																																																																																																																										r: [
    																																																																																																																																											{
    																																																																																																																																												typ: 27,
    																																																																																																																																												l: [
    																																																																																																																																													{
    																																																																																																																																														typ: 20
    																																																																																																																																													},
    																																																																																																																																													{
    																																																																																																																																														typ: 1,
    																																																																																																																																														val: "statusbarpanel"
    																																																																																																																																													},
    																																																																																																																																													{
    																																																																																																																																														typ: 20
    																																																																																																																																													}
    																																																																																																																																												],
    																																																																																																																																												r: [
    																																																																																																																																													{
    																																																																																																																																														typ: 27,
    																																																																																																																																														l: [
    																																																																																																																																															{
    																																																																																																																																																typ: 20
    																																																																																																																																															},
    																																																																																																																																															{
    																																																																																																																																																typ: 1,
    																																																																																																																																																val: "tab"
    																																																																																																																																															},
    																																																																																																																																															{
    																																																																																																																																																typ: 20
    																																																																																																																																															}
    																																																																																																																																														],
    																																																																																																																																														r: [
    																																																																																																																																															{
    																																																																																																																																																typ: 27,
    																																																																																																																																																l: [
    																																																																																																																																																	{
    																																																																																																																																																		typ: 20
    																																																																																																																																																	},
    																																																																																																																																																	{
    																																																																																																																																																		typ: 1,
    																																																																																																																																																		val: "tabpanel"
    																																																																																																																																																	},
    																																																																																																																																																	{
    																																																																																																																																																		typ: 20
    																																																																																																																																																	}
    																																																																																																																																																],
    																																																																																																																																																r: [
    																																																																																																																																																	{
    																																																																																																																																																		typ: 27,
    																																																																																																																																																		l: [
    																																																																																																																																																			{
    																																																																																																																																																				typ: 20
    																																																																																																																																																			},
    																																																																																																																																																			{
    																																																																																																																																																				typ: 1,
    																																																																																																																																																				val: "tabpanels"
    																																																																																																																																																			},
    																																																																																																																																																			{
    																																																																																																																																																				typ: 20
    																																																																																																																																																			}
    																																																																																																																																																		],
    																																																																																																																																																		r: [
    																																																																																																																																																			{
    																																																																																																																																																				typ: 27,
    																																																																																																																																																				l: [
    																																																																																																																																																					{
    																																																																																																																																																						typ: 20
    																																																																																																																																																					},
    																																																																																																																																																					{
    																																																																																																																																																						typ: 1,
    																																																																																																																																																						val: "tab-scroll-arrow-back"
    																																																																																																																																																					},
    																																																																																																																																																					{
    																																																																																																																																																						typ: 20
    																																																																																																																																																					}
    																																																																																																																																																				],
    																																																																																																																																																				r: [
    																																																																																																																																																					{
    																																																																																																																																																						typ: 27,
    																																																																																																																																																						l: [
    																																																																																																																																																							{
    																																																																																																																																																								typ: 20
    																																																																																																																																																							},
    																																																																																																																																																							{
    																																																																																																																																																								typ: 1,
    																																																																																																																																																								val: "tab-scroll-arrow-forward"
    																																																																																																																																																							},
    																																																																																																																																																							{
    																																																																																																																																																								typ: 20
    																																																																																																																																																							}
    																																																																																																																																																						],
    																																																																																																																																																						r: [
    																																																																																																																																																							{
    																																																																																																																																																								typ: 27,
    																																																																																																																																																								l: [
    																																																																																																																																																									{
    																																																																																																																																																										typ: 20
    																																																																																																																																																									},
    																																																																																																																																																									{
    																																																																																																																																																										typ: 1,
    																																																																																																																																																										val: "textfield"
    																																																																																																																																																									},
    																																																																																																																																																									{
    																																																																																																																																																										typ: 20
    																																																																																																																																																									}
    																																																																																																																																																								],
    																																																																																																																																																								r: [
    																																																																																																																																																									{
    																																																																																																																																																										typ: 27,
    																																																																																																																																																										l: [
    																																																																																																																																																											{
    																																																																																																																																																												typ: 20
    																																																																																																																																																											},
    																																																																																																																																																											{
    																																																																																																																																																												typ: 1,
    																																																																																																																																																												val: "textfield-multiline"
    																																																																																																																																																											},
    																																																																																																																																																											{
    																																																																																																																																																												typ: 20
    																																																																																																																																																											}
    																																																																																																																																																										],
    																																																																																																																																																										r: [
    																																																																																																																																																											{
    																																																																																																																																																												typ: 27,
    																																																																																																																																																												l: [
    																																																																																																																																																													{
    																																																																																																																																																														typ: 20
    																																																																																																																																																													},
    																																																																																																																																																													{
    																																																																																																																																																														typ: 1,
    																																																																																																																																																														val: "toolbar"
    																																																																																																																																																													},
    																																																																																																																																																													{
    																																																																																																																																																														typ: 20
    																																																																																																																																																													}
    																																																																																																																																																												],
    																																																																																																																																																												r: [
    																																																																																																																																																													{
    																																																																																																																																																														typ: 27,
    																																																																																																																																																														l: [
    																																																																																																																																																															{
    																																																																																																																																																																typ: 20
    																																																																																																																																																															},
    																																																																																																																																																															{
    																																																																																																																																																																typ: 1,
    																																																																																																																																																																val: "toolbarbutton"
    																																																																																																																																																															},
    																																																																																																																																																															{
    																																																																																																																																																																typ: 20
    																																																																																																																																																															}
    																																																																																																																																																														],
    																																																																																																																																																														r: [
    																																																																																																																																																															{
    																																																																																																																																																																typ: 27,
    																																																																																																																																																																l: [
    																																																																																																																																																																	{
    																																																																																																																																																																		typ: 20
    																																																																																																																																																																	},
    																																																																																																																																																																	{
    																																																																																																																																																																		typ: 1,
    																																																																																																																																																																		val: "toolbarbutton-dropdown"
    																																																																																																																																																																	},
    																																																																																																																																																																	{
    																																																																																																																																																																		typ: 20
    																																																																																																																																																																	}
    																																																																																																																																																																],
    																																																																																																																																																																r: [
    																																																																																																																																																																	{
    																																																																																																																																																																		typ: 27,
    																																																																																																																																																																		l: [
    																																																																																																																																																																			{
    																																																																																																																																																																				typ: 20
    																																																																																																																																																																			},
    																																																																																																																																																																			{
    																																																																																																																																																																				typ: 1,
    																																																																																																																																																																				val: "toolbargripper"
    																																																																																																																																																																			},
    																																																																																																																																																																			{
    																																																																																																																																																																				typ: 20
    																																																																																																																																																																			}
    																																																																																																																																																																		],
    																																																																																																																																																																		r: [
    																																																																																																																																																																			{
    																																																																																																																																																																				typ: 27,
    																																																																																																																																																																				l: [
    																																																																																																																																																																					{
    																																																																																																																																																																						typ: 20
    																																																																																																																																																																					},
    																																																																																																																																																																					{
    																																																																																																																																																																						typ: 1,
    																																																																																																																																																																						val: "toolbox"
    																																																																																																																																																																					},
    																																																																																																																																																																					{
    																																																																																																																																																																						typ: 20
    																																																																																																																																																																					}
    																																																																																																																																																																				],
    																																																																																																																																																																				r: [
    																																																																																																																																																																					{
    																																																																																																																																																																						typ: 27,
    																																																																																																																																																																						l: [
    																																																																																																																																																																							{
    																																																																																																																																																																								typ: 20
    																																																																																																																																																																							},
    																																																																																																																																																																							{
    																																																																																																																																																																								typ: 1,
    																																																																																																																																																																								val: "tooltip"
    																																																																																																																																																																							},
    																																																																																																																																																																							{
    																																																																																																																																																																								typ: 20
    																																																																																																																																																																							}
    																																																																																																																																																																						],
    																																																																																																																																																																						r: [
    																																																																																																																																																																							{
    																																																																																																																																																																								typ: 27,
    																																																																																																																																																																								l: [
    																																																																																																																																																																									{
    																																																																																																																																																																										typ: 20
    																																																																																																																																																																									},
    																																																																																																																																																																									{
    																																																																																																																																																																										typ: 1,
    																																																																																																																																																																										val: "treeheader"
    																																																																																																																																																																									},
    																																																																																																																																																																									{
    																																																																																																																																																																										typ: 20
    																																																																																																																																																																									}
    																																																																																																																																																																								],
    																																																																																																																																																																								r: [
    																																																																																																																																																																									{
    																																																																																																																																																																										typ: 27,
    																																																																																																																																																																										l: [
    																																																																																																																																																																											{
    																																																																																																																																																																												typ: 20
    																																																																																																																																																																											},
    																																																																																																																																																																											{
    																																																																																																																																																																												typ: 1,
    																																																																																																																																																																												val: "treeheadercell"
    																																																																																																																																																																											},
    																																																																																																																																																																											{
    																																																																																																																																																																												typ: 20
    																																																																																																																																																																											}
    																																																																																																																																																																										],
    																																																																																																																																																																										r: [
    																																																																																																																																																																											{
    																																																																																																																																																																												typ: 27,
    																																																																																																																																																																												l: [
    																																																																																																																																																																													{
    																																																																																																																																																																														typ: 20
    																																																																																																																																																																													},
    																																																																																																																																																																													{
    																																																																																																																																																																														typ: 1,
    																																																																																																																																																																														val: "treeheadersortarrow"
    																																																																																																																																																																													},
    																																																																																																																																																																													{
    																																																																																																																																																																														typ: 20
    																																																																																																																																																																													}
    																																																																																																																																																																												],
    																																																																																																																																																																												r: [
    																																																																																																																																																																													{
    																																																																																																																																																																														typ: 27,
    																																																																																																																																																																														l: [
    																																																																																																																																																																															{
    																																																																																																																																																																																typ: 20
    																																																																																																																																																																															},
    																																																																																																																																																																															{
    																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																val: "treeitem"
    																																																																																																																																																																															},
    																																																																																																																																																																															{
    																																																																																																																																																																																typ: 20
    																																																																																																																																																																															}
    																																																																																																																																																																														],
    																																																																																																																																																																														r: [
    																																																																																																																																																																															{
    																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																l: [
    																																																																																																																																																																																	{
    																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																	},
    																																																																																																																																																																																	{
    																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																		val: "treeline"
    																																																																																																																																																																																	},
    																																																																																																																																																																																	{
    																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																	}
    																																																																																																																																																																																],
    																																																																																																																																																																																r: [
    																																																																																																																																																																																	{
    																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																		l: [
    																																																																																																																																																																																			{
    																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																			},
    																																																																																																																																																																																			{
    																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																				val: "treetwisty"
    																																																																																																																																																																																			},
    																																																																																																																																																																																			{
    																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																			}
    																																																																																																																																																																																		],
    																																																																																																																																																																																		r: [
    																																																																																																																																																																																			{
    																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																				l: [
    																																																																																																																																																																																					{
    																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																					},
    																																																																																																																																																																																					{
    																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																						val: "treetwistyopen"
    																																																																																																																																																																																					},
    																																																																																																																																																																																					{
    																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																					}
    																																																																																																																																																																																				],
    																																																																																																																																																																																				r: [
    																																																																																																																																																																																					{
    																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																						l: [
    																																																																																																																																																																																							{
    																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																							},
    																																																																																																																																																																																							{
    																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																								val: "treeview"
    																																																																																																																																																																																							},
    																																																																																																																																																																																							{
    																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																							}
    																																																																																																																																																																																						],
    																																																																																																																																																																																						r: [
    																																																																																																																																																																																							{
    																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																								l: [
    																																																																																																																																																																																									{
    																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																									},
    																																																																																																																																																																																									{
    																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																										val: "-moz-mac-unified-toolbar"
    																																																																																																																																																																																									},
    																																																																																																																																																																																									{
    																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																									}
    																																																																																																																																																																																								],
    																																																																																																																																																																																								r: [
    																																																																																																																																																																																									{
    																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																										l: [
    																																																																																																																																																																																											{
    																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																											},
    																																																																																																																																																																																											{
    																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																												val: "-moz-win-borderless-glass"
    																																																																																																																																																																																											},
    																																																																																																																																																																																											{
    																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																											}
    																																																																																																																																																																																										],
    																																																																																																																																																																																										r: [
    																																																																																																																																																																																											{
    																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																												l: [
    																																																																																																																																																																																													{
    																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																													},
    																																																																																																																																																																																													{
    																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																														val: "-moz-win-browsertabbar-toolbox"
    																																																																																																																																																																																													},
    																																																																																																																																																																																													{
    																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																													}
    																																																																																																																																																																																												],
    																																																																																																																																																																																												r: [
    																																																																																																																																																																																													{
    																																																																																																																																																																																														typ: 27,
    																																																																																																																																																																																														l: [
    																																																																																																																																																																																															{
    																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																															},
    																																																																																																																																																																																															{
    																																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																																val: "-moz-win-communicationstext"
    																																																																																																																																																																																															},
    																																																																																																																																																																																															{
    																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																															}
    																																																																																																																																																																																														],
    																																																																																																																																																																																														r: [
    																																																																																																																																																																																															{
    																																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																																l: [
    																																																																																																																																																																																																	{
    																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																	},
    																																																																																																																																																																																																	{
    																																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																																		val: "-moz-win-communications-toolbox"
    																																																																																																																																																																																																	},
    																																																																																																																																																																																																	{
    																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																	}
    																																																																																																																																																																																																],
    																																																																																																																																																																																																r: [
    																																																																																																																																																																																																	{
    																																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																																		l: [
    																																																																																																																																																																																																			{
    																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																			},
    																																																																																																																																																																																																			{
    																																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																																				val: "-moz-win-exclude-glass"
    																																																																																																																																																																																																			},
    																																																																																																																																																																																																			{
    																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																			}
    																																																																																																																																																																																																		],
    																																																																																																																																																																																																		r: [
    																																																																																																																																																																																																			{
    																																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																																				l: [
    																																																																																																																																																																																																					{
    																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																					},
    																																																																																																																																																																																																					{
    																																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																																						val: "-moz-win-glass"
    																																																																																																																																																																																																					},
    																																																																																																																																																																																																					{
    																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																					}
    																																																																																																																																																																																																				],
    																																																																																																																																																																																																				r: [
    																																																																																																																																																																																																					{
    																																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																																						l: [
    																																																																																																																																																																																																							{
    																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																							},
    																																																																																																																																																																																																							{
    																																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																																								val: "-moz-win-mediatext"
    																																																																																																																																																																																																							},
    																																																																																																																																																																																																							{
    																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																							}
    																																																																																																																																																																																																						],
    																																																																																																																																																																																																						r: [
    																																																																																																																																																																																																							{
    																																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																																								l: [
    																																																																																																																																																																																																									{
    																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																									},
    																																																																																																																																																																																																									{
    																																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																																										val: "-moz-win-media-toolbox"
    																																																																																																																																																																																																									},
    																																																																																																																																																																																																									{
    																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																									}
    																																																																																																																																																																																																								],
    																																																																																																																																																																																																								r: [
    																																																																																																																																																																																																									{
    																																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																																										l: [
    																																																																																																																																																																																																											{
    																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																											},
    																																																																																																																																																																																																											{
    																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																												val: "-moz-window-button-box"
    																																																																																																																																																																																																											},
    																																																																																																																																																																																																											{
    																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																											}
    																																																																																																																																																																																																										],
    																																																																																																																																																																																																										r: [
    																																																																																																																																																																																																											{
    																																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																																												l: [
    																																																																																																																																																																																																													{
    																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																													},
    																																																																																																																																																																																																													{
    																																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																																														val: "-moz-window-button-box-maximized"
    																																																																																																																																																																																																													},
    																																																																																																																																																																																																													{
    																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																													}
    																																																																																																																																																																																																												],
    																																																																																																																																																																																																												r: [
    																																																																																																																																																																																																													{
    																																																																																																																																																																																																														typ: 27,
    																																																																																																																																																																																																														l: [
    																																																																																																																																																																																																															{
    																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																															},
    																																																																																																																																																																																																															{
    																																																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																																																val: "-moz-window-button-close"
    																																																																																																																																																																																																															},
    																																																																																																																																																																																																															{
    																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																															}
    																																																																																																																																																																																																														],
    																																																																																																																																																																																																														r: [
    																																																																																																																																																																																																															{
    																																																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																																																l: [
    																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																																																		val: "-moz-window-button-maximize"
    																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																],
    																																																																																																																																																																																																																r: [
    																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																																																		l: [
    																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																																																				val: "-moz-window-button-minimize"
    																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																		],
    																																																																																																																																																																																																																		r: [
    																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																																																				l: [
    																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																																																						val: "-moz-window-button-restore"
    																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																				],
    																																																																																																																																																																																																																				r: [
    																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																																																						l: [
    																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																																																								val: "-moz-window-frame-bottom"
    																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																						],
    																																																																																																																																																																																																																						r: [
    																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																																																								l: [
    																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																																																										val: "-moz-window-frame-left"
    																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																								],
    																																																																																																																																																																																																																								r: [
    																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																																																										l: [
    																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																																												val: "-moz-window-frame-right"
    																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																										],
    																																																																																																																																																																																																																										r: [
    																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																																																												l: [
    																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																																																														val: "-moz-window-titlebar"
    																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																												],
    																																																																																																																																																																																																																												r: [
    																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																																																														val: "-moz-window-titlebar-maximized"
    																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																												]
    																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																										]
    																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																								]
    																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																						]
    																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																				]
    																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																		]
    																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																]
    																																																																																																																																																																																																															}
    																																																																																																																																																																																																														]
    																																																																																																																																																																																																													}
    																																																																																																																																																																																																												]
    																																																																																																																																																																																																											}
    																																																																																																																																																																																																										]
    																																																																																																																																																																																																									}
    																																																																																																																																																																																																								]
    																																																																																																																																																																																																							}
    																																																																																																																																																																																																						]
    																																																																																																																																																																																																					}
    																																																																																																																																																																																																				]
    																																																																																																																																																																																																			}
    																																																																																																																																																																																																		]
    																																																																																																																																																																																																	}
    																																																																																																																																																																																																]
    																																																																																																																																																																																															}
    																																																																																																																																																																																														]
    																																																																																																																																																																																													}
    																																																																																																																																																																																												]
    																																																																																																																																																																																											}
    																																																																																																																																																																																										]
    																																																																																																																																																																																									}
    																																																																																																																																																																																								]
    																																																																																																																																																																																							}
    																																																																																																																																																																																						]
    																																																																																																																																																																																					}
    																																																																																																																																																																																				]
    																																																																																																																																																																																			}
    																																																																																																																																																																																		]
    																																																																																																																																																																																	}
    																																																																																																																																																																																]
    																																																																																																																																																																															}
    																																																																																																																																																																														]
    																																																																																																																																																																													}
    																																																																																																																																																																												]
    																																																																																																																																																																											}
    																																																																																																																																																																										]
    																																																																																																																																																																									}
    																																																																																																																																																																								]
    																																																																																																																																																																							}
    																																																																																																																																																																						]
    																																																																																																																																																																					}
    																																																																																																																																																																				]
    																																																																																																																																																																			}
    																																																																																																																																																																		]
    																																																																																																																																																																	}
    																																																																																																																																																																]
    																																																																																																																																																															}
    																																																																																																																																																														]
    																																																																																																																																																													}
    																																																																																																																																																												]
    																																																																																																																																																											}
    																																																																																																																																																										]
    																																																																																																																																																									}
    																																																																																																																																																								]
    																																																																																																																																																							}
    																																																																																																																																																						]
    																																																																																																																																																					}
    																																																																																																																																																				]
    																																																																																																																																																			}
    																																																																																																																																																		]
    																																																																																																																																																	}
    																																																																																																																																																]
    																																																																																																																																															}
    																																																																																																																																														]
    																																																																																																																																													}
    																																																																																																																																												]
    																																																																																																																																											}
    																																																																																																																																										]
    																																																																																																																																									}
    																																																																																																																																								]
    																																																																																																																																							}
    																																																																																																																																						]
    																																																																																																																																					}
    																																																																																																																																				]
    																																																																																																																																			}
    																																																																																																																																		]
    																																																																																																																																	}
    																																																																																																																																]
    																																																																																																																															}
    																																																																																																																														]
    																																																																																																																													}
    																																																																																																																												]
    																																																																																																																											}
    																																																																																																																										]
    																																																																																																																									}
    																																																																																																																								]
    																																																																																																																							}
    																																																																																																																						]
    																																																																																																																					}
    																																																																																																																				]
    																																																																																																																			}
    																																																																																																																		]
    																																																																																																																	}
    																																																																																																																]
    																																																																																																															}
    																																																																																																														]
    																																																																																																													}
    																																																																																																												]
    																																																																																																											}
    																																																																																																										]
    																																																																																																									}
    																																																																																																								]
    																																																																																																							}
    																																																																																																						]
    																																																																																																					}
    																																																																																																				]
    																																																																																																			}
    																																																																																																		]
    																																																																																																	}
    																																																																																																]
    																																																																																															}
    																																																																																														]
    																																																																																													}
    																																																																																												]
    																																																																																											}
    																																																																																										]
    																																																																																									}
    																																																																																								]
    																																																																																							}
    																																																																																						]
    																																																																																					}
    																																																																																				]
    																																																																																			}
    																																																																																		]
    																																																																																	}
    																																																																																]
    																																																																															}
    																																																																														]
    																																																																													}
    																																																																												]
    																																																																											}
    																																																																										]
    																																																																									}
    																																																																								]
    																																																																							}
    																																																																						]
    																																																																					}
    																																																																				]
    																																																																			}
    																																																																		]
    																																																																	}
    																																																																]
    																																																															}
    																																																														]
    																																																													}
    																																																												]
    																																																											}
    																																																										]
    																																																									}
    																																																								]
    																																																							}
    																																																						]
    																																																					}
    																																																				]
    																																																			}
    																																																		]
    																																																	}
    																																																]
    																																															}
    																																														]
    																																													}
    																																												]
    																																											}
    																																										]
    																																									}
    																																								]
    																																							}
    																																						]
    																																					}
    																																				]
    																																			}
    																																		]
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-moz-binding": {
    		syntax: "<url> | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "url"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-moz-border-bottom-colors": {
    		syntax: "<color>+ | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "color",
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-moz-border-left-colors": {
    		syntax: "<color>+ | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "color",
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-moz-border-right-colors": {
    		syntax: "<color>+ | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "color",
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-moz-border-top-colors": {
    		syntax: "<color>+ | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "color",
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-moz-context-properties": {
    		syntax: "none | [ fill | fill-opacity | stroke | stroke-opacity ]#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "fill"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "fill-opacity"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "stroke"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "stroke-opacity"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						],
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"-moz-float-edge": {
    		syntax: "border-box | content-box | margin-box | padding-box",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "border-box"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "content-box"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "margin-box"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "padding-box"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-moz-force-broken-image-icon": {
    		syntax: "0 | 1",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 19,
    						val: 0
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 19,
    						val: 1
    					}
    				]
    			}
    		]
    	},
    	"-moz-image-region": {
    		syntax: "<shape> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "shape"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "auto"
    					}
    				]
    			}
    		]
    	},
    	"-moz-orient": {
    		syntax: "inline | block | horizontal | vertical",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "inline"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "block"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "horizontal"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "vertical"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-moz-outline-radius": {
    		syntax: "<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?",
    		ast: [
    			{
    				typ: 2,
    				val: "outline-radius",
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 24
    					},
    					{
    						typ: 2,
    						val: "outline-radius",
    						occurence: {
    							min: 1,
    							max: 4
    						}
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"-moz-outline-radius-bottomleft": {
    		syntax: "<outline-radius>",
    		ast: [
    			{
    				typ: 2,
    				val: "outline-radius"
    			}
    		]
    	},
    	"-moz-outline-radius-bottomright": {
    		syntax: "<outline-radius>",
    		ast: [
    			{
    				typ: 2,
    				val: "outline-radius"
    			}
    		]
    	},
    	"-moz-outline-radius-topleft": {
    		syntax: "<outline-radius>",
    		ast: [
    			{
    				typ: 2,
    				val: "outline-radius"
    			}
    		]
    	},
    	"-moz-outline-radius-topright": {
    		syntax: "<outline-radius>",
    		ast: [
    			{
    				typ: 2,
    				val: "outline-radius"
    			}
    		]
    	},
    	"-moz-stack-sizing": {
    		syntax: "ignore | stretch-to-fit",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "ignore"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "stretch-to-fit"
    					}
    				]
    			}
    		]
    	},
    	"-moz-text-blink": {
    		syntax: "none | blink",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "blink"
    					}
    				]
    			}
    		]
    	},
    	"-moz-user-focus": {
    		syntax: "ignore | normal | select-after | select-before | select-menu | select-same | select-all | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "ignore"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "select-after"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "select-before"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "select-menu"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "select-same"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "select-all"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "none"
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-moz-user-input": {
    		syntax: "auto | none | enabled | disabled",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "enabled"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "disabled"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-moz-user-modify": {
    		syntax: "read-only | read-write | write-only",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "read-only"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "read-write"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "write-only"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-moz-window-dragging": {
    		syntax: "drag | no-drag",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "drag"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "no-drag"
    					}
    				]
    			}
    		]
    	},
    	"-moz-window-shadow": {
    		syntax: "default | menu | tooltip | sheet | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "default"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "menu"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "tooltip"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "sheet"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-webkit-appearance": {
    		syntax: "none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "button"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "button-bevel"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "caret"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "checkbox"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "default-button"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "inner-spin-button"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "listbox"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "listitem"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "media-controls-background"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "media-controls-fullscreen-background"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "media-current-time-display"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "media-enter-fullscreen-button"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 27,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 1,
    																																val: "media-exit-fullscreen-button"
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 27,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "media-fullscreen-button"
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 27,
    																																		l: [
    																																			{
    																																				typ: 20
    																																			},
    																																			{
    																																				typ: 1,
    																																				val: "media-mute-button"
    																																			},
    																																			{
    																																				typ: 20
    																																			}
    																																		],
    																																		r: [
    																																			{
    																																				typ: 27,
    																																				l: [
    																																					{
    																																						typ: 20
    																																					},
    																																					{
    																																						typ: 1,
    																																						val: "media-overlay-play-button"
    																																					},
    																																					{
    																																						typ: 20
    																																					}
    																																				],
    																																				r: [
    																																					{
    																																						typ: 27,
    																																						l: [
    																																							{
    																																								typ: 20
    																																							},
    																																							{
    																																								typ: 1,
    																																								val: "media-play-button"
    																																							},
    																																							{
    																																								typ: 20
    																																							}
    																																						],
    																																						r: [
    																																							{
    																																								typ: 27,
    																																								l: [
    																																									{
    																																										typ: 20
    																																									},
    																																									{
    																																										typ: 1,
    																																										val: "media-seek-back-button"
    																																									},
    																																									{
    																																										typ: 20
    																																									}
    																																								],
    																																								r: [
    																																									{
    																																										typ: 27,
    																																										l: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 1,
    																																												val: "media-seek-forward-button"
    																																											},
    																																											{
    																																												typ: 20
    																																											}
    																																										],
    																																										r: [
    																																											{
    																																												typ: 27,
    																																												l: [
    																																													{
    																																														typ: 20
    																																													},
    																																													{
    																																														typ: 1,
    																																														val: "media-slider"
    																																													},
    																																													{
    																																														typ: 20
    																																													}
    																																												],
    																																												r: [
    																																													{
    																																														typ: 27,
    																																														l: [
    																																															{
    																																																typ: 20
    																																															},
    																																															{
    																																																typ: 1,
    																																																val: "media-sliderthumb"
    																																															},
    																																															{
    																																																typ: 20
    																																															}
    																																														],
    																																														r: [
    																																															{
    																																																typ: 27,
    																																																l: [
    																																																	{
    																																																		typ: 20
    																																																	},
    																																																	{
    																																																		typ: 1,
    																																																		val: "media-time-remaining-display"
    																																																	},
    																																																	{
    																																																		typ: 20
    																																																	}
    																																																],
    																																																r: [
    																																																	{
    																																																		typ: 27,
    																																																		l: [
    																																																			{
    																																																				typ: 20
    																																																			},
    																																																			{
    																																																				typ: 1,
    																																																				val: "media-toggle-closed-captions-button"
    																																																			},
    																																																			{
    																																																				typ: 20
    																																																			}
    																																																		],
    																																																		r: [
    																																																			{
    																																																				typ: 27,
    																																																				l: [
    																																																					{
    																																																						typ: 20
    																																																					},
    																																																					{
    																																																						typ: 1,
    																																																						val: "media-volume-slider"
    																																																					},
    																																																					{
    																																																						typ: 20
    																																																					}
    																																																				],
    																																																				r: [
    																																																					{
    																																																						typ: 27,
    																																																						l: [
    																																																							{
    																																																								typ: 20
    																																																							},
    																																																							{
    																																																								typ: 1,
    																																																								val: "media-volume-slider-container"
    																																																							},
    																																																							{
    																																																								typ: 20
    																																																							}
    																																																						],
    																																																						r: [
    																																																							{
    																																																								typ: 27,
    																																																								l: [
    																																																									{
    																																																										typ: 20
    																																																									},
    																																																									{
    																																																										typ: 1,
    																																																										val: "media-volume-sliderthumb"
    																																																									},
    																																																									{
    																																																										typ: 20
    																																																									}
    																																																								],
    																																																								r: [
    																																																									{
    																																																										typ: 27,
    																																																										l: [
    																																																											{
    																																																												typ: 20
    																																																											},
    																																																											{
    																																																												typ: 1,
    																																																												val: "menulist"
    																																																											},
    																																																											{
    																																																												typ: 20
    																																																											}
    																																																										],
    																																																										r: [
    																																																											{
    																																																												typ: 27,
    																																																												l: [
    																																																													{
    																																																														typ: 20
    																																																													},
    																																																													{
    																																																														typ: 1,
    																																																														val: "menulist-button"
    																																																													},
    																																																													{
    																																																														typ: 20
    																																																													}
    																																																												],
    																																																												r: [
    																																																													{
    																																																														typ: 27,
    																																																														l: [
    																																																															{
    																																																																typ: 20
    																																																															},
    																																																															{
    																																																																typ: 1,
    																																																																val: "menulist-text"
    																																																															},
    																																																															{
    																																																																typ: 20
    																																																															}
    																																																														],
    																																																														r: [
    																																																															{
    																																																																typ: 27,
    																																																																l: [
    																																																																	{
    																																																																		typ: 20
    																																																																	},
    																																																																	{
    																																																																		typ: 1,
    																																																																		val: "menulist-textfield"
    																																																																	},
    																																																																	{
    																																																																		typ: 20
    																																																																	}
    																																																																],
    																																																																r: [
    																																																																	{
    																																																																		typ: 27,
    																																																																		l: [
    																																																																			{
    																																																																				typ: 20
    																																																																			},
    																																																																			{
    																																																																				typ: 1,
    																																																																				val: "meter"
    																																																																			},
    																																																																			{
    																																																																				typ: 20
    																																																																			}
    																																																																		],
    																																																																		r: [
    																																																																			{
    																																																																				typ: 27,
    																																																																				l: [
    																																																																					{
    																																																																						typ: 20
    																																																																					},
    																																																																					{
    																																																																						typ: 1,
    																																																																						val: "progress-bar"
    																																																																					},
    																																																																					{
    																																																																						typ: 20
    																																																																					}
    																																																																				],
    																																																																				r: [
    																																																																					{
    																																																																						typ: 27,
    																																																																						l: [
    																																																																							{
    																																																																								typ: 20
    																																																																							},
    																																																																							{
    																																																																								typ: 1,
    																																																																								val: "progress-bar-value"
    																																																																							},
    																																																																							{
    																																																																								typ: 20
    																																																																							}
    																																																																						],
    																																																																						r: [
    																																																																							{
    																																																																								typ: 27,
    																																																																								l: [
    																																																																									{
    																																																																										typ: 20
    																																																																									},
    																																																																									{
    																																																																										typ: 1,
    																																																																										val: "push-button"
    																																																																									},
    																																																																									{
    																																																																										typ: 20
    																																																																									}
    																																																																								],
    																																																																								r: [
    																																																																									{
    																																																																										typ: 27,
    																																																																										l: [
    																																																																											{
    																																																																												typ: 20
    																																																																											},
    																																																																											{
    																																																																												typ: 1,
    																																																																												val: "radio"
    																																																																											},
    																																																																											{
    																																																																												typ: 20
    																																																																											}
    																																																																										],
    																																																																										r: [
    																																																																											{
    																																																																												typ: 27,
    																																																																												l: [
    																																																																													{
    																																																																														typ: 20
    																																																																													},
    																																																																													{
    																																																																														typ: 1,
    																																																																														val: "searchfield"
    																																																																													},
    																																																																													{
    																																																																														typ: 20
    																																																																													}
    																																																																												],
    																																																																												r: [
    																																																																													{
    																																																																														typ: 27,
    																																																																														l: [
    																																																																															{
    																																																																																typ: 20
    																																																																															},
    																																																																															{
    																																																																																typ: 1,
    																																																																																val: "searchfield-cancel-button"
    																																																																															},
    																																																																															{
    																																																																																typ: 20
    																																																																															}
    																																																																														],
    																																																																														r: [
    																																																																															{
    																																																																																typ: 27,
    																																																																																l: [
    																																																																																	{
    																																																																																		typ: 20
    																																																																																	},
    																																																																																	{
    																																																																																		typ: 1,
    																																																																																		val: "searchfield-decoration"
    																																																																																	},
    																																																																																	{
    																																																																																		typ: 20
    																																																																																	}
    																																																																																],
    																																																																																r: [
    																																																																																	{
    																																																																																		typ: 27,
    																																																																																		l: [
    																																																																																			{
    																																																																																				typ: 20
    																																																																																			},
    																																																																																			{
    																																																																																				typ: 1,
    																																																																																				val: "searchfield-results-button"
    																																																																																			},
    																																																																																			{
    																																																																																				typ: 20
    																																																																																			}
    																																																																																		],
    																																																																																		r: [
    																																																																																			{
    																																																																																				typ: 27,
    																																																																																				l: [
    																																																																																					{
    																																																																																						typ: 20
    																																																																																					},
    																																																																																					{
    																																																																																						typ: 1,
    																																																																																						val: "searchfield-results-decoration"
    																																																																																					},
    																																																																																					{
    																																																																																						typ: 20
    																																																																																					}
    																																																																																				],
    																																																																																				r: [
    																																																																																					{
    																																																																																						typ: 27,
    																																																																																						l: [
    																																																																																							{
    																																																																																								typ: 20
    																																																																																							},
    																																																																																							{
    																																																																																								typ: 1,
    																																																																																								val: "slider-horizontal"
    																																																																																							},
    																																																																																							{
    																																																																																								typ: 20
    																																																																																							}
    																																																																																						],
    																																																																																						r: [
    																																																																																							{
    																																																																																								typ: 27,
    																																																																																								l: [
    																																																																																									{
    																																																																																										typ: 20
    																																																																																									},
    																																																																																									{
    																																																																																										typ: 1,
    																																																																																										val: "slider-vertical"
    																																																																																									},
    																																																																																									{
    																																																																																										typ: 20
    																																																																																									}
    																																																																																								],
    																																																																																								r: [
    																																																																																									{
    																																																																																										typ: 27,
    																																																																																										l: [
    																																																																																											{
    																																																																																												typ: 20
    																																																																																											},
    																																																																																											{
    																																																																																												typ: 1,
    																																																																																												val: "sliderthumb-horizontal"
    																																																																																											},
    																																																																																											{
    																																																																																												typ: 20
    																																																																																											}
    																																																																																										],
    																																																																																										r: [
    																																																																																											{
    																																																																																												typ: 27,
    																																																																																												l: [
    																																																																																													{
    																																																																																														typ: 20
    																																																																																													},
    																																																																																													{
    																																																																																														typ: 1,
    																																																																																														val: "sliderthumb-vertical"
    																																																																																													},
    																																																																																													{
    																																																																																														typ: 20
    																																																																																													}
    																																																																																												],
    																																																																																												r: [
    																																																																																													{
    																																																																																														typ: 27,
    																																																																																														l: [
    																																																																																															{
    																																																																																																typ: 20
    																																																																																															},
    																																																																																															{
    																																																																																																typ: 1,
    																																																																																																val: "square-button"
    																																																																																															},
    																																																																																															{
    																																																																																																typ: 20
    																																																																																															}
    																																																																																														],
    																																																																																														r: [
    																																																																																															{
    																																																																																																typ: 27,
    																																																																																																l: [
    																																																																																																	{
    																																																																																																		typ: 20
    																																																																																																	},
    																																																																																																	{
    																																																																																																		typ: 1,
    																																																																																																		val: "textarea"
    																																																																																																	},
    																																																																																																	{
    																																																																																																		typ: 20
    																																																																																																	}
    																																																																																																],
    																																																																																																r: [
    																																																																																																	{
    																																																																																																		typ: 27,
    																																																																																																		l: [
    																																																																																																			{
    																																																																																																				typ: 20
    																																																																																																			},
    																																																																																																			{
    																																																																																																				typ: 1,
    																																																																																																				val: "textfield"
    																																																																																																			},
    																																																																																																			{
    																																																																																																				typ: 20
    																																																																																																			}
    																																																																																																		],
    																																																																																																		r: [
    																																																																																																			{
    																																																																																																				typ: 20
    																																																																																																			},
    																																																																																																			{
    																																																																																																				typ: 1,
    																																																																																																				val: "-apple-pay-button"
    																																																																																																			}
    																																																																																																		]
    																																																																																																	}
    																																																																																																]
    																																																																																															}
    																																																																																														]
    																																																																																													}
    																																																																																												]
    																																																																																											}
    																																																																																										]
    																																																																																									}
    																																																																																								]
    																																																																																							}
    																																																																																						]
    																																																																																					}
    																																																																																				]
    																																																																																			}
    																																																																																		]
    																																																																																	}
    																																																																																]
    																																																																															}
    																																																																														]
    																																																																													}
    																																																																												]
    																																																																											}
    																																																																										]
    																																																																									}
    																																																																								]
    																																																																							}
    																																																																						]
    																																																																					}
    																																																																				]
    																																																																			}
    																																																																		]
    																																																																	}
    																																																																]
    																																																															}
    																																																														]
    																																																													}
    																																																												]
    																																																											}
    																																																										]
    																																																									}
    																																																								]
    																																																							}
    																																																						]
    																																																					}
    																																																				]
    																																																			}
    																																																		]
    																																																	}
    																																																]
    																																															}
    																																														]
    																																													}
    																																												]
    																																											}
    																																										]
    																																									}
    																																								]
    																																							}
    																																						]
    																																					}
    																																				]
    																																			}
    																																		]
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-webkit-border-before": {
    		syntax: "<'border-width'> || <'border-style'> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "border-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-webkit-border-before-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-webkit-border-before-style": {
    		syntax: "<'border-style'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-style"
    			}
    		]
    	},
    	"-webkit-border-before-width": {
    		syntax: "<'border-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-width"
    			}
    		]
    	},
    	"-webkit-box-reflect": {
    		syntax: "[ above | below | right | left ]? <length>? <image>?",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "above"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "below"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "right"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "left"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "length",
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "image",
    				isOptional: true
    			}
    		]
    	},
    	"-webkit-line-clamp": {
    		syntax: "none | <integer>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "integer"
    					}
    				]
    			}
    		]
    	},
    	"-webkit-mask": {
    		syntax: "[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "mask-reference"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "position"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 24
    											},
    											{
    												typ: 2,
    												val: "bg-size"
    											}
    										],
    										isOptional: true
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "repeat-style"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 22,
    														chi: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "box"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "border"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "padding"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "content"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "text"
    																							},
    																							{
    																								typ: 20
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 22,
    														chi: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "box"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "border"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "padding"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "content"
    																					},
    																					{
    																						typ: 20
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-attachment": {
    		syntax: "<attachment>#",
    		ast: [
    			{
    				typ: 2,
    				val: "attachment",
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-clip": {
    		syntax: "[ <box> | border | padding | content | text ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "box"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "border"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "padding"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "text"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-composite": {
    		syntax: "<composite-style>#",
    		ast: [
    			{
    				typ: 2,
    				val: "composite-style",
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-image": {
    		syntax: "<mask-reference>#",
    		ast: [
    			{
    				typ: 2,
    				val: "mask-reference",
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-origin": {
    		syntax: "[ <box> | border | padding | content ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "box"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "border"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "padding"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "content"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-position": {
    		syntax: "<position>#",
    		ast: [
    			{
    				typ: 2,
    				val: "position",
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-position-x": {
    		syntax: "[ <length-percentage> | left | center | right ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "left"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "center"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "right"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-position-y": {
    		syntax: "[ <length-percentage> | top | center | bottom ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "top"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "center"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "bottom"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-repeat": {
    		syntax: "<repeat-style>#",
    		ast: [
    			{
    				typ: 2,
    				val: "repeat-style",
    				isList: true
    			}
    		]
    	},
    	"-webkit-mask-repeat-x": {
    		syntax: "repeat | no-repeat | space | round",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "repeat"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "no-repeat"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "space"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "round"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-webkit-mask-repeat-y": {
    		syntax: "repeat | no-repeat | space | round",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "repeat"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "no-repeat"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "space"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "round"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"-webkit-mask-size": {
    		syntax: "<bg-size>#",
    		ast: [
    			{
    				typ: 2,
    				val: "bg-size",
    				isList: true
    			}
    		]
    	},
    	"-webkit-overflow-scrolling": {
    		syntax: "auto | touch",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "touch"
    					}
    				]
    			}
    		]
    	},
    	"-webkit-tap-highlight-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-webkit-text-fill-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-webkit-text-stroke": {
    		syntax: "<length> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color"
    					}
    				]
    			}
    		]
    	},
    	"-webkit-text-stroke-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"-webkit-text-stroke-width": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"-webkit-touch-callout": {
    		syntax: "default | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "default"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"-webkit-user-modify": {
    		syntax: "read-only | read-write | read-write-plaintext-only",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "read-only"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "read-write"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "read-write-plaintext-only"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"accent-color": {
    		syntax: "auto | <color>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color"
    					}
    				]
    			}
    		]
    	},
    	"align-content": {
    		syntax: "normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "baseline-position"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "content-distribution"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "overflow-position",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "content-position"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"align-items": {
    		syntax: "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "stretch"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "baseline-position"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 2,
    												val: "overflow-position",
    												isOptional: true
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "self-position"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"align-self": {
    		syntax: "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "stretch"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "baseline-position"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "overflow-position",
    												isOptional: true
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "self-position"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"align-tracks": {
    		syntax: "[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "baseline-position"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "content-distribution"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "overflow-position",
    												isOptional: true
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "content-position"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	all: {
    		syntax: "initial | inherit | unset | revert | revert-layer",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "initial"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "inherit"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "unset"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "revert"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "revert-layer"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"anchor-name": {
    		syntax: "none | <dashed-ident>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "dashed-ident",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"anchor-scope": {
    		syntax: "none | all | <dashed-ident>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "all"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "dashed-ident",
    								isList: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	animation: {
    		syntax: "<single-animation>#",
    		ast: [
    			{
    				typ: 2,
    				val: "single-animation",
    				isList: true
    			}
    		]
    	},
    	"animation-composition": {
    		syntax: "<single-animation-composition>#",
    		ast: [
    			{
    				typ: 2,
    				val: "single-animation-composition",
    				isList: true
    			}
    		]
    	},
    	"animation-delay": {
    		syntax: "<time>#",
    		ast: [
    			{
    				typ: 2,
    				val: "time",
    				isList: true
    			}
    		]
    	},
    	"animation-direction": {
    		syntax: "<single-animation-direction>#",
    		ast: [
    			{
    				typ: 2,
    				val: "single-animation-direction",
    				isList: true
    			}
    		]
    	},
    	"animation-duration": {
    		syntax: "<time>#",
    		ast: [
    			{
    				typ: 2,
    				val: "time",
    				isList: true
    			}
    		]
    	},
    	"animation-fill-mode": {
    		syntax: "<single-animation-fill-mode>#",
    		ast: [
    			{
    				typ: 2,
    				val: "single-animation-fill-mode",
    				isList: true
    			}
    		]
    	},
    	"animation-iteration-count": {
    		syntax: "<single-animation-iteration-count>#",
    		ast: [
    			{
    				typ: 2,
    				val: "single-animation-iteration-count",
    				isList: true
    			}
    		]
    	},
    	"animation-name": {
    		syntax: "[ none | <keyframes-name> ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "keyframes-name"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"animation-play-state": {
    		syntax: "<single-animation-play-state>#",
    		ast: [
    			{
    				typ: 2,
    				val: "single-animation-play-state",
    				isList: true
    			}
    		]
    	},
    	"animation-range": {
    		syntax: "[ <'animation-range-start'> <'animation-range-end'>? ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 3,
    						val: "animation-range-start"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "animation-range-end",
    						isOptional: true
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"animation-range-end": {
    		syntax: "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "timeline-range-name"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage",
    										isOptional: true
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"animation-range-start": {
    		syntax: "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "timeline-range-name"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage",
    										isOptional: true
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"animation-timing-function": {
    		syntax: "<easing-function>#",
    		ast: [
    			{
    				typ: 2,
    				val: "easing-function",
    				isList: true
    			}
    		]
    	},
    	"animation-timeline": {
    		syntax: "<single-animation-timeline>#",
    		ast: [
    			{
    				typ: 2,
    				val: "single-animation-timeline",
    				isList: true
    			}
    		]
    	},
    	appearance: {
    		syntax: "none | auto | textfield | menulist-button | <compat-auto>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "textfield"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "menulist-button"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "compat-auto"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"aspect-ratio": {
    		syntax: "auto | <ratio>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "ratio"
    					}
    				]
    			}
    		]
    	},
    	azimuth: {
    		syntax: "<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "angle"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "left-side"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "far-left"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "left"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "center-left"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "center"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "center-right"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "right"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "far-right"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "right-side"
    																													},
    																													{
    																														typ: 20
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "behind"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "leftwards"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "rightwards"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"backdrop-filter": {
    		syntax: "none | <filter-function-list>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "filter-function-list"
    					}
    				]
    			}
    		]
    	},
    	"backface-visibility": {
    		syntax: "visible | hidden",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "visible"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "hidden"
    					}
    				]
    			}
    		]
    	},
    	background: {
    		syntax: "[ <bg-layer> , ]* <final-bg-layer>",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "bg-layer"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					}
    				],
    				isRepeatable: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "final-bg-layer"
    			}
    		]
    	},
    	"background-attachment": {
    		syntax: "<attachment>#",
    		ast: [
    			{
    				typ: 2,
    				val: "attachment",
    				isList: true
    			}
    		]
    	},
    	"background-blend-mode": {
    		syntax: "<blend-mode>#",
    		ast: [
    			{
    				typ: 2,
    				val: "blend-mode",
    				isList: true
    			}
    		]
    	},
    	"background-clip": {
    		syntax: "<box>#",
    		ast: [
    			{
    				typ: 2,
    				val: "box",
    				isList: true
    			}
    		]
    	},
    	"background-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"background-image": {
    		syntax: "<bg-image>#",
    		ast: [
    			{
    				typ: 2,
    				val: "bg-image",
    				isList: true
    			}
    		]
    	},
    	"background-origin": {
    		syntax: "<box>#",
    		ast: [
    			{
    				typ: 2,
    				val: "box",
    				isList: true
    			}
    		]
    	},
    	"background-position": {
    		syntax: "<bg-position>#",
    		ast: [
    			{
    				typ: 2,
    				val: "bg-position",
    				isList: true
    			}
    		]
    	},
    	"background-position-x": {
    		syntax: "[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "center"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "left"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "right"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "x-start"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "x-end"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										],
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage",
    										isOptional: true
    									}
    								],
    								isRepeatableGroup: true
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"background-position-y": {
    		syntax: "[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "center"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "top"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "bottom"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "y-start"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "y-end"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										],
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage",
    										isOptional: true
    									}
    								],
    								isRepeatableGroup: true
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"background-repeat": {
    		syntax: "<repeat-style>#",
    		ast: [
    			{
    				typ: 2,
    				val: "repeat-style",
    				isList: true
    			}
    		]
    	},
    	"background-size": {
    		syntax: "<bg-size>#",
    		ast: [
    			{
    				typ: 2,
    				val: "bg-size",
    				isList: true
    			}
    		]
    	},
    	"block-size": {
    		syntax: "<'width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "width"
    			}
    		]
    	},
    	border: {
    		syntax: "<line-width> || <line-style> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 2,
    						val: "line-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "line-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-block": {
    		syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "border-top-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-top-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-block-color": {
    		syntax: "<'border-top-color'>{1,2}",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-color",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-block-style": {
    		syntax: "<'border-top-style'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-style"
    			}
    		]
    	},
    	"border-block-width": {
    		syntax: "<'border-top-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-width"
    			}
    		]
    	},
    	"border-block-end": {
    		syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "border-top-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-top-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-block-end-color": {
    		syntax: "<'border-top-color'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-color"
    			}
    		]
    	},
    	"border-block-end-style": {
    		syntax: "<'border-top-style'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-style"
    			}
    		]
    	},
    	"border-block-end-width": {
    		syntax: "<'border-top-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-width"
    			}
    		]
    	},
    	"border-block-start": {
    		syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "border-top-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-top-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-block-start-color": {
    		syntax: "<'border-top-color'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-color"
    			}
    		]
    	},
    	"border-block-start-style": {
    		syntax: "<'border-top-style'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-style"
    			}
    		]
    	},
    	"border-block-start-width": {
    		syntax: "<'border-top-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-width"
    			}
    		]
    	},
    	"border-bottom": {
    		syntax: "<line-width> || <line-style> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 2,
    						val: "line-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "line-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-bottom-color": {
    		syntax: "<'border-top-color'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-color"
    			}
    		]
    	},
    	"border-bottom-left-radius": {
    		syntax: "<length-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-bottom-right-radius": {
    		syntax: "<length-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-bottom-style": {
    		syntax: "<line-style>",
    		ast: [
    			{
    				typ: 2,
    				val: "line-style"
    			}
    		]
    	},
    	"border-bottom-width": {
    		syntax: "<line-width>",
    		ast: [
    			{
    				typ: 2,
    				val: "line-width"
    			}
    		]
    	},
    	"border-collapse": {
    		syntax: "collapse | separate",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "collapse"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "separate"
    					}
    				]
    			}
    		]
    	},
    	"border-color": {
    		syntax: "<color>{1,4}",
    		ast: [
    			{
    				typ: 2,
    				val: "color",
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"border-end-end-radius": {
    		syntax: "<length-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-end-start-radius": {
    		syntax: "<length-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-image": {
    		syntax: "<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "border-image-source"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-image-slice"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 24
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 3,
    												val: "border-image-width"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 24
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 3,
    												val: "border-image-width",
    												isOptional: true
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 24
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 3,
    												val: "border-image-outset"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-image-repeat"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-image-outset": {
    		syntax: "[ <length> | <number> ]{1,4}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "number"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"border-image-repeat": {
    		syntax: "[ stretch | repeat | round | space ]{1,2}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "stretch"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "repeat"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "round"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "space"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-image-slice": {
    		syntax: "<number-percentage>{1,4} && fill?",
    		ast: [
    			{
    				typ: 29,
    				l: [
    					{
    						typ: 2,
    						val: "number-percentage",
    						occurence: {
    							min: 1,
    							max: 4
    						}
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "fill",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"border-image-source": {
    		syntax: "none | <image>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "image"
    					}
    				]
    			}
    		]
    	},
    	"border-image-width": {
    		syntax: "[ <length-percentage> | <number> | auto ]{1,4}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "number"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"border-inline": {
    		syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "border-top-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-top-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-inline-end": {
    		syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "border-top-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-top-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-inline-color": {
    		syntax: "<'border-top-color'>{1,2}",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-color",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-inline-style": {
    		syntax: "<'border-top-style'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-style"
    			}
    		]
    	},
    	"border-inline-width": {
    		syntax: "<'border-top-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-width"
    			}
    		]
    	},
    	"border-inline-end-color": {
    		syntax: "<'border-top-color'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-color"
    			}
    		]
    	},
    	"border-inline-end-style": {
    		syntax: "<'border-top-style'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-style"
    			}
    		]
    	},
    	"border-inline-end-width": {
    		syntax: "<'border-top-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-width"
    			}
    		]
    	},
    	"border-inline-start": {
    		syntax: "<'border-top-width'> || <'border-top-style'> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "border-top-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-top-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-inline-start-color": {
    		syntax: "<'border-top-color'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-color"
    			}
    		]
    	},
    	"border-inline-start-style": {
    		syntax: "<'border-top-style'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-style"
    			}
    		]
    	},
    	"border-inline-start-width": {
    		syntax: "<'border-top-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-top-width"
    			}
    		]
    	},
    	"border-left": {
    		syntax: "<line-width> || <line-style> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 2,
    						val: "line-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "line-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-left-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"border-left-style": {
    		syntax: "<line-style>",
    		ast: [
    			{
    				typ: 2,
    				val: "line-style"
    			}
    		]
    	},
    	"border-left-width": {
    		syntax: "<line-width>",
    		ast: [
    			{
    				typ: 2,
    				val: "line-width"
    			}
    		]
    	},
    	"border-radius": {
    		syntax: "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 24
    					},
    					{
    						typ: 2,
    						val: "length-percentage",
    						occurence: {
    							min: 1,
    							max: 4
    						}
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"border-right": {
    		syntax: "<line-width> || <line-style> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 2,
    						val: "line-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "line-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-right-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"border-right-style": {
    		syntax: "<line-style>",
    		ast: [
    			{
    				typ: 2,
    				val: "line-style"
    			}
    		]
    	},
    	"border-right-width": {
    		syntax: "<line-width>",
    		ast: [
    			{
    				typ: 2,
    				val: "line-width"
    			}
    		]
    	},
    	"border-spacing": {
    		syntax: "<length> <length>?",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "length",
    				isOptional: true
    			}
    		]
    	},
    	"border-start-end-radius": {
    		syntax: "<length-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-start-start-radius": {
    		syntax: "<length-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-style": {
    		syntax: "<line-style>{1,4}",
    		ast: [
    			{
    				typ: 2,
    				val: "line-style",
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"border-top": {
    		syntax: "<line-width> || <line-style> || <color>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 2,
    						val: "line-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "line-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"border-top-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"border-top-left-radius": {
    		syntax: "<length-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-top-right-radius": {
    		syntax: "<length-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"border-top-style": {
    		syntax: "<line-style>",
    		ast: [
    			{
    				typ: 2,
    				val: "line-style"
    			}
    		]
    	},
    	"border-top-width": {
    		syntax: "<line-width>",
    		ast: [
    			{
    				typ: 2,
    				val: "line-width"
    			}
    		]
    	},
    	"border-width": {
    		syntax: "<line-width>{1,4}",
    		ast: [
    			{
    				typ: 2,
    				val: "line-width",
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	bottom: {
    		syntax: "<length> | <percentage> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"box-align": {
    		syntax: "start | center | end | baseline | stretch",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "start"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "center"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "end"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "baseline"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "stretch"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"box-decoration-break": {
    		syntax: "slice | clone",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "slice"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "clone"
    					}
    				]
    			}
    		]
    	},
    	"box-direction": {
    		syntax: "normal | reverse | inherit",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "reverse"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "inherit"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"box-flex": {
    		syntax: "<number>",
    		ast: [
    			{
    				typ: 2,
    				val: "number"
    			}
    		]
    	},
    	"box-flex-group": {
    		syntax: "<integer>",
    		ast: [
    			{
    				typ: 2,
    				val: "integer"
    			}
    		]
    	},
    	"box-lines": {
    		syntax: "single | multiple",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "single"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "multiple"
    					}
    				]
    			}
    		]
    	},
    	"box-ordinal-group": {
    		syntax: "<integer>",
    		ast: [
    			{
    				typ: 2,
    				val: "integer"
    			}
    		]
    	},
    	"box-orient": {
    		syntax: "horizontal | vertical | inline-axis | block-axis | inherit",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "horizontal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "vertical"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "inline-axis"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "block-axis"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "inherit"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"box-pack": {
    		syntax: "start | center | end | justify",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "start"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "center"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "end"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "justify"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"box-shadow": {
    		syntax: "none | <shadow>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "shadow",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"box-sizing": {
    		syntax: "content-box | border-box",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "content-box"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "border-box"
    					}
    				]
    			}
    		]
    	},
    	"break-after": {
    		syntax: "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "avoid"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "always"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "all"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "avoid-page"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "page"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "left"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "right"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "recto"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "verso"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "avoid-column"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "column"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "avoid-region"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "region"
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"break-before": {
    		syntax: "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "avoid"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "always"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "all"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "avoid-page"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "page"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "left"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "right"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "recto"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "verso"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "avoid-column"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "column"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "avoid-region"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "region"
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"break-inside": {
    		syntax: "auto | avoid | avoid-page | avoid-column | avoid-region",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "avoid"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "avoid-page"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "avoid-column"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "avoid-region"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"caption-side": {
    		syntax: "top | bottom | block-start | block-end | inline-start | inline-end",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "top"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "bottom"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "block-start"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "block-end"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "inline-start"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "inline-end"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	caret: {
    		syntax: "<'caret-color'> || <'caret-shape'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "caret-color"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "caret-shape"
    					}
    				]
    			}
    		]
    	},
    	"caret-color": {
    		syntax: "auto | <color>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color"
    					}
    				]
    			}
    		]
    	},
    	"caret-shape": {
    		syntax: "auto | bar | block | underscore",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "bar"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "block"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "underscore"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	clear: {
    		syntax: "none | left | right | both | inline-start | inline-end",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "left"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "right"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "both"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "inline-start"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "inline-end"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	clip: {
    		syntax: "<shape> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "shape"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "auto"
    					}
    				]
    			}
    		]
    	},
    	"clip-path": {
    		syntax: "<clip-source> | [ <basic-shape> || <geometry-box> ] | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "clip-source"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "basic-shape"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "geometry-box"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"clip-rule": {
    		syntax: "nonzero | evenodd",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "nonzero"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "evenodd"
    					}
    				]
    			}
    		]
    	},
    	color: {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"color-interpolation-filters": {
    		syntax: "auto | sRGB | linearRGB",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "sRGB"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "linearRGB"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"color-scheme": {
    		syntax: "normal | [ light | dark | <custom-ident> ]+ && only?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 29,
    						l: [
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "light"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "dark"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "custom-ident"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								],
    								atLeastOnce: true
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "only",
    								isOptional: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"column-count": {
    		syntax: "<integer> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "integer"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "auto"
    					}
    				]
    			}
    		]
    	},
    	"column-fill": {
    		syntax: "auto | balance | balance-all",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "balance"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "balance-all"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"column-gap": {
    		syntax: "normal | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"column-rule": {
    		syntax: "<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "column-rule-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "column-rule-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "column-rule-color"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"column-rule-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"column-rule-style": {
    		syntax: "<'border-style'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-style"
    			}
    		]
    	},
    	"column-rule-width": {
    		syntax: "<'border-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "border-width"
    			}
    		]
    	},
    	"column-span": {
    		syntax: "none | all",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "all"
    					}
    				]
    			}
    		]
    	},
    	"column-width": {
    		syntax: "<length> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "auto"
    					}
    				]
    			}
    		]
    	},
    	columns: {
    		syntax: "<'column-width'> || <'column-count'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "column-width"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "column-count"
    					}
    				]
    			}
    		]
    	},
    	contain: {
    		syntax: "none | strict | content | [ [ size || inline-size ] || layout || style || paint ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "strict"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "content"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 22,
    														chi: [
    															{
    																typ: 28,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "size"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "inline-size"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "layout"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 28,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "style"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "paint"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"contain-intrinsic-size": {
    		syntax: "[ auto? [ none | <length> ] ]{1,2}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 1,
    						val: "auto",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"contain-intrinsic-block-size": {
    		syntax: "auto? [ none | <length> ]",
    		ast: [
    			{
    				typ: 1,
    				val: "auto",
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"contain-intrinsic-height": {
    		syntax: "auto? [ none | <length> ]",
    		ast: [
    			{
    				typ: 1,
    				val: "auto",
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"contain-intrinsic-inline-size": {
    		syntax: "auto? [ none | <length> ]",
    		ast: [
    			{
    				typ: 1,
    				val: "auto",
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"contain-intrinsic-width": {
    		syntax: "auto? [ none | <length> ]",
    		ast: [
    			{
    				typ: 1,
    				val: "auto",
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	container: {
    		syntax: "<'container-name'> [ / <'container-type'> ]?",
    		ast: [
    			{
    				typ: 3,
    				val: "container-name"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 24
    					},
    					{
    						typ: 3,
    						val: "container-type"
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"container-name": {
    		syntax: "none | <custom-ident>+",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "custom-ident",
    						atLeastOnce: true
    					}
    				]
    			}
    		]
    	},
    	"container-type": {
    		syntax: "normal | size | inline-size",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "size"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "inline-size"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	content: {
    		syntax: "normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "content-replacement"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "content-list"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "string"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "counter"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										],
    										atLeastOnce: true
    									}
    								],
    								isOptional: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"content-visibility": {
    		syntax: "visible | auto | hidden",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "visible"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "hidden"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"counter-increment": {
    		syntax: "[ <counter-name> <integer>? ]+ | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "counter-name"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "integer",
    								isOptional: true
    							}
    						],
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"counter-reset": {
    		syntax: "[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "counter-name"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "integer",
    										isOptional: true
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "reversed-counter-name"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "integer",
    										isOptional: true
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"counter-set": {
    		syntax: "[ <counter-name> <integer>? ]+ | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "counter-name"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "integer",
    								isOptional: true
    							}
    						],
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	cursor: {
    		syntax: "[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "url"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 2,
    										val: "x"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "y"
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 10
    							}
    						],
    						isRepeatable: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "default"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "none"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "context-menu"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "help"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "pointer"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "progress"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "wait"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "cell"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "crosshair"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "text"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 27,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 1,
    																																val: "vertical-text"
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 27,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "alias"
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 27,
    																																		l: [
    																																			{
    																																				typ: 20
    																																			},
    																																			{
    																																				typ: 1,
    																																				val: "copy"
    																																			},
    																																			{
    																																				typ: 20
    																																			}
    																																		],
    																																		r: [
    																																			{
    																																				typ: 27,
    																																				l: [
    																																					{
    																																						typ: 20
    																																					},
    																																					{
    																																						typ: 1,
    																																						val: "move"
    																																					},
    																																					{
    																																						typ: 20
    																																					}
    																																				],
    																																				r: [
    																																					{
    																																						typ: 27,
    																																						l: [
    																																							{
    																																								typ: 20
    																																							},
    																																							{
    																																								typ: 1,
    																																								val: "no-drop"
    																																							},
    																																							{
    																																								typ: 20
    																																							}
    																																						],
    																																						r: [
    																																							{
    																																								typ: 27,
    																																								l: [
    																																									{
    																																										typ: 20
    																																									},
    																																									{
    																																										typ: 1,
    																																										val: "not-allowed"
    																																									},
    																																									{
    																																										typ: 20
    																																									}
    																																								],
    																																								r: [
    																																									{
    																																										typ: 27,
    																																										l: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 1,
    																																												val: "e-resize"
    																																											},
    																																											{
    																																												typ: 20
    																																											}
    																																										],
    																																										r: [
    																																											{
    																																												typ: 27,
    																																												l: [
    																																													{
    																																														typ: 20
    																																													},
    																																													{
    																																														typ: 1,
    																																														val: "n-resize"
    																																													},
    																																													{
    																																														typ: 20
    																																													}
    																																												],
    																																												r: [
    																																													{
    																																														typ: 27,
    																																														l: [
    																																															{
    																																																typ: 20
    																																															},
    																																															{
    																																																typ: 1,
    																																																val: "ne-resize"
    																																															},
    																																															{
    																																																typ: 20
    																																															}
    																																														],
    																																														r: [
    																																															{
    																																																typ: 27,
    																																																l: [
    																																																	{
    																																																		typ: 20
    																																																	},
    																																																	{
    																																																		typ: 1,
    																																																		val: "nw-resize"
    																																																	},
    																																																	{
    																																																		typ: 20
    																																																	}
    																																																],
    																																																r: [
    																																																	{
    																																																		typ: 27,
    																																																		l: [
    																																																			{
    																																																				typ: 20
    																																																			},
    																																																			{
    																																																				typ: 1,
    																																																				val: "s-resize"
    																																																			},
    																																																			{
    																																																				typ: 20
    																																																			}
    																																																		],
    																																																		r: [
    																																																			{
    																																																				typ: 27,
    																																																				l: [
    																																																					{
    																																																						typ: 20
    																																																					},
    																																																					{
    																																																						typ: 1,
    																																																						val: "se-resize"
    																																																					},
    																																																					{
    																																																						typ: 20
    																																																					}
    																																																				],
    																																																				r: [
    																																																					{
    																																																						typ: 27,
    																																																						l: [
    																																																							{
    																																																								typ: 20
    																																																							},
    																																																							{
    																																																								typ: 1,
    																																																								val: "sw-resize"
    																																																							},
    																																																							{
    																																																								typ: 20
    																																																							}
    																																																						],
    																																																						r: [
    																																																							{
    																																																								typ: 27,
    																																																								l: [
    																																																									{
    																																																										typ: 20
    																																																									},
    																																																									{
    																																																										typ: 1,
    																																																										val: "w-resize"
    																																																									},
    																																																									{
    																																																										typ: 20
    																																																									}
    																																																								],
    																																																								r: [
    																																																									{
    																																																										typ: 27,
    																																																										l: [
    																																																											{
    																																																												typ: 20
    																																																											},
    																																																											{
    																																																												typ: 1,
    																																																												val: "ew-resize"
    																																																											},
    																																																											{
    																																																												typ: 20
    																																																											}
    																																																										],
    																																																										r: [
    																																																											{
    																																																												typ: 27,
    																																																												l: [
    																																																													{
    																																																														typ: 20
    																																																													},
    																																																													{
    																																																														typ: 1,
    																																																														val: "ns-resize"
    																																																													},
    																																																													{
    																																																														typ: 20
    																																																													}
    																																																												],
    																																																												r: [
    																																																													{
    																																																														typ: 27,
    																																																														l: [
    																																																															{
    																																																																typ: 20
    																																																															},
    																																																															{
    																																																																typ: 1,
    																																																																val: "nesw-resize"
    																																																															},
    																																																															{
    																																																																typ: 20
    																																																															}
    																																																														],
    																																																														r: [
    																																																															{
    																																																																typ: 27,
    																																																																l: [
    																																																																	{
    																																																																		typ: 20
    																																																																	},
    																																																																	{
    																																																																		typ: 1,
    																																																																		val: "nwse-resize"
    																																																																	},
    																																																																	{
    																																																																		typ: 20
    																																																																	}
    																																																																],
    																																																																r: [
    																																																																	{
    																																																																		typ: 27,
    																																																																		l: [
    																																																																			{
    																																																																				typ: 20
    																																																																			},
    																																																																			{
    																																																																				typ: 1,
    																																																																				val: "col-resize"
    																																																																			},
    																																																																			{
    																																																																				typ: 20
    																																																																			}
    																																																																		],
    																																																																		r: [
    																																																																			{
    																																																																				typ: 27,
    																																																																				l: [
    																																																																					{
    																																																																						typ: 20
    																																																																					},
    																																																																					{
    																																																																						typ: 1,
    																																																																						val: "row-resize"
    																																																																					},
    																																																																					{
    																																																																						typ: 20
    																																																																					}
    																																																																				],
    																																																																				r: [
    																																																																					{
    																																																																						typ: 27,
    																																																																						l: [
    																																																																							{
    																																																																								typ: 20
    																																																																							},
    																																																																							{
    																																																																								typ: 1,
    																																																																								val: "all-scroll"
    																																																																							},
    																																																																							{
    																																																																								typ: 20
    																																																																							}
    																																																																						],
    																																																																						r: [
    																																																																							{
    																																																																								typ: 27,
    																																																																								l: [
    																																																																									{
    																																																																										typ: 20
    																																																																									},
    																																																																									{
    																																																																										typ: 1,
    																																																																										val: "zoom-in"
    																																																																									},
    																																																																									{
    																																																																										typ: 20
    																																																																									}
    																																																																								],
    																																																																								r: [
    																																																																									{
    																																																																										typ: 27,
    																																																																										l: [
    																																																																											{
    																																																																												typ: 20
    																																																																											},
    																																																																											{
    																																																																												typ: 1,
    																																																																												val: "zoom-out"
    																																																																											},
    																																																																											{
    																																																																												typ: 20
    																																																																											}
    																																																																										],
    																																																																										r: [
    																																																																											{
    																																																																												typ: 27,
    																																																																												l: [
    																																																																													{
    																																																																														typ: 20
    																																																																													},
    																																																																													{
    																																																																														typ: 1,
    																																																																														val: "grab"
    																																																																													},
    																																																																													{
    																																																																														typ: 20
    																																																																													}
    																																																																												],
    																																																																												r: [
    																																																																													{
    																																																																														typ: 20
    																																																																													},
    																																																																													{
    																																																																														typ: 1,
    																																																																														val: "grabbing"
    																																																																													},
    																																																																													{
    																																																																														typ: 20
    																																																																													}
    																																																																												]
    																																																																											}
    																																																																										]
    																																																																									}
    																																																																								]
    																																																																							}
    																																																																						]
    																																																																					}
    																																																																				]
    																																																																			}
    																																																																		]
    																																																																	}
    																																																																]
    																																																															}
    																																																														]
    																																																													}
    																																																												]
    																																																											}
    																																																										]
    																																																									}
    																																																								]
    																																																							}
    																																																						]
    																																																					}
    																																																				]
    																																																			}
    																																																		]
    																																																	}
    																																																]
    																																															}
    																																														]
    																																													}
    																																												]
    																																											}
    																																										]
    																																									}
    																																								]
    																																							}
    																																						]
    																																					}
    																																				]
    																																			}
    																																		]
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	d: {
    		syntax: "none | path(<string>)",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "path",
    						chi: [
    							{
    								typ: 2,
    								val: "string"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	cx: {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	cy: {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	direction: {
    		syntax: "ltr | rtl",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "ltr"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "rtl"
    					}
    				]
    			}
    		]
    	},
    	display: {
    		syntax: "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "display-outside"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "display-inside"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "display-listitem"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "display-internal"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "display-box"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "display-legacy"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"dominant-baseline": {
    		syntax: "auto | text-bottom | alphabetic | ideographic | middle | central | mathematical | hanging | text-top",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "text-bottom"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "alphabetic"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "ideographic"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "middle"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "central"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "mathematical"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "hanging"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "text-top"
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"empty-cells": {
    		syntax: "show | hide",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "show"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "hide"
    					}
    				]
    			}
    		]
    	},
    	"field-sizing": {
    		syntax: "content | fixed",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "content"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "fixed"
    					}
    				]
    			}
    		]
    	},
    	fill: {
    		syntax: "none | <color> | <url> [none | <color>]? | context-fill | context-stroke",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "url"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 1,
    														val: "none"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "color"
    													}
    												]
    											}
    										],
    										isOptional: true
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "context-fill"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "context-stroke"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"fill-opacity": {
    		syntax: "<alpha-value>",
    		ast: [
    			{
    				typ: 2,
    				val: "alpha-value"
    			}
    		]
    	},
    	"fill-rule": {
    		syntax: "nonzero | evenodd",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "nonzero"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "evenodd"
    					}
    				]
    			}
    		]
    	},
    	filter: {
    		syntax: "none | <filter-function-list>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "filter-function-list"
    					}
    				]
    			}
    		]
    	},
    	flex: {
    		syntax: "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "flex-grow"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "flex-shrink",
    										isOptional: true
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "flex-basis"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"flex-basis": {
    		syntax: "content | <'width'>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "content"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "width"
    					}
    				]
    			}
    		]
    	},
    	"flex-direction": {
    		syntax: "row | row-reverse | column | column-reverse",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "row"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "row-reverse"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "column"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "column-reverse"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"flex-flow": {
    		syntax: "<'flex-direction'> || <'flex-wrap'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "flex-direction"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "flex-wrap"
    					}
    				]
    			}
    		]
    	},
    	"flex-grow": {
    		syntax: "<number>",
    		ast: [
    			{
    				typ: 2,
    				val: "number"
    			}
    		]
    	},
    	"flex-shrink": {
    		syntax: "<number>",
    		ast: [
    			{
    				typ: 2,
    				val: "number"
    			}
    		]
    	},
    	"flex-wrap": {
    		syntax: "nowrap | wrap | wrap-reverse",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "nowrap"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "wrap"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "wrap-reverse"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	float: {
    		syntax: "left | right | none | inline-start | inline-end",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "left"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "right"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "inline-start"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "inline-end"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	font: {
    		syntax: "[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 3,
    												val: "font-style"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "font-variant-css21"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 3,
    																val: "font-weight"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 3,
    																val: "font-stretch"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "font-size"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 3,
    										val: "line-height"
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "font-family"
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "caption"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "icon"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "menu"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "message-box"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "small-caption"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "status-bar"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-family": {
    		syntax: "[ <family-name> | <generic-family> ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "family-name"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "generic-family"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"font-feature-settings": {
    		syntax: "normal | <feature-tag-value>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "feature-tag-value",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"font-kerning": {
    		syntax: "auto | normal | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-language-override": {
    		syntax: "normal | <string>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					}
    				]
    			}
    		]
    	},
    	"font-optical-sizing": {
    		syntax: "auto | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"font-palette": {
    		syntax: "normal | light | dark | <palette-identifier>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "light"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "dark"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "palette-identifier"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-variation-settings": {
    		syntax: "normal | [ <string> <number> ]#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "string"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "number"
    							}
    						],
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"font-size": {
    		syntax: "<absolute-size> | <relative-size> | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "absolute-size"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "relative-size"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-size-adjust": {
    		syntax: "none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "ex-height"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "cap-height"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "ch-width"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "ic-width"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "ic-height"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "from-font"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "number"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-smooth": {
    		syntax: "auto | never | always | <absolute-size> | <length>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "never"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "always"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "absolute-size"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "length"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-stretch": {
    		syntax: "<font-stretch-absolute>",
    		ast: [
    			{
    				typ: 2,
    				val: "font-stretch-absolute"
    			}
    		]
    	},
    	"font-style": {
    		syntax: "normal | italic | oblique <angle>?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "italic"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "oblique"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "angle",
    								isOptional: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-synthesis": {
    		syntax: "none | [ weight || style || small-caps || position]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "weight"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "style"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "small-caps"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "position"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-synthesis-position": {
    		syntax: "auto | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"font-synthesis-small-caps": {
    		syntax: "auto | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"font-synthesis-style": {
    		syntax: "auto | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"font-synthesis-weight": {
    		syntax: "auto | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"font-variant": {
    		syntax: "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "common-lig-values"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "discretionary-lig-values"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "historical-lig-values"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 28,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "contextual-alt-values"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 28,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 18,
    																				val: "stylistic",
    																				chi: [
    																					{
    																						typ: 2,
    																						val: "feature-value-name"
    																					}
    																				]
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 28,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "historical-forms"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 28,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 18,
    																								val: "styleset",
    																								chi: [
    																									{
    																										typ: 2,
    																										val: "feature-value-name",
    																										isList: true
    																									}
    																								]
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 28,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 18,
    																										val: "character-variant",
    																										chi: [
    																											{
    																												typ: 2,
    																												val: "feature-value-name",
    																												isList: true
    																											}
    																										]
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 28,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 18,
    																												val: "swash",
    																												chi: [
    																													{
    																														typ: 2,
    																														val: "feature-value-name"
    																													}
    																												]
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 28,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 18,
    																														val: "ornaments",
    																														chi: [
    																															{
    																																typ: 2,
    																																val: "feature-value-name"
    																															}
    																														]
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 28,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 18,
    																																val: "annotation",
    																																chi: [
    																																	{
    																																		typ: 2,
    																																		val: "feature-value-name"
    																																	}
    																																]
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 28,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 22,
    																																		chi: [
    																																			{
    																																				typ: 27,
    																																				l: [
    																																					{
    																																						typ: 20
    																																					},
    																																					{
    																																						typ: 1,
    																																						val: "small-caps"
    																																					},
    																																					{
    																																						typ: 20
    																																					}
    																																				],
    																																				r: [
    																																					{
    																																						typ: 27,
    																																						l: [
    																																							{
    																																								typ: 20
    																																							},
    																																							{
    																																								typ: 1,
    																																								val: "all-small-caps"
    																																							},
    																																							{
    																																								typ: 20
    																																							}
    																																						],
    																																						r: [
    																																							{
    																																								typ: 27,
    																																								l: [
    																																									{
    																																										typ: 20
    																																									},
    																																									{
    																																										typ: 1,
    																																										val: "petite-caps"
    																																									},
    																																									{
    																																										typ: 20
    																																									}
    																																								],
    																																								r: [
    																																									{
    																																										typ: 27,
    																																										l: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 1,
    																																												val: "all-petite-caps"
    																																											},
    																																											{
    																																												typ: 20
    																																											}
    																																										],
    																																										r: [
    																																											{
    																																												typ: 27,
    																																												l: [
    																																													{
    																																														typ: 20
    																																													},
    																																													{
    																																														typ: 1,
    																																														val: "unicase"
    																																													},
    																																													{
    																																														typ: 20
    																																													}
    																																												],
    																																												r: [
    																																													{
    																																														typ: 20
    																																													},
    																																													{
    																																														typ: 1,
    																																														val: "titling-caps"
    																																													},
    																																													{
    																																														typ: 20
    																																													}
    																																												]
    																																											}
    																																										]
    																																									}
    																																								]
    																																							}
    																																						]
    																																					}
    																																				]
    																																			}
    																																		]
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 28,
    																																		l: [
    																																			{
    																																				typ: 20
    																																			},
    																																			{
    																																				typ: 2,
    																																				val: "numeric-figure-values"
    																																			},
    																																			{
    																																				typ: 20
    																																			}
    																																		],
    																																		r: [
    																																			{
    																																				typ: 28,
    																																				l: [
    																																					{
    																																						typ: 20
    																																					},
    																																					{
    																																						typ: 2,
    																																						val: "numeric-spacing-values"
    																																					},
    																																					{
    																																						typ: 20
    																																					}
    																																				],
    																																				r: [
    																																					{
    																																						typ: 28,
    																																						l: [
    																																							{
    																																								typ: 20
    																																							},
    																																							{
    																																								typ: 2,
    																																								val: "numeric-fraction-values"
    																																							},
    																																							{
    																																								typ: 20
    																																							}
    																																						],
    																																						r: [
    																																							{
    																																								typ: 28,
    																																								l: [
    																																									{
    																																										typ: 20
    																																									},
    																																									{
    																																										typ: 1,
    																																										val: "ordinal"
    																																									},
    																																									{
    																																										typ: 20
    																																									}
    																																								],
    																																								r: [
    																																									{
    																																										typ: 28,
    																																										l: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 1,
    																																												val: "slashed-zero"
    																																											},
    																																											{
    																																												typ: 20
    																																											}
    																																										],
    																																										r: [
    																																											{
    																																												typ: 28,
    																																												l: [
    																																													{
    																																														typ: 20
    																																													},
    																																													{
    																																														typ: 2,
    																																														val: "east-asian-variant-values"
    																																													},
    																																													{
    																																														typ: 20
    																																													}
    																																												],
    																																												r: [
    																																													{
    																																														typ: 28,
    																																														l: [
    																																															{
    																																																typ: 20
    																																															},
    																																															{
    																																																typ: 2,
    																																																val: "east-asian-width-values"
    																																															},
    																																															{
    																																																typ: 20
    																																															}
    																																														],
    																																														r: [
    																																															{
    																																																typ: 20
    																																															},
    																																															{
    																																																typ: 1,
    																																																val: "ruby"
    																																															},
    																																															{
    																																																typ: 20
    																																															}
    																																														]
    																																													}
    																																												]
    																																											}
    																																										]
    																																									}
    																																								]
    																																							}
    																																						]
    																																					}
    																																				]
    																																			}
    																																		]
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-variant-alternates": {
    		syntax: "normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "stylistic",
    										chi: [
    											{
    												typ: 2,
    												val: "feature-value-name"
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "historical-forms"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 18,
    														val: "styleset",
    														chi: [
    															{
    																typ: 2,
    																val: "feature-value-name",
    																isList: true
    															}
    														]
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 18,
    																val: "character-variant",
    																chi: [
    																	{
    																		typ: 2,
    																		val: "feature-value-name",
    																		isList: true
    																	}
    																]
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 28,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 18,
    																		val: "swash",
    																		chi: [
    																			{
    																				typ: 2,
    																				val: "feature-value-name"
    																			}
    																		]
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 28,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 18,
    																				val: "ornaments",
    																				chi: [
    																					{
    																						typ: 2,
    																						val: "feature-value-name"
    																					}
    																				]
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 18,
    																				val: "annotation",
    																				chi: [
    																					{
    																						typ: 2,
    																						val: "feature-value-name"
    																					}
    																				]
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-variant-caps": {
    		syntax: "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "small-caps"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "all-small-caps"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "petite-caps"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "all-petite-caps"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "unicase"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "titling-caps"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-variant-east-asian": {
    		syntax: "normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "east-asian-variant-values"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "east-asian-width-values"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "ruby"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-variant-emoji": {
    		syntax: "normal | text | emoji | unicode",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "text"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "emoji"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "unicode"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-variant-ligatures": {
    		syntax: "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "common-lig-values"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "discretionary-lig-values"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "historical-lig-values"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "contextual-alt-values"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-variant-numeric": {
    		syntax: "normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "numeric-figure-values"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "numeric-spacing-values"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "numeric-fraction-values"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "ordinal"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "slashed-zero"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-variant-position": {
    		syntax: "normal | sub | super",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "sub"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "super"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-weight": {
    		syntax: "<font-weight-absolute> | bolder | lighter",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "font-weight-absolute"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "bolder"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "lighter"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"forced-color-adjust": {
    		syntax: "auto | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	gap: {
    		syntax: "<'row-gap'> <'column-gap'>?",
    		ast: [
    			{
    				typ: 3,
    				val: "row-gap"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "column-gap",
    				isOptional: true
    			}
    		]
    	},
    	grid: {
    		syntax: "<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 3,
    						val: "grid-template"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "grid-template-rows"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 24
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 29,
    										l: [
    											{
    												typ: 1,
    												val: "auto-flow"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "dense",
    												isOptional: true
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "grid-auto-columns",
    								isOptional: true
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 29,
    										l: [
    											{
    												typ: 1,
    												val: "auto-flow"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "dense",
    												isOptional: true
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "grid-auto-rows",
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 24
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "grid-template-columns"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"grid-area": {
    		syntax: "<grid-line> [ / <grid-line> ]{0,3}",
    		ast: [
    			{
    				typ: 2,
    				val: "grid-line"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 24
    					},
    					{
    						typ: 2,
    						val: "grid-line"
    					}
    				],
    				occurence: {
    					min: 3,
    					max: 0
    				}
    			}
    		]
    	},
    	"grid-auto-columns": {
    		syntax: "<track-size>+",
    		ast: [
    			{
    				typ: 2,
    				val: "track-size",
    				atLeastOnce: true
    			}
    		]
    	},
    	"grid-auto-flow": {
    		syntax: "[ row | column ] || dense",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "row"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "column"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "dense"
    					}
    				]
    			}
    		]
    	},
    	"grid-auto-rows": {
    		syntax: "<track-size>+",
    		ast: [
    			{
    				typ: 2,
    				val: "track-size",
    				atLeastOnce: true
    			}
    		]
    	},
    	"grid-column": {
    		syntax: "<grid-line> [ / <grid-line> ]?",
    		ast: [
    			{
    				typ: 2,
    				val: "grid-line"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 24
    					},
    					{
    						typ: 2,
    						val: "grid-line"
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"grid-column-end": {
    		syntax: "<grid-line>",
    		ast: [
    			{
    				typ: 2,
    				val: "grid-line"
    			}
    		]
    	},
    	"grid-column-gap": {
    		syntax: "<length-percentage>",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage"
    			}
    		]
    	},
    	"grid-column-start": {
    		syntax: "<grid-line>",
    		ast: [
    			{
    				typ: 2,
    				val: "grid-line"
    			}
    		]
    	},
    	"grid-gap": {
    		syntax: "<'grid-row-gap'> <'grid-column-gap'>?",
    		ast: [
    			{
    				typ: 3,
    				val: "grid-row-gap"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "grid-column-gap",
    				isOptional: true
    			}
    		]
    	},
    	"grid-row": {
    		syntax: "<grid-line> [ / <grid-line> ]?",
    		ast: [
    			{
    				typ: 2,
    				val: "grid-line"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 24
    					},
    					{
    						typ: 2,
    						val: "grid-line"
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"grid-row-end": {
    		syntax: "<grid-line>",
    		ast: [
    			{
    				typ: 2,
    				val: "grid-line"
    			}
    		]
    	},
    	"grid-row-gap": {
    		syntax: "<length-percentage>",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage"
    			}
    		]
    	},
    	"grid-row-start": {
    		syntax: "<grid-line>",
    		ast: [
    			{
    				typ: 2,
    				val: "grid-line"
    			}
    		]
    	},
    	"grid-template": {
    		syntax: "none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 3,
    										val: "grid-template-rows"
    									},
    									{
    										typ: 24
    									},
    									{
    										typ: 3,
    										val: "grid-template-columns"
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 2,
    										val: "line-names",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "track-size",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "line-names",
    										isOptional: true
    									}
    								],
    								atLeastOnce: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "explicit-track-list"
    									}
    								],
    								isOptional: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"grid-template-areas": {
    		syntax: "none | <string>+",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string",
    						atLeastOnce: true
    					}
    				]
    			}
    		]
    	},
    	"grid-template-columns": {
    		syntax: "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "track-list"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "auto-track-list"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "subgrid"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "line-name-list",
    										isOptional: true
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"grid-template-rows": {
    		syntax: "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "track-list"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "auto-track-list"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "subgrid"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "line-name-list",
    										isOptional: true
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"hanging-punctuation": {
    		syntax: "none | [ first || [ force-end | allow-end ] || last ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "first"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "force-end"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "allow-end"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "last"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	height: {
    		syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "min-content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "max-content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "fit-content"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 18,
    																val: "fit-content",
    																chi: [
    																	{
    																		typ: 2,
    																		val: "length-percentage"
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"hyphenate-character": {
    		syntax: "auto | <string>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					}
    				]
    			}
    		]
    	},
    	"hyphenate-limit-chars": {
    		syntax: "[ auto | <integer> ]{1,3}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "integer"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 3
    				}
    			}
    		]
    	},
    	hyphens: {
    		syntax: "none | manual | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "manual"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"image-orientation": {
    		syntax: "from-image | <angle> | [ <angle>? flip ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "from-image"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "angle"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 2,
    										val: "angle",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "flip"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"image-rendering": {
    		syntax: "auto | crisp-edges | pixelated",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "crisp-edges"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "pixelated"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"image-resolution": {
    		syntax: "[ from-image || <resolution> ] && snap?",
    		ast: [
    			{
    				typ: 29,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "from-image"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "resolution"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "snap",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"ime-mode": {
    		syntax: "auto | normal | active | inactive | disabled",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "active"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "inactive"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "disabled"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"initial-letter": {
    		syntax: "normal | [ <number> <integer>? ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "number"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "integer",
    								isOptional: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"initial-letter-align": {
    		syntax: "[ auto | alphabetic | hanging | ideographic ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "alphabetic"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "hanging"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "ideographic"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"inline-size": {
    		syntax: "<'width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "width"
    			}
    		]
    	},
    	"input-security": {
    		syntax: "auto | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	inset: {
    		syntax: "<'top'>{1,4}",
    		ast: [
    			{
    				typ: 3,
    				val: "top",
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"inset-area": {
    		syntax: "none | <inset-area>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "inset-area"
    					}
    				]
    			}
    		]
    	},
    	"inset-block": {
    		syntax: "<'top'>{1,2}",
    		ast: [
    			{
    				typ: 3,
    				val: "top",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"inset-block-end": {
    		syntax: "<'top'>",
    		ast: [
    			{
    				typ: 3,
    				val: "top"
    			}
    		]
    	},
    	"inset-block-start": {
    		syntax: "<'top'>",
    		ast: [
    			{
    				typ: 3,
    				val: "top"
    			}
    		]
    	},
    	"inset-inline": {
    		syntax: "<'top'>{1,2}",
    		ast: [
    			{
    				typ: 3,
    				val: "top",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"inset-inline-end": {
    		syntax: "<'top'>",
    		ast: [
    			{
    				typ: 3,
    				val: "top"
    			}
    		]
    	},
    	"inset-inline-start": {
    		syntax: "<'top'>",
    		ast: [
    			{
    				typ: 3,
    				val: "top"
    			}
    		]
    	},
    	isolation: {
    		syntax: "auto | isolate",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "isolate"
    					}
    				]
    			}
    		]
    	},
    	"justify-content": {
    		syntax: "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "content-distribution"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "overflow-position",
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "content-position"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "left"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "right"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"justify-items": {
    		syntax: "normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "stretch"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "baseline-position"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "overflow-position",
    												isOptional: true
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "self-position"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "left"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "right"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "legacy"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 29,
    														l: [
    															{
    																typ: 1,
    																val: "legacy"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 22,
    																chi: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "left"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "right"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "center"
    																					},
    																					{
    																						typ: 20
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"justify-self": {
    		syntax: "auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "stretch"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "baseline-position"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "overflow-position",
    												isOptional: true
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "self-position"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "left"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "right"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"justify-tracks": {
    		syntax: "[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "content-distribution"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "overflow-position",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "content-position"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "left"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "right"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	left: {
    		syntax: "<length> | <percentage> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"letter-spacing": {
    		syntax: "normal | <length>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"line-break": {
    		syntax: "auto | loose | normal | strict | anywhere",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "loose"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "normal"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "strict"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "anywhere"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"line-clamp": {
    		syntax: "none | <integer>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "integer"
    					}
    				]
    			}
    		]
    	},
    	"line-height": {
    		syntax: "normal | <number> | <length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "number"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"line-height-step": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"list-style": {
    		syntax: "<'list-style-type'> || <'list-style-position'> || <'list-style-image'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "list-style-type"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "list-style-position"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "list-style-image"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"list-style-image": {
    		syntax: "<image> | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "image"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"list-style-position": {
    		syntax: "inside | outside",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "inside"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "outside"
    					}
    				]
    			}
    		]
    	},
    	"list-style-type": {
    		syntax: "<counter-style> | <string> | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "counter-style"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "string"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	margin: {
    		syntax: "[ <length> | <percentage> | auto ]{1,4}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"margin-block": {
    		syntax: "<'margin-left'>{1,2}",
    		ast: [
    			{
    				typ: 3,
    				val: "margin-left",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"margin-block-end": {
    		syntax: "<'margin-left'>",
    		ast: [
    			{
    				typ: 3,
    				val: "margin-left"
    			}
    		]
    	},
    	"margin-block-start": {
    		syntax: "<'margin-left'>",
    		ast: [
    			{
    				typ: 3,
    				val: "margin-left"
    			}
    		]
    	},
    	"margin-bottom": {
    		syntax: "<length> | <percentage> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"margin-inline": {
    		syntax: "<'margin-left'>{1,2}",
    		ast: [
    			{
    				typ: 3,
    				val: "margin-left",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"margin-inline-end": {
    		syntax: "<'margin-left'>",
    		ast: [
    			{
    				typ: 3,
    				val: "margin-left"
    			}
    		]
    	},
    	"margin-inline-start": {
    		syntax: "<'margin-left'>",
    		ast: [
    			{
    				typ: 3,
    				val: "margin-left"
    			}
    		]
    	},
    	"margin-left": {
    		syntax: "<length> | <percentage> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"margin-right": {
    		syntax: "<length> | <percentage> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"margin-top": {
    		syntax: "<length> | <percentage> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"margin-trim": {
    		syntax: "none | in-flow | all",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "in-flow"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "all"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	marker: {
    		syntax: "none | <url>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "url"
    					}
    				]
    			}
    		]
    	},
    	"marker-end": {
    		syntax: "none | <url>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "url"
    					}
    				]
    			}
    		]
    	},
    	"marker-mid": {
    		syntax: "none | <url>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "url"
    					}
    				]
    			}
    		]
    	},
    	"marker-start": {
    		syntax: "none | <url>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "url"
    					}
    				]
    			}
    		]
    	},
    	mask: {
    		syntax: "<mask-layer>#",
    		ast: [
    			{
    				typ: 2,
    				val: "mask-layer",
    				isList: true
    			}
    		]
    	},
    	"mask-border": {
    		syntax: "<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "mask-border-source"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "mask-border-slice"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 3,
    										val: "mask-border-width",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 24
    											},
    											{
    												typ: 3,
    												val: "mask-border-outset"
    											}
    										],
    										isOptional: true
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "mask-border-repeat"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "mask-border-mode"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"mask-border-mode": {
    		syntax: "luminance | alpha",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "luminance"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "alpha"
    					}
    				]
    			}
    		]
    	},
    	"mask-border-outset": {
    		syntax: "[ <length> | <number> ]{1,4}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "number"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"mask-border-repeat": {
    		syntax: "[ stretch | repeat | round | space ]{1,2}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "stretch"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "repeat"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "round"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "space"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"mask-border-slice": {
    		syntax: "<number-percentage>{1,4} fill?",
    		ast: [
    			{
    				typ: 2,
    				val: "number-percentage",
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 1,
    				val: "fill",
    				isOptional: true
    			}
    		]
    	},
    	"mask-border-source": {
    		syntax: "none | <image>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "image"
    					}
    				]
    			}
    		]
    	},
    	"mask-border-width": {
    		syntax: "[ <length-percentage> | <number> | auto ]{1,4}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "number"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"mask-clip": {
    		syntax: "[ <geometry-box> | no-clip ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "geometry-box"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "no-clip"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"mask-composite": {
    		syntax: "<compositing-operator>#",
    		ast: [
    			{
    				typ: 2,
    				val: "compositing-operator",
    				isList: true
    			}
    		]
    	},
    	"mask-image": {
    		syntax: "<mask-reference>#",
    		ast: [
    			{
    				typ: 2,
    				val: "mask-reference",
    				isList: true
    			}
    		]
    	},
    	"mask-mode": {
    		syntax: "<masking-mode>#",
    		ast: [
    			{
    				typ: 2,
    				val: "masking-mode",
    				isList: true
    			}
    		]
    	},
    	"mask-origin": {
    		syntax: "<geometry-box>#",
    		ast: [
    			{
    				typ: 2,
    				val: "geometry-box",
    				isList: true
    			}
    		]
    	},
    	"mask-position": {
    		syntax: "<position>#",
    		ast: [
    			{
    				typ: 2,
    				val: "position",
    				isList: true
    			}
    		]
    	},
    	"mask-repeat": {
    		syntax: "<repeat-style>#",
    		ast: [
    			{
    				typ: 2,
    				val: "repeat-style",
    				isList: true
    			}
    		]
    	},
    	"mask-size": {
    		syntax: "<bg-size>#",
    		ast: [
    			{
    				typ: 2,
    				val: "bg-size",
    				isList: true
    			}
    		]
    	},
    	"mask-type": {
    		syntax: "luminance | alpha",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "luminance"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "alpha"
    					}
    				]
    			}
    		]
    	},
    	"masonry-auto-flow": {
    		syntax: "[ pack | next ] || [ definite-first | ordered ]",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "pack"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "next"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "definite-first"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "ordered"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"math-depth": {
    		syntax: "auto-add | add(<integer>) | <integer>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto-add"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "add",
    								chi: [
    									{
    										typ: 2,
    										val: "integer"
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "integer"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"math-shift": {
    		syntax: "normal | compact",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "compact"
    					}
    				]
    			}
    		]
    	},
    	"math-style": {
    		syntax: "normal | compact",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "compact"
    					}
    				]
    			}
    		]
    	},
    	"max-block-size": {
    		syntax: "<'max-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "max-width"
    			}
    		]
    	},
    	"max-height": {
    		syntax: "none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "min-content"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "max-content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "fit-content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 18,
    														val: "fit-content",
    														chi: [
    															{
    																typ: 2,
    																val: "length-percentage"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"max-inline-size": {
    		syntax: "<'max-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "max-width"
    			}
    		]
    	},
    	"max-lines": {
    		syntax: "none | <integer>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "integer"
    					}
    				]
    			}
    		]
    	},
    	"max-width": {
    		syntax: "none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "min-content"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "max-content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "fit-content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 18,
    														val: "fit-content",
    														chi: [
    															{
    																typ: 2,
    																val: "length-percentage"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"min-block-size": {
    		syntax: "<'min-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "min-width"
    			}
    		]
    	},
    	"min-height": {
    		syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "min-content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "max-content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "fit-content"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 18,
    																val: "fit-content",
    																chi: [
    																	{
    																		typ: 2,
    																		val: "length-percentage"
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"min-inline-size": {
    		syntax: "<'min-width'>",
    		ast: [
    			{
    				typ: 3,
    				val: "min-width"
    			}
    		]
    	},
    	"min-width": {
    		syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "min-content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "max-content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "fit-content"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 18,
    																val: "fit-content",
    																chi: [
    																	{
    																		typ: 2,
    																		val: "length-percentage"
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"mix-blend-mode": {
    		syntax: "<blend-mode> | plus-lighter",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "blend-mode"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "plus-lighter"
    					}
    				]
    			}
    		]
    	},
    	"object-fit": {
    		syntax: "fill | contain | cover | none | scale-down",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "fill"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "contain"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "cover"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "scale-down"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"object-position": {
    		syntax: "<position>",
    		ast: [
    			{
    				typ: 2,
    				val: "position"
    			}
    		]
    	},
    	offset: {
    		syntax: "[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 3,
    						val: "offset-position",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 3,
    								val: "offset-path"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 3,
    												val: "offset-distance"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 3,
    												val: "offset-rotate"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							}
    						],
    						isOptional: true
    					}
    				],
    				isRepeatableGroup: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 24
    					},
    					{
    						typ: 3,
    						val: "offset-anchor"
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"offset-anchor": {
    		syntax: "auto | <position>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "position"
    					}
    				]
    			}
    		]
    	},
    	"offset-distance": {
    		syntax: "<length-percentage>",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage"
    			}
    		]
    	},
    	"offset-path": {
    		syntax: "none | <offset-path> || <coord-box>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "offset-path"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "coord-box"
    					}
    				]
    			}
    		]
    	},
    	"offset-position": {
    		syntax: "normal | auto | <position>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"offset-rotate": {
    		syntax: "[ auto | reverse ] || <angle>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "reverse"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "angle"
    					}
    				]
    			}
    		]
    	},
    	opacity: {
    		syntax: "<alpha-value>",
    		ast: [
    			{
    				typ: 2,
    				val: "alpha-value"
    			}
    		]
    	},
    	order: {
    		syntax: "<integer>",
    		ast: [
    			{
    				typ: 2,
    				val: "integer"
    			}
    		]
    	},
    	orphans: {
    		syntax: "<integer>",
    		ast: [
    			{
    				typ: 2,
    				val: "integer"
    			}
    		]
    	},
    	outline: {
    		syntax: "[ <'outline-width'> || <'outline-style'> || <'outline-color'> ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "outline-width"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "outline-style"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "outline-color"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"outline-color": {
    		syntax: "auto | <color>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color"
    					}
    				]
    			}
    		]
    	},
    	"outline-offset": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"outline-style": {
    		syntax: "auto | <'border-style'>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "border-style"
    					}
    				]
    			}
    		]
    	},
    	"outline-width": {
    		syntax: "<line-width>",
    		ast: [
    			{
    				typ: 2,
    				val: "line-width"
    			}
    		]
    	},
    	overflow: {
    		syntax: "[ visible | hidden | clip | scroll | auto ]{1,2}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "visible"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "hidden"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "clip"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "scroll"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "auto"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"overflow-anchor": {
    		syntax: "auto | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"overflow-block": {
    		syntax: "visible | hidden | clip | scroll | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "visible"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "hidden"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "clip"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "scroll"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "auto"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"overflow-clip-box": {
    		syntax: "padding-box | content-box",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "padding-box"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "content-box"
    					}
    				]
    			}
    		]
    	},
    	"overflow-clip-margin": {
    		syntax: "<visual-box> || <length [0,∞]>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 2,
    						val: "visual-box"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length",
    						range: [
    							0,
    							null
    						]
    					}
    				]
    			}
    		]
    	},
    	"overflow-inline": {
    		syntax: "visible | hidden | clip | scroll | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "visible"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "hidden"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "clip"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "scroll"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "auto"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"overflow-wrap": {
    		syntax: "normal | break-word | anywhere",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "break-word"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "anywhere"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"overflow-x": {
    		syntax: "visible | hidden | clip | scroll | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "visible"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "hidden"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "clip"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "scroll"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "auto"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"overflow-y": {
    		syntax: "visible | hidden | clip | scroll | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "visible"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "hidden"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "clip"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "scroll"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "auto"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	overlay: {
    		syntax: "none | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "auto"
    					}
    				]
    			}
    		]
    	},
    	"overscroll-behavior": {
    		syntax: "[ contain | none | auto ]{1,2}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "contain"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"overscroll-behavior-block": {
    		syntax: "contain | none | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "contain"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"overscroll-behavior-inline": {
    		syntax: "contain | none | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "contain"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"overscroll-behavior-x": {
    		syntax: "contain | none | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "contain"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"overscroll-behavior-y": {
    		syntax: "contain | none | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "contain"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	padding: {
    		syntax: "[ <length> | <percentage> ]{1,4}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"padding-block": {
    		syntax: "<'padding-left'>{1,2}",
    		ast: [
    			{
    				typ: 3,
    				val: "padding-left",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"padding-block-end": {
    		syntax: "<'padding-left'>",
    		ast: [
    			{
    				typ: 3,
    				val: "padding-left"
    			}
    		]
    	},
    	"padding-block-start": {
    		syntax: "<'padding-left'>",
    		ast: [
    			{
    				typ: 3,
    				val: "padding-left"
    			}
    		]
    	},
    	"padding-bottom": {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"padding-inline": {
    		syntax: "<'padding-left'>{1,2}",
    		ast: [
    			{
    				typ: 3,
    				val: "padding-left",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"padding-inline-end": {
    		syntax: "<'padding-left'>",
    		ast: [
    			{
    				typ: 3,
    				val: "padding-left"
    			}
    		]
    	},
    	"padding-inline-start": {
    		syntax: "<'padding-left'>",
    		ast: [
    			{
    				typ: 3,
    				val: "padding-left"
    			}
    		]
    	},
    	"padding-left": {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"padding-right": {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"padding-top": {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	page: {
    		syntax: "auto | <custom-ident>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "custom-ident"
    					}
    				]
    			}
    		]
    	},
    	"page-break-after": {
    		syntax: "auto | always | avoid | left | right | recto | verso",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "always"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "avoid"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "left"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "right"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "recto"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "verso"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"page-break-before": {
    		syntax: "auto | always | avoid | left | right | recto | verso",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "always"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "avoid"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "left"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "right"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "recto"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "verso"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"page-break-inside": {
    		syntax: "auto | avoid",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "avoid"
    					}
    				]
    			}
    		]
    	},
    	"paint-order": {
    		syntax: "normal | [ fill || stroke || markers ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "fill"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "stroke"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "markers"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	perspective: {
    		syntax: "none | <length>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"perspective-origin": {
    		syntax: "<position>",
    		ast: [
    			{
    				typ: 2,
    				val: "position"
    			}
    		]
    	},
    	"place-content": {
    		syntax: "<'align-content'> <'justify-content'>?",
    		ast: [
    			{
    				typ: 3,
    				val: "align-content"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "justify-content",
    				isOptional: true
    			}
    		]
    	},
    	"place-items": {
    		syntax: "<'align-items'> <'justify-items'>?",
    		ast: [
    			{
    				typ: 3,
    				val: "align-items"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "justify-items",
    				isOptional: true
    			}
    		]
    	},
    	"place-self": {
    		syntax: "<'align-self'> <'justify-self'>?",
    		ast: [
    			{
    				typ: 3,
    				val: "align-self"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "justify-self",
    				isOptional: true
    			}
    		]
    	},
    	"pointer-events": {
    		syntax: "auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "visiblePainted"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "visibleFill"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "visibleStroke"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "visible"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "painted"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "fill"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "stroke"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "all"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "inherit"
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	position: {
    		syntax: "static | relative | absolute | sticky | fixed",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "static"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "relative"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "absolute"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "sticky"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "fixed"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"position-anchor": {
    		syntax: "<anchor-element>",
    		ast: [
    			{
    				typ: 2,
    				val: "anchor-element"
    			}
    		]
    	},
    	"position-try": {
    		syntax: "<'position-try-order'>? <'position-try-fallbacks'>",
    		ast: [
    			{
    				typ: 3,
    				val: "position-try-order",
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 3,
    				val: "position-try-fallbacks"
    			}
    		]
    	},
    	"position-try-fallbacks": {
    		syntax: "none | [ [<dashed-ident> || <try-tactic>] | inset-area( <'inset-area'> ) ]#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 2,
    														val: "dashed-ident"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "try-tactic"
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "inset-area",
    										chi: [
    											{
    												typ: 3,
    												val: "inset-area"
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"position-try-order": {
    		syntax: "normal | <try-size>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "try-size"
    					}
    				]
    			}
    		]
    	},
    	"position-visibility": {
    		syntax: "always | [ anchors-valid || anchors-visible || no-overflow ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "always"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "anchors-valid"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "anchors-visible"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "no-overflow"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"print-color-adjust": {
    		syntax: "economy | exact",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "economy"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "exact"
    					}
    				]
    			}
    		]
    	},
    	quotes: {
    		syntax: "none | auto | [ <string> <string> ]+",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 2,
    										val: "string"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									}
    								],
    								atLeastOnce: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	r: {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	resize: {
    		syntax: "none | both | horizontal | vertical | block | inline",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "both"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "horizontal"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "vertical"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "block"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "inline"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	right: {
    		syntax: "<length> | <percentage> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	rotate: {
    		syntax: "none | <angle> | [ x | y | z | <number>{3} ] && <angle>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "angle"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 29,
    								l: [
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "x"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "y"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "z"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "number",
    																		occurence: {
    																			min: 3,
    																			max: 0
    																		}
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"row-gap": {
    		syntax: "normal | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"ruby-align": {
    		syntax: "start | center | space-between | space-around",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "start"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "center"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "space-between"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "space-around"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"ruby-merge": {
    		syntax: "separate | collapse | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "separate"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "collapse"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"ruby-position": {
    		syntax: "[ alternate || [ over | under ] ] | inter-character",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "alternate"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "over"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "under"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "inter-character"
    					}
    				]
    			}
    		]
    	},
    	rx: {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	ry: {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	scale: {
    		syntax: "none | <number>{1,3}",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "number",
    						occurence: {
    							min: 1,
    							max: 3
    						}
    					}
    				]
    			}
    		]
    	},
    	"scrollbar-color": {
    		syntax: "auto | <color>{2}",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color",
    						occurence: {
    							min: 2,
    							max: 0
    						}
    					}
    				]
    			}
    		]
    	},
    	"scrollbar-gutter": {
    		syntax: "auto | stable && both-edges?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 29,
    						l: [
    							{
    								typ: 1,
    								val: "stable"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "both-edges",
    								isOptional: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"scrollbar-width": {
    		syntax: "auto | thin | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "thin"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"scroll-behavior": {
    		syntax: "auto | smooth",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "smooth"
    					}
    				]
    			}
    		]
    	},
    	"scroll-margin": {
    		syntax: "<length>{1,4}",
    		ast: [
    			{
    				typ: 2,
    				val: "length",
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"scroll-margin-block": {
    		syntax: "<length>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"scroll-margin-block-start": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"scroll-margin-block-end": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"scroll-margin-bottom": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"scroll-margin-inline": {
    		syntax: "<length>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"scroll-margin-inline-start": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"scroll-margin-inline-end": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"scroll-margin-left": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"scroll-margin-right": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"scroll-margin-top": {
    		syntax: "<length>",
    		ast: [
    			{
    				typ: 2,
    				val: "length"
    			}
    		]
    	},
    	"scroll-padding": {
    		syntax: "[ auto | <length-percentage> ]{1,4}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 4
    				}
    			}
    		]
    	},
    	"scroll-padding-block": {
    		syntax: "[ auto | <length-percentage> ]{1,2}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"scroll-padding-block-start": {
    		syntax: "auto | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"scroll-padding-block-end": {
    		syntax: "auto | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"scroll-padding-bottom": {
    		syntax: "auto | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"scroll-padding-inline": {
    		syntax: "[ auto | <length-percentage> ]{1,2}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"scroll-padding-inline-start": {
    		syntax: "auto | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"scroll-padding-inline-end": {
    		syntax: "auto | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"scroll-padding-left": {
    		syntax: "auto | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"scroll-padding-right": {
    		syntax: "auto | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"scroll-padding-top": {
    		syntax: "auto | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"scroll-snap-align": {
    		syntax: "[ none | start | end | center ]{1,2}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "start"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "end"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "center"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"scroll-snap-coordinate": {
    		syntax: "none | <position>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "position",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"scroll-snap-destination": {
    		syntax: "<position>",
    		ast: [
    			{
    				typ: 2,
    				val: "position"
    			}
    		]
    	},
    	"scroll-snap-points-x": {
    		syntax: "none | repeat( <length-percentage> )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "repeat",
    						chi: [
    							{
    								typ: 2,
    								val: "length-percentage"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"scroll-snap-points-y": {
    		syntax: "none | repeat( <length-percentage> )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "repeat",
    						chi: [
    							{
    								typ: 2,
    								val: "length-percentage"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"scroll-snap-stop": {
    		syntax: "normal | always",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "always"
    					}
    				]
    			}
    		]
    	},
    	"scroll-snap-type": {
    		syntax: "none | [ x | y | block | inline | both ] [ mandatory | proximity ]?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "x"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "y"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "block"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "inline"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "both"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "mandatory"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "proximity"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"scroll-snap-type-x": {
    		syntax: "none | mandatory | proximity",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "mandatory"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "proximity"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"scroll-snap-type-y": {
    		syntax: "none | mandatory | proximity",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "mandatory"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "proximity"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"scroll-timeline": {
    		syntax: "[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 3,
    						val: "scroll-timeline-name"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "scroll-timeline-axis",
    						isOptional: true
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"scroll-timeline-axis": {
    		syntax: "[ block | inline | x | y ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "block"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "inline"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "x"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "y"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"scroll-timeline-name": {
    		syntax: "none | <dashed-ident>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "dashed-ident",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"shape-image-threshold": {
    		syntax: "<alpha-value>",
    		ast: [
    			{
    				typ: 2,
    				val: "alpha-value"
    			}
    		]
    	},
    	"shape-margin": {
    		syntax: "<length-percentage>",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage"
    			}
    		]
    	},
    	"shape-outside": {
    		syntax: "none | [ <shape-box> || <basic-shape> ] | <image>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "shape-box"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "basic-shape"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "image"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"shape-rendering": {
    		syntax: "auto | optimizeSpeed | crispEdges | geometricPrecision",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "optimizeSpeed"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "crispEdges"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "geometricPrecision"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"tab-size": {
    		syntax: "<integer> | <length>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "integer"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"table-layout": {
    		syntax: "auto | fixed",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "fixed"
    					}
    				]
    			}
    		]
    	},
    	"text-align": {
    		syntax: "start | end | left | right | center | justify | match-parent",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "start"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "end"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "left"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "right"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "center"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "justify"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "match-parent"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-align-last": {
    		syntax: "auto | start | end | left | right | center | justify",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "start"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "end"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "left"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "right"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "center"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "justify"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-anchor": {
    		syntax: "start | middle | end",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "start"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "middle"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "end"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-combine-upright": {
    		syntax: "none | all | [ digits <integer>? ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "all"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 1,
    										val: "digits"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "integer",
    										isOptional: true
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-decoration": {
    		syntax: "<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "text-decoration-line"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "text-decoration-style"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "text-decoration-color"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "text-decoration-thickness"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-decoration-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"text-decoration-line": {
    		syntax: "none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "underline"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "overline"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "line-through"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "blink"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "spelling-error"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "grammar-error"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-decoration-skip": {
    		syntax: "none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "objects"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "spaces"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 22,
    																chi: [
    																	{
    																		typ: 28,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "leading-spaces"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "trailing-spaces"
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "edges"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "box-decoration"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-decoration-skip-ink": {
    		syntax: "auto | all | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "all"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-decoration-style": {
    		syntax: "solid | double | dotted | dashed | wavy",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "solid"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "double"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "dotted"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "dashed"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "wavy"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-decoration-thickness": {
    		syntax: "auto | from-font | <length> | <percentage> ",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "from-font"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-emphasis": {
    		syntax: "<'text-emphasis-style'> || <'text-emphasis-color'>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "text-emphasis-style"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "text-emphasis-color"
    					}
    				]
    			}
    		]
    	},
    	"text-emphasis-color": {
    		syntax: "<color>",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			}
    		]
    	},
    	"text-emphasis-position": {
    		syntax: "[ over | under ] && [ right | left ]",
    		ast: [
    			{
    				typ: 29,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "over"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "under"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "right"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "left"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-emphasis-style": {
    		syntax: "none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "filled"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "open"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "dot"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "circle"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "double-circle"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "triangle"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "sesame"
    																					},
    																					{
    																						typ: 20
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "string"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-indent": {
    		syntax: "<length-percentage> && hanging? && each-line?",
    		ast: [
    			{
    				typ: 29,
    				l: [
    					{
    						typ: 29,
    						l: [
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "hanging",
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "each-line",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"text-justify": {
    		syntax: "auto | inter-character | inter-word | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "inter-character"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "inter-word"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-orientation": {
    		syntax: "mixed | upright | sideways",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "mixed"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "upright"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "sideways"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-overflow": {
    		syntax: "[ clip | ellipsis | <string> ]{1,2}",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "clip"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "ellipsis"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"text-rendering": {
    		syntax: "auto | optimizeSpeed | optimizeLegibility | geometricPrecision",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "optimizeSpeed"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "optimizeLegibility"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "geometricPrecision"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-shadow": {
    		syntax: "none | <shadow-t>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "shadow-t",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"text-size-adjust": {
    		syntax: "none | auto | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-spacing-trim": {
    		syntax: "space-all | normal | space-first | trim-start | trim-both | trim-all | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "space-all"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "space-first"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "trim-start"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "trim-both"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "trim-all"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "auto"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-transform": {
    		syntax: "none | capitalize | uppercase | lowercase | full-width | full-size-kana",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "capitalize"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "uppercase"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "lowercase"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "full-width"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "full-size-kana"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-underline-offset": {
    		syntax: "auto | <length> | <percentage> ",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-underline-position": {
    		syntax: "auto | from-font | [ under || [ left | right ] ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "from-font"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "under"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "left"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "right"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-wrap": {
    		syntax: "wrap | nowrap | balance | stable | pretty",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "wrap"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "nowrap"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "balance"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "stable"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "pretty"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-wrap-mode": {
    		syntax: "auto | wrap | nowrap",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "wrap"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "nowrap"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"text-wrap-style": {
    		syntax: "auto | balance | stable | pretty",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "balance"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "stable"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "pretty"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"timeline-scope": {
    		syntax: "none | <dashed-ident>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "dashed-ident",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	top: {
    		syntax: "<length> | <percentage> | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "auto"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"touch-action": {
    		syntax: "auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 22,
    														chi: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "pan-x"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "pan-left"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "pan-right"
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 22,
    																chi: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "pan-y"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "pan-up"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "pan-down"
    																					},
    																					{
    																						typ: 20
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "pinch-zoom"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "manipulation"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	transform: {
    		syntax: "none | <transform-list>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "transform-list"
    					}
    				]
    			}
    		]
    	},
    	"transform-box": {
    		syntax: "content-box | border-box | fill-box | stroke-box | view-box",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "content-box"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "border-box"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "fill-box"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "stroke-box"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "view-box"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"transform-origin": {
    		syntax: "[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "left"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "center"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "right"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "top"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "bottom"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 29,
    								l: [
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "length-percentage"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "left"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "center"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "right"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "length-percentage"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "top"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "center"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "bottom"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"transform-style": {
    		syntax: "flat | preserve-3d",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "flat"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "preserve-3d"
    					}
    				]
    			}
    		]
    	},
    	transition: {
    		syntax: "<single-transition>#",
    		ast: [
    			{
    				typ: 2,
    				val: "single-transition",
    				isList: true
    			}
    		]
    	},
    	"transition-behavior": {
    		syntax: "<transition-behavior-value>#",
    		ast: [
    			{
    				typ: 2,
    				val: "transition-behavior-value",
    				isList: true
    			}
    		]
    	},
    	"transition-delay": {
    		syntax: "<time>#",
    		ast: [
    			{
    				typ: 2,
    				val: "time",
    				isList: true
    			}
    		]
    	},
    	"transition-duration": {
    		syntax: "<time>#",
    		ast: [
    			{
    				typ: 2,
    				val: "time",
    				isList: true
    			}
    		]
    	},
    	"transition-property": {
    		syntax: "none | <single-transition-property>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "single-transition-property",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"transition-timing-function": {
    		syntax: "<easing-function>#",
    		ast: [
    			{
    				typ: 2,
    				val: "easing-function",
    				isList: true
    			}
    		]
    	},
    	translate: {
    		syntax: "none | <length-percentage> [ <length-percentage> <length>? ]?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length",
    								isOptional: true
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"unicode-bidi": {
    		syntax: "normal | embed | isolate | bidi-override | isolate-override | plaintext",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "embed"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "isolate"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "bidi-override"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "isolate-override"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "plaintext"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"user-select": {
    		syntax: "auto | text | none | contain | all",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "text"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "contain"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "all"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"vector-effect": {
    		syntax: "none | non-scaling-stroke | non-scaling-size | non-rotation | fixed-position",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "non-scaling-stroke"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "non-scaling-size"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "non-rotation"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "fixed-position"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"vertical-align": {
    		syntax: "baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "baseline"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "sub"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "super"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "text-top"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "text-bottom"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "middle"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "top"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "bottom"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 2,
    																						val: "percentage"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 2,
    																						val: "length"
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"view-timeline": {
    		syntax: "[ <'view-timeline-name'> <'view-timeline-axis'>? ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 3,
    						val: "view-timeline-name"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 3,
    						val: "view-timeline-axis",
    						isOptional: true
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"view-timeline-axis": {
    		syntax: "[ block | inline | x | y ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "block"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "inline"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "x"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "y"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"view-timeline-inset": {
    		syntax: "[ [ auto | <length-percentage> ]{1,2} ]#",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						occurence: {
    							min: 1,
    							max: 2
    						}
    					}
    				],
    				isList: true
    			}
    		]
    	},
    	"view-timeline-name": {
    		syntax: "none | <dashed-ident>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "dashed-ident",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"view-transition-name": {
    		syntax: "none | <custom-ident>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "custom-ident"
    					}
    				]
    			}
    		]
    	},
    	visibility: {
    		syntax: "visible | hidden | collapse",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "visible"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "hidden"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "collapse"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"white-space": {
    		syntax: "normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "pre"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "nowrap"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "pre-wrap"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "pre-line"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "break-spaces"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 22,
    																chi: [
    																	{
    																		typ: 28,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 3,
    																				val: "white-space-collapse"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 28,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 3,
    																						val: "text-wrap"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 3,
    																						val: "white-space-trim"
    																					},
    																					{
    																						typ: 20
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"white-space-collapse": {
    		syntax: "collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "collapse"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "discard"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "preserve"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "preserve-breaks"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "preserve-spaces"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "break-spaces"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	widows: {
    		syntax: "<integer>",
    		ast: [
    			{
    				typ: 2,
    				val: "integer"
    			}
    		]
    	},
    	width: {
    		syntax: "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "min-content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "max-content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "fit-content"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 18,
    																val: "fit-content",
    																chi: [
    																	{
    																		typ: 2,
    																		val: "length-percentage"
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"will-change": {
    		syntax: "auto | <animateable-feature>#",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "animateable-feature",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"word-break": {
    		syntax: "normal | break-all | keep-all | break-word",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "break-all"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "keep-all"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "break-word"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"word-spacing": {
    		syntax: "normal | <length>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"word-wrap": {
    		syntax: "normal | break-word",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "break-word"
    					}
    				]
    			}
    		]
    	},
    	"writing-mode": {
    		syntax: "horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "horizontal-tb"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "vertical-rl"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "vertical-lr"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "sideways-rl"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "sideways-lr"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	x: {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	y: {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"z-index": {
    		syntax: "auto | <integer>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "integer"
    					}
    				]
    			}
    		]
    	},
    	zoom: {
    		syntax: "normal | reset | <number> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "reset"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "number"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	}
    };
    var functions = {
    	anchor: {
    		syntax: "anchor( <anchor-element>? <anchor-side>, <length-percentage>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "anchor",
    				chi: [
    					{
    						typ: 2,
    						val: "anchor-element",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "anchor-side"
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 39,
    							lin: 1,
    							col: 40
    						}
    					}
    				]
    			}
    		]
    	},
    	"anchor-size": {
    		syntax: "anchor-size( <anchor-element>? <anchor-size>, <length-percentage>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "anchor-size",
    				chi: [
    					{
    						typ: 2,
    						val: "anchor-element",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "anchor-size"
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 44,
    							lin: 1,
    							col: 45
    						}
    					}
    				]
    			}
    		]
    	},
    	attr: {
    		syntax: "attr( <attr-name> <type-or-unit>? [, <attr-fallback> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "attr",
    				chi: [
    					{
    						typ: 2,
    						val: "attr-name"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "type-or-unit",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "attr-fallback"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	blur: {
    		syntax: "blur( <length> )",
    		ast: [
    			{
    				typ: 18,
    				val: "blur",
    				chi: [
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	brightness: {
    		syntax: "brightness( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "brightness",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	calc: {
    		syntax: "calc( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "calc",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	circle: {
    		syntax: "circle( [ <shape-radius> ]? [ at <position> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "circle",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "shape-radius"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	clamp: {
    		syntax: "clamp( <calc-sum>#{3} )",
    		ast: [
    			{
    				typ: 18,
    				val: "clamp",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum",
    						isList: true,
    						occurence: {
    							min: 3,
    							max: 0
    						}
    					}
    				]
    			}
    		]
    	},
    	"conic-gradient": {
    		syntax: "conic-gradient( [ from <angle> ]? [ at <position> ]?, <angular-color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "conic-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "from"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "angle"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "angular-color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	contrast: {
    		syntax: "contrast( [ <number-percentage> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "contrast",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "number-percentage"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	counter: {
    		syntax: "counter( <custom-ident>, <counter-style>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "counter",
    				chi: [
    					{
    						typ: 2,
    						val: "custom-ident"
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "counter-style",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 23,
    							lin: 1,
    							col: 24
    						}
    					}
    				]
    			}
    		]
    	},
    	counters: {
    		syntax: "counters( <custom-ident>, <string>, <counter-style>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "counters",
    				chi: [
    					{
    						typ: 2,
    						val: "custom-ident"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "counter-style",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 34,
    							lin: 1,
    							col: 35
    						}
    					}
    				]
    			}
    		]
    	},
    	"cross-fade": {
    		syntax: "cross-fade( <cf-mixing-image> , <cf-final-image>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "cross-fade",
    				chi: [
    					{
    						typ: 2,
    						val: "cf-mixing-image"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "cf-final-image",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 30,
    							lin: 1,
    							col: 31
    						}
    					}
    				]
    			}
    		]
    	},
    	"drop-shadow": {
    		syntax: "drop-shadow( <length>{2,3} <color>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "drop-shadow",
    				chi: [
    					{
    						typ: 2,
    						val: "length",
    						occurence: {
    							min: 2,
    							max: 3
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	element: {
    		syntax: "element( <id-selector> )",
    		ast: [
    			{
    				typ: 18,
    				val: "element",
    				chi: [
    					{
    						typ: 2,
    						val: "id-selector"
    					}
    				]
    			}
    		]
    	},
    	ellipse: {
    		syntax: "ellipse( [ <shape-radius>{2} ]? [ at <position> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "ellipse",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "shape-radius",
    								occurence: {
    									min: 2,
    									max: 0
    								}
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	env: {
    		syntax: "env( <custom-ident> , <declaration-value>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "env",
    				chi: [
    					{
    						typ: 2,
    						val: "custom-ident"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "declaration-value",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 20,
    							lin: 1,
    							col: 21
    						}
    					}
    				]
    			}
    		]
    	},
    	"fit-content": {
    		syntax: "fit-content( [ <length> | <percentage> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "fit-content",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	grayscale: {
    		syntax: "grayscale( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "grayscale",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	hsl: {
    		syntax: "hsl( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsl( <hue>, <percentage>, <percentage>, <alpha-value>? )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "hsl",
    						chi: [
    							{
    								typ: 2,
    								val: "hue"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "alpha-value"
    									}
    								],
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "hsl",
    						chi: [
    							{
    								typ: 2,
    								val: "hue"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 10
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "alpha-value",
    										isOptional: true
    									}
    								],
    								pos: {
    									ind: 100,
    									lin: 1,
    									col: 101
    								}
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	hsla: {
    		syntax: "hsla( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsla( <hue>, <percentage>, <percentage>, <alpha-value>? )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "hsla",
    						chi: [
    							{
    								typ: 2,
    								val: "hue"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "alpha-value"
    									}
    								],
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "hsla",
    						chi: [
    							{
    								typ: 2,
    								val: "hue"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 10
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "alpha-value",
    										isOptional: true
    									}
    								],
    								pos: {
    									ind: 102,
    									lin: 1,
    									col: 103
    								}
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"hue-rotate": {
    		syntax: "hue-rotate( <angle> )",
    		ast: [
    			{
    				typ: 18,
    				val: "hue-rotate",
    				chi: [
    					{
    						typ: 2,
    						val: "angle"
    					}
    				]
    			}
    		]
    	},
    	image: {
    		syntax: "image( <image-tags>? [ <image-src>? , <color>? ]! )",
    		ast: [
    			{
    				typ: 18,
    				val: "image",
    				chi: [
    					{
    						typ: 2,
    						val: "image-tags",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 2,
    										val: "image-src",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 10
    									}
    								],
    								pos: {
    									ind: 22,
    									lin: 1,
    									col: 23
    								}
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color",
    								isOptional: true
    							}
    						],
    						isRepeatableGroup: true
    					}
    				]
    			}
    		]
    	},
    	"image-set": {
    		syntax: "image-set( <image-set-option># )",
    		ast: [
    			{
    				typ: 18,
    				val: "image-set",
    				chi: [
    					{
    						typ: 2,
    						val: "image-set-option",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	inset: {
    		syntax: "inset( <length-percentage>{1,4} [ round <'border-radius'> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "inset",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage",
    						occurence: {
    							min: 1,
    							max: 4
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "round"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-radius"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	invert: {
    		syntax: "invert( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "invert",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	leader: {
    		syntax: "leader( <leader-type> )",
    		ast: [
    			{
    				typ: 18,
    				val: "leader",
    				chi: [
    					{
    						typ: 2,
    						val: "leader-type"
    					}
    				]
    			}
    		]
    	},
    	"linear-gradient": {
    		syntax: "linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "linear-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "angle"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "to"
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "side-or-corner"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 10
    							}
    						],
    						pos: {
    							ind: 17,
    							lin: 1,
    							col: 18
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	matrix: {
    		syntax: "matrix( <number>#{6} )",
    		ast: [
    			{
    				typ: 18,
    				val: "matrix",
    				chi: [
    					{
    						typ: 2,
    						val: "number",
    						isList: true,
    						occurence: {
    							min: 6,
    							max: 0
    						}
    					}
    				]
    			}
    		]
    	},
    	matrix3d: {
    		syntax: "matrix3d( <number>#{16} )",
    		ast: [
    			{
    				typ: 18,
    				val: "matrix3d",
    				chi: [
    					{
    						typ: 2,
    						val: "number",
    						isList: true,
    						occurence: {
    							min: 16,
    							max: 0
    						}
    					}
    				]
    			}
    		]
    	},
    	max: {
    		syntax: "max( <calc-sum># )",
    		ast: [
    			{
    				typ: 18,
    				val: "max",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	min: {
    		syntax: "min( <calc-sum># )",
    		ast: [
    			{
    				typ: 18,
    				val: "min",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	minmax: {
    		syntax: "minmax( [ <length> | <percentage> | min-content | max-content | auto ] , [ <length> | <percentage> | <flex> | min-content | max-content | auto ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "minmax",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "percentage"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "min-content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "max-content"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "auto"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "percentage"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "flex"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "min-content"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "max-content"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "auto"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	oklab: {
    		syntax: "oklab( [ <percentage> | <number> | none] [ <percentage> | <number> | none] [ <percentage> | <number> | none] [ / [<alpha-value> | none] ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "oklab",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 24
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 2,
    												val: "alpha-value"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	oklch: {
    		syntax: "oklch( [ <percentage> | <number> | none] [ <percentage> | <number> | none] [ <hue> | none] [ / [<alpha-value> | none] ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "oklch",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "hue"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 24
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 2,
    												val: "alpha-value"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	opacity: {
    		syntax: "opacity( [ <number-percentage> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "opacity",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "number-percentage"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	path: {
    		syntax: "path( [ <fill-rule>, ]? <string> )",
    		ast: [
    			{
    				typ: 18,
    				val: "path",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "fill-rule"
    							},
    							{
    								typ: 10
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					}
    				]
    			}
    		]
    	},
    	paint: {
    		syntax: "paint( <ident>, <declaration-value>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "paint",
    				chi: [
    					{
    						typ: 2,
    						val: "ident"
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "declaration-value",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 14,
    							lin: 1,
    							col: 15
    						}
    					}
    				]
    			}
    		]
    	},
    	perspective: {
    		syntax: "perspective( <length> )",
    		ast: [
    			{
    				typ: 18,
    				val: "perspective",
    				chi: [
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	polygon: {
    		syntax: "polygon( <fill-rule>? , [ <length-percentage> <length-percentage> ]# )",
    		ast: [
    			{
    				typ: 18,
    				val: "polygon",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "fill-rule",
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 10
    							}
    						],
    						pos: {
    							ind: 8,
    							lin: 1,
    							col: 9
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							}
    						],
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"radial-gradient": {
    		syntax: "radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "radial-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "ending-shape"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "size"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	ray: {
    		syntax: "ray( <angle> && <ray-size>? && contain? && [at <position>]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "ray",
    				chi: [
    					{
    						typ: 29,
    						l: [
    							{
    								typ: 29,
    								l: [
    									{
    										typ: 29,
    										l: [
    											{
    												typ: 2,
    												val: "angle"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "ray-size",
    												isOptional: true
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "contain",
    										isOptional: true
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 1,
    										val: "at"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "position"
    									}
    								],
    								isOptional: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"repeating-linear-gradient": {
    		syntax: "repeating-linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "repeating-linear-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "angle"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "to"
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "side-or-corner"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 10
    							}
    						],
    						pos: {
    							ind: 27,
    							lin: 1,
    							col: 28
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	"repeating-radial-gradient": {
    		syntax: "repeating-radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "repeating-radial-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "ending-shape"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "size"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	rgb: {
    		syntax: "rgb( <percentage>{3} [ / <alpha-value> ]? ) | rgb( <number>{3} [ / <alpha-value> ]? ) | rgb( <percentage>#{3} , <alpha-value>? ) | rgb( <number>#{3} , <alpha-value>? )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "rgb",
    						chi: [
    							{
    								typ: 2,
    								val: "percentage",
    								occurence: {
    									min: 3,
    									max: 0
    								}
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "alpha-value"
    									}
    								],
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "rgb",
    								chi: [
    									{
    										typ: 2,
    										val: "number",
    										occurence: {
    											min: 3,
    											max: 0
    										}
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 24
    											},
    											{
    												typ: 2,
    												val: "alpha-value"
    											}
    										],
    										isOptional: true
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "rgb",
    										chi: [
    											{
    												typ: 2,
    												val: "percentage",
    												isList: true,
    												occurence: {
    													min: 3,
    													max: 0
    												}
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "alpha-value",
    														isOptional: true
    													}
    												],
    												pos: {
    													ind: 110,
    													lin: 1,
    													col: 111
    												}
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "rgb",
    										chi: [
    											{
    												typ: 2,
    												val: "number",
    												isList: true,
    												occurence: {
    													min: 3,
    													max: 0
    												}
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "alpha-value",
    														isOptional: true
    													}
    												],
    												pos: {
    													ind: 149,
    													lin: 1,
    													col: 150
    												}
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	rgba: {
    		syntax: "rgba( <percentage>{3} [ / <alpha-value> ]? ) | rgba( <number>{3} [ / <alpha-value> ]? ) | rgba( <percentage>#{3} , <alpha-value>? ) | rgba( <number>#{3} , <alpha-value>? )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "rgba",
    						chi: [
    							{
    								typ: 2,
    								val: "percentage",
    								occurence: {
    									min: 3,
    									max: 0
    								}
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "alpha-value"
    									}
    								],
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "rgba",
    								chi: [
    									{
    										typ: 2,
    										val: "number",
    										occurence: {
    											min: 3,
    											max: 0
    										}
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 24
    											},
    											{
    												typ: 2,
    												val: "alpha-value"
    											}
    										],
    										isOptional: true
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "rgba",
    										chi: [
    											{
    												typ: 2,
    												val: "percentage",
    												isList: true,
    												occurence: {
    													min: 3,
    													max: 0
    												}
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "alpha-value",
    														isOptional: true
    													}
    												],
    												pos: {
    													ind: 113,
    													lin: 1,
    													col: 114
    												}
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "rgba",
    										chi: [
    											{
    												typ: 2,
    												val: "number",
    												isList: true,
    												occurence: {
    													min: 3,
    													max: 0
    												}
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "alpha-value",
    														isOptional: true
    													}
    												],
    												pos: {
    													ind: 153,
    													lin: 1,
    													col: 154
    												}
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	rotate: {
    		syntax: "rotate( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotate",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	rotate3d: {
    		syntax: "rotate3d( <number> , <number> , <number> , [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotate3d",
    				chi: [
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	rotateX: {
    		syntax: "rotateX( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotateX",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	rotateY: {
    		syntax: "rotateY( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotateY",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	rotateZ: {
    		syntax: "rotateZ( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotateZ",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	saturate: {
    		syntax: "saturate( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "saturate",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	scale: {
    		syntax: "scale( <number> , <number>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "scale",
    				chi: [
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "number",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 16,
    							lin: 1,
    							col: 17
    						}
    					}
    				]
    			}
    		]
    	},
    	scale3d: {
    		syntax: "scale3d( <number> , <number> , <number> )",
    		ast: [
    			{
    				typ: 18,
    				val: "scale3d",
    				chi: [
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "number"
    					}
    				]
    			}
    		]
    	},
    	scaleX: {
    		syntax: "scaleX( <number> )",
    		ast: [
    			{
    				typ: 18,
    				val: "scaleX",
    				chi: [
    					{
    						typ: 2,
    						val: "number"
    					}
    				]
    			}
    		]
    	},
    	scaleY: {
    		syntax: "scaleY( <number> )",
    		ast: [
    			{
    				typ: 18,
    				val: "scaleY",
    				chi: [
    					{
    						typ: 2,
    						val: "number"
    					}
    				]
    			}
    		]
    	},
    	scaleZ: {
    		syntax: "scaleZ( <number> )",
    		ast: [
    			{
    				typ: 18,
    				val: "scaleZ",
    				chi: [
    					{
    						typ: 2,
    						val: "number"
    					}
    				]
    			}
    		]
    	},
    	scroll: {
    		syntax: "scroll([<axis> || <scroller>]?)",
    		ast: [
    			{
    				typ: 18,
    				val: "scroll",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 2,
    										val: "axis"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "scroller"
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	skew: {
    		syntax: "skew( [ <angle> | <zero> ] , [ <angle> | <zero> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "skew",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "angle"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "zero"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 27,
    							lin: 1,
    							col: 28
    						}
    					}
    				]
    			}
    		]
    	},
    	skewX: {
    		syntax: "skewX( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "skewX",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	skewY: {
    		syntax: "skewY( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "skewY",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	sepia: {
    		syntax: "sepia( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "sepia",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	"target-counter": {
    		syntax: "target-counter( [ <string> | <url> ] , <custom-ident> , <counter-style>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "target-counter",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "url"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "custom-ident"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "counter-style",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 54,
    							lin: 1,
    							col: 55
    						}
    					}
    				]
    			}
    		]
    	},
    	"target-counters": {
    		syntax: "target-counters( [ <string> | <url> ] , <custom-ident> , <string> , <counter-style>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "target-counters",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "url"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "custom-ident"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "counter-style",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 66,
    							lin: 1,
    							col: 67
    						}
    					}
    				]
    			}
    		]
    	},
    	"target-text": {
    		syntax: "target-text( [ <string> | <url> ] , [ content | before | after | first-letter ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "target-text",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "url"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "before"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "after"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "first-letter"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								],
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 34,
    							lin: 1,
    							col: 35
    						}
    					}
    				]
    			}
    		]
    	},
    	translate: {
    		syntax: "translate( <length-percentage> , <length-percentage>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "translate",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 31,
    							lin: 1,
    							col: 32
    						}
    					}
    				]
    			}
    		]
    	},
    	translate3d: {
    		syntax: "translate3d( <length-percentage> , <length-percentage> , <length> )",
    		ast: [
    			{
    				typ: 18,
    				val: "translate3d",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	translateX: {
    		syntax: "translateX( <length-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "translateX",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	translateY: {
    		syntax: "translateY( <length-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "translateY",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	translateZ: {
    		syntax: "translateZ( <length> )",
    		ast: [
    			{
    				typ: 18,
    				val: "translateZ",
    				chi: [
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"var": {
    		syntax: "var( <custom-property-name> , <declaration-value>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "var",
    				chi: [
    					{
    						typ: 2,
    						val: "custom-property-name"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "declaration-value",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 28,
    							lin: 1,
    							col: 29
    						}
    					}
    				]
    			}
    		]
    	},
    	view: {
    		syntax: "view([<axis> || <'view-timeline-inset'>]?)",
    		ast: [
    			{
    				typ: 18,
    				val: "view",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 2,
    										val: "axis"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "view-timeline-inset"
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	}
    };
    var syntaxes = {
    	"abs()": {
    		syntax: "abs( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "abs",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"absolute-size": {
    		syntax: "xx-small | x-small | small | medium | large | x-large | xx-large | xxx-large",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "xx-small"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "x-small"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "small"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "medium"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "large"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "x-large"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "xx-large"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "xxx-large"
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"acos()": {
    		syntax: "acos( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "acos",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"alpha-value": {
    		syntax: "<number> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"angle-percentage": {
    		syntax: "<angle> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "angle"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"angular-color-hint": {
    		syntax: "<angle-percentage>",
    		ast: [
    			{
    				typ: 2,
    				val: "angle-percentage"
    			}
    		]
    	},
    	"angular-color-stop": {
    		syntax: "<color> && <color-stop-angle>?",
    		ast: [
    			{
    				typ: 29,
    				l: [
    					{
    						typ: 2,
    						val: "color"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-angle",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"angular-color-stop-list": {
    		syntax: "[ <angular-color-stop> [, <angular-color-hint>]? ]# , <angular-color-stop>",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "angular-color-stop"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "angular-color-hint"
    							}
    						],
    						isOptional: true
    					}
    				],
    				isList: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 10
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "angular-color-stop"
    			}
    		]
    	},
    	"animateable-feature": {
    		syntax: "scroll-position | contents | <custom-ident>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "scroll-position"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "contents"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "custom-ident"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"asin()": {
    		syntax: "asin( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "asin",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"atan()": {
    		syntax: "atan( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "atan",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"atan2()": {
    		syntax: "atan2( <calc-sum>, <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "atan2",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	attachment: {
    		syntax: "scroll | fixed | local",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "scroll"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "fixed"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "local"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"attr()": {
    		syntax: "attr( <attr-name> <type-or-unit>? [, <attr-fallback> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "attr",
    				chi: [
    					{
    						typ: 2,
    						val: "attr-name"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "type-or-unit",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "attr-fallback"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"attr-matcher": {
    		syntax: "[ '~' | '|' | '^' | '$' | '*' ]? '='",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 33,
    								val: "'~'"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'|'"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 33,
    												val: "'^'"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 33,
    														val: "'$'"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 33,
    														val: "'*'"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 33,
    				val: "'='"
    			}
    		]
    	},
    	"attr-modifier": {
    		syntax: "i | s",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "i"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "s"
    					}
    				]
    			}
    		]
    	},
    	"attribute-selector": {
    		syntax: "'[' <wq-name> ']' | '[' <wq-name> <attr-matcher> [ <string-token> | <ident-token> ] <attr-modifier>? ']'",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 33,
    						val: "'['"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "wq-name"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 33,
    						val: "']'"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 33,
    						val: "'['"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "wq-name"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "attr-matcher"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string-token"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "ident-token"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "attr-modifier",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 33,
    						val: "']'"
    					}
    				]
    			}
    		]
    	},
    	"auto-repeat": {
    		syntax: "repeat( [ auto-fill | auto-fit ] , [ <line-names>? <fixed-size> ]+ <line-names>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "repeat",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto-fill"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto-fit"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "line-names",
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "fixed-size"
    							}
    						],
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "line-names",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"auto-track-list": {
    		syntax: "[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>? <auto-repeat>\n[ <line-names>? [ <fixed-size> | <fixed-repeat> ] ]* <line-names>?",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "line-names",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "fixed-size"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "fixed-repeat"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				isRepeatable: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "line-names",
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "auto-repeat"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "line-names",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "fixed-size"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "fixed-repeat"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				isRepeatable: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "line-names",
    				isOptional: true
    			}
    		]
    	},
    	axis: {
    		syntax: "block | inline | vertical | horizontal",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "block"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "inline"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "vertical"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "horizontal"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"baseline-position": {
    		syntax: "[ first | last ]? baseline",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "first"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "last"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 1,
    				val: "baseline"
    			}
    		]
    	},
    	"basic-shape": {
    		syntax: "<inset()> | <circle()> | <ellipse()> | <polygon()> | <path()>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 5,
    						val: "inset"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 5,
    								val: "circle"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 5,
    										val: "ellipse"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 5,
    												val: "polygon"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 5,
    												val: "path"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"bg-image": {
    		syntax: "none | <image>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "image"
    					}
    				]
    			}
    		]
    	},
    	"bg-layer": {
    		syntax: "<bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 2,
    						val: "bg-image"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "bg-position"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "bg-size"
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "repeat-style"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "attachment"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "box"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "box"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"bg-position": {
    		syntax: "[ [ left | center | right | top | bottom | <length-percentage> ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ] | [ center | [ left | right ] <length-percentage>? ] && [ center | [ top | bottom ] <length-percentage>? ] ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "left"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "center"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "right"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "top"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "bottom"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 2,
    																				val: "length-percentage"
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "left"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "center"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "right"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "length-percentage"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "top"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "center"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "bottom"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "length-percentage"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 29,
    										l: [
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "center"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 22,
    																chi: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "left"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "right"
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															},
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "length-percentage",
    																isOptional: true
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "center"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 22,
    																chi: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "top"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "bottom"
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															},
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "length-percentage",
    																isOptional: true
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"bg-size": {
    		syntax: "[ <length-percentage> | auto ]{1,2} | cover | contain",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						occurence: {
    							min: 1,
    							max: 2
    						}
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "cover"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "contain"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"blur()": {
    		syntax: "blur( <length> )",
    		ast: [
    			{
    				typ: 18,
    				val: "blur",
    				chi: [
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"blend-mode": {
    		syntax: "normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "multiply"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "screen"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "overlay"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "darken"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "lighten"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "color-dodge"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "color-burn"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "hard-light"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "soft-light"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "difference"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "exclusion"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "hue"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 27,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 1,
    																																val: "saturation"
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 27,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "color"
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "luminosity"
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	box: {
    		syntax: "border-box | padding-box | content-box",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "border-box"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "padding-box"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "content-box"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"brightness()": {
    		syntax: "brightness( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "brightness",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	"calc()": {
    		syntax: "calc( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "calc",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"calc-sum": {
    		syntax: "<calc-product> [ [ '+' | '-' ] <calc-product> ]*",
    		ast: [
    			{
    				typ: 2,
    				val: "calc-product"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'+'"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'-'"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "calc-product"
    					}
    				],
    				isRepeatable: true
    			}
    		]
    	},
    	"calc-product": {
    		syntax: "<calc-value> [ '*' <calc-value> | '/' <number> ]*",
    		ast: [
    			{
    				typ: 2,
    				val: "calc-value"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 33,
    								val: "'*'"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "calc-value"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 33,
    								val: "'/'"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "number"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isRepeatable: true
    			}
    		]
    	},
    	"calc-value": {
    		syntax: "<number> | <dimension> | <percentage> | <calc-constant> | ( <calc-sum> )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "dimension"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "calc-constant"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 18,
    												chi: [
    													{
    														typ: 2,
    														val: "calc-sum"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"calc-constant": {
    		syntax: "e | pi | infinity | -infinity | NaN",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "e"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "pi"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "infinity"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "-infinity"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "NaN"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"cf-final-image": {
    		syntax: "<image> | <color>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "image"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color"
    					}
    				]
    			}
    		]
    	},
    	"cf-mixing-image": {
    		syntax: "<percentage>? && <image>",
    		ast: [
    			{
    				typ: 29,
    				l: [
    					{
    						typ: 2,
    						val: "percentage",
    						isOptional: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "image"
    					}
    				]
    			}
    		]
    	},
    	"circle()": {
    		syntax: "circle( [ <shape-radius> ]? [ at <position> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "circle",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "shape-radius"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"clamp()": {
    		syntax: "clamp( <calc-sum>#{3} )",
    		ast: [
    			{
    				typ: 18,
    				val: "clamp",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum",
    						isList: true,
    						occurence: {
    							min: 3,
    							max: 0
    						}
    					}
    				]
    			}
    		]
    	},
    	"class-selector": {
    		syntax: "'.' <ident-token>",
    		ast: [
    			{
    				typ: 33,
    				val: "'.'"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "ident-token"
    			}
    		]
    	},
    	"clip-source": {
    		syntax: "<url>",
    		ast: [
    			{
    				typ: 2,
    				val: "url"
    			}
    		]
    	},
    	color: {
    		syntax: "<rgb()> | <rgba()> | <hsl()> | <hsla()> | <hwb()> | <lab()> | <lch()> | <light-dark()> | <hex-color> | <named-color> | currentcolor | <deprecated-system-color>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 5,
    						val: "rgb"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 5,
    								val: "rgba"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 5,
    										val: "hsl"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 5,
    												val: "hsla"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 5,
    														val: "hwb"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 5,
    																val: "lab"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 5,
    																		val: "lch"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 5,
    																				val: "light-dark"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 2,
    																						val: "hex-color"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 2,
    																								val: "named-color"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "currentcolor"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 2,
    																										val: "deprecated-system-color"
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"color-stop": {
    		syntax: "<color-stop-length> | <color-stop-angle>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "color-stop-length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-angle"
    					}
    				]
    			}
    		]
    	},
    	"color-stop-angle": {
    		syntax: "<angle-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "angle-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"color-stop-length": {
    		syntax: "<length-percentage>{1,2}",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage",
    				occurence: {
    					min: 1,
    					max: 2
    				}
    			}
    		]
    	},
    	"color-stop-list": {
    		syntax: "[ <linear-color-stop> [, <linear-color-hint>]? ]# , <linear-color-stop>",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "linear-color-stop"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "linear-color-hint"
    							}
    						],
    						isOptional: true
    					}
    				],
    				isList: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 10
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "linear-color-stop"
    			}
    		]
    	},
    	combinator: {
    		syntax: "'>' | '+' | '~' | [ '||' ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 33,
    						val: "'>'"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 33,
    								val: "'+'"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'~'"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 33,
    												val: "'||'"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"common-lig-values": {
    		syntax: "[ common-ligatures | no-common-ligatures ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "common-ligatures"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "no-common-ligatures"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"compat-auto": {
    		syntax: "searchfield | textarea | push-button | slider-horizontal | checkbox | radio | square-button | menulist | listbox | meter | progress-bar | button",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "searchfield"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "textarea"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "push-button"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "slider-horizontal"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "checkbox"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "radio"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "square-button"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "menulist"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "listbox"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "meter"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "progress-bar"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "button"
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"composite-style": {
    		syntax: "clear | copy | source-over | source-in | source-out | source-atop | destination-over | destination-in | destination-out | destination-atop | xor",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "clear"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "copy"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "source-over"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "source-in"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "source-out"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "source-atop"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "destination-over"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "destination-in"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "destination-out"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "destination-atop"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "xor"
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"compositing-operator": {
    		syntax: "add | subtract | intersect | exclude",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "add"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "subtract"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "intersect"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "exclude"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"compound-selector": {
    		syntax: "[ <type-selector>? <subclass-selector>* [ <pseudo-element-selector> <pseudo-class-selector>* ]* ]!",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "type-selector",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "subclass-selector",
    						isRepeatable: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "pseudo-element-selector"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "pseudo-class-selector",
    								isRepeatable: true
    							}
    						],
    						isRepeatable: true
    					}
    				],
    				isRepeatableGroup: true
    			}
    		]
    	},
    	"compound-selector-list": {
    		syntax: "<compound-selector>#",
    		ast: [
    			{
    				typ: 2,
    				val: "compound-selector",
    				isList: true
    			}
    		]
    	},
    	"complex-selector": {
    		syntax: "<compound-selector> [ <combinator>? <compound-selector> ]*",
    		ast: [
    			{
    				typ: 2,
    				val: "compound-selector"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "combinator",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "compound-selector"
    					}
    				],
    				isRepeatable: true
    			}
    		]
    	},
    	"complex-selector-list": {
    		syntax: "<complex-selector>#",
    		ast: [
    			{
    				typ: 2,
    				val: "complex-selector",
    				isList: true
    			}
    		]
    	},
    	"conic-gradient()": {
    		syntax: "conic-gradient( [ from <angle> ]? [ at <position> ]?, <angular-color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "conic-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "from"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "angle"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "angular-color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	"contextual-alt-values": {
    		syntax: "[ contextual | no-contextual ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "contextual"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "no-contextual"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"content-distribution": {
    		syntax: "space-between | space-around | space-evenly | stretch",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "space-between"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "space-around"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "space-evenly"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "stretch"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"content-list": {
    		syntax: "[ <string> | contents | <image> | <counter> | <quote> | <target> | <leader()> ]+",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "string"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "contents"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "image"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "counter"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "quote"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "target"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 5,
    																		val: "leader"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				atLeastOnce: true
    			}
    		]
    	},
    	"content-position": {
    		syntax: "center | start | end | flex-start | flex-end",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "center"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "start"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "end"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "flex-start"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "flex-end"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"content-replacement": {
    		syntax: "<image>",
    		ast: [
    			{
    				typ: 2,
    				val: "image"
    			}
    		]
    	},
    	"contrast()": {
    		syntax: "contrast( [ <number-percentage> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "contrast",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "number-percentage"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"cos()": {
    		syntax: "cos( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "cos",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	counter: {
    		syntax: "<counter()> | <counters()>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 5,
    						val: "counter"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 5,
    						val: "counters"
    					}
    				]
    			}
    		]
    	},
    	"counter()": {
    		syntax: "counter( <counter-name>, <counter-style>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "counter",
    				chi: [
    					{
    						typ: 2,
    						val: "counter-name"
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "counter-style",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 23,
    							lin: 1,
    							col: 24
    						}
    					}
    				]
    			}
    		]
    	},
    	"counter-name": {
    		syntax: "<custom-ident>",
    		ast: [
    			{
    				typ: 2,
    				val: "custom-ident"
    			}
    		]
    	},
    	"counter-style": {
    		syntax: "<counter-style-name> | symbols()",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "counter-style-name"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "symbols",
    						chi: [
    						]
    					}
    				]
    			}
    		]
    	},
    	"counter-style-name": {
    		syntax: "<custom-ident>",
    		ast: [
    			{
    				typ: 2,
    				val: "custom-ident"
    			}
    		]
    	},
    	"counters()": {
    		syntax: "counters( <counter-name>, <string>, <counter-style>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "counters",
    				chi: [
    					{
    						typ: 2,
    						val: "counter-name"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "counter-style",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 34,
    							lin: 1,
    							col: 35
    						}
    					}
    				]
    			}
    		]
    	},
    	"cross-fade()": {
    		syntax: "cross-fade( <cf-mixing-image> , <cf-final-image>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "cross-fade",
    				chi: [
    					{
    						typ: 2,
    						val: "cf-mixing-image"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "cf-final-image",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 30,
    							lin: 1,
    							col: 31
    						}
    					}
    				]
    			}
    		]
    	},
    	"cubic-bezier-timing-function": {
    		syntax: "ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number [0,1]>, <number>, <number [0,1]>, <number>)",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "ease"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "ease-in"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "ease-out"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "ease-in-out"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 18,
    												val: "cubic-bezier",
    												chi: [
    													{
    														typ: 2,
    														val: "number",
    														range: [
    															0,
    															1
    														]
    													},
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "number"
    													},
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "number",
    														range: [
    															0,
    															1
    														]
    													},
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "number"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"deprecated-system-color": {
    		syntax: "ActiveBorder | ActiveCaption | AppWorkspace | Background | ButtonFace | ButtonHighlight | ButtonShadow | ButtonText | CaptionText | GrayText | Highlight | HighlightText | InactiveBorder | InactiveCaption | InactiveCaptionText | InfoBackground | InfoText | Menu | MenuText | Scrollbar | ThreeDDarkShadow | ThreeDFace | ThreeDHighlight | ThreeDLightShadow | ThreeDShadow | Window | WindowFrame | WindowText",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "ActiveBorder"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "ActiveCaption"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "AppWorkspace"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "Background"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "ButtonFace"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "ButtonHighlight"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "ButtonShadow"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "ButtonText"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "CaptionText"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "GrayText"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "Highlight"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "HighlightText"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "InactiveBorder"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 27,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 1,
    																																val: "InactiveCaption"
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 27,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "InactiveCaptionText"
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 27,
    																																		l: [
    																																			{
    																																				typ: 20
    																																			},
    																																			{
    																																				typ: 1,
    																																				val: "InfoBackground"
    																																			},
    																																			{
    																																				typ: 20
    																																			}
    																																		],
    																																		r: [
    																																			{
    																																				typ: 27,
    																																				l: [
    																																					{
    																																						typ: 20
    																																					},
    																																					{
    																																						typ: 1,
    																																						val: "InfoText"
    																																					},
    																																					{
    																																						typ: 20
    																																					}
    																																				],
    																																				r: [
    																																					{
    																																						typ: 27,
    																																						l: [
    																																							{
    																																								typ: 20
    																																							},
    																																							{
    																																								typ: 1,
    																																								val: "Menu"
    																																							},
    																																							{
    																																								typ: 20
    																																							}
    																																						],
    																																						r: [
    																																							{
    																																								typ: 27,
    																																								l: [
    																																									{
    																																										typ: 20
    																																									},
    																																									{
    																																										typ: 1,
    																																										val: "MenuText"
    																																									},
    																																									{
    																																										typ: 20
    																																									}
    																																								],
    																																								r: [
    																																									{
    																																										typ: 27,
    																																										l: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 1,
    																																												val: "Scrollbar"
    																																											},
    																																											{
    																																												typ: 20
    																																											}
    																																										],
    																																										r: [
    																																											{
    																																												typ: 27,
    																																												l: [
    																																													{
    																																														typ: 20
    																																													},
    																																													{
    																																														typ: 1,
    																																														val: "ThreeDDarkShadow"
    																																													},
    																																													{
    																																														typ: 20
    																																													}
    																																												],
    																																												r: [
    																																													{
    																																														typ: 27,
    																																														l: [
    																																															{
    																																																typ: 20
    																																															},
    																																															{
    																																																typ: 1,
    																																																val: "ThreeDFace"
    																																															},
    																																															{
    																																																typ: 20
    																																															}
    																																														],
    																																														r: [
    																																															{
    																																																typ: 27,
    																																																l: [
    																																																	{
    																																																		typ: 20
    																																																	},
    																																																	{
    																																																		typ: 1,
    																																																		val: "ThreeDHighlight"
    																																																	},
    																																																	{
    																																																		typ: 20
    																																																	}
    																																																],
    																																																r: [
    																																																	{
    																																																		typ: 27,
    																																																		l: [
    																																																			{
    																																																				typ: 20
    																																																			},
    																																																			{
    																																																				typ: 1,
    																																																				val: "ThreeDLightShadow"
    																																																			},
    																																																			{
    																																																				typ: 20
    																																																			}
    																																																		],
    																																																		r: [
    																																																			{
    																																																				typ: 27,
    																																																				l: [
    																																																					{
    																																																						typ: 20
    																																																					},
    																																																					{
    																																																						typ: 1,
    																																																						val: "ThreeDShadow"
    																																																					},
    																																																					{
    																																																						typ: 20
    																																																					}
    																																																				],
    																																																				r: [
    																																																					{
    																																																						typ: 27,
    																																																						l: [
    																																																							{
    																																																								typ: 20
    																																																							},
    																																																							{
    																																																								typ: 1,
    																																																								val: "Window"
    																																																							},
    																																																							{
    																																																								typ: 20
    																																																							}
    																																																						],
    																																																						r: [
    																																																							{
    																																																								typ: 27,
    																																																								l: [
    																																																									{
    																																																										typ: 20
    																																																									},
    																																																									{
    																																																										typ: 1,
    																																																										val: "WindowFrame"
    																																																									},
    																																																									{
    																																																										typ: 20
    																																																									}
    																																																								],
    																																																								r: [
    																																																									{
    																																																										typ: 20
    																																																									},
    																																																									{
    																																																										typ: 1,
    																																																										val: "WindowText"
    																																																									}
    																																																								]
    																																																							}
    																																																						]
    																																																					}
    																																																				]
    																																																			}
    																																																		]
    																																																	}
    																																																]
    																																															}
    																																														]
    																																													}
    																																												]
    																																											}
    																																										]
    																																									}
    																																								]
    																																							}
    																																						]
    																																					}
    																																				]
    																																			}
    																																		]
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"discretionary-lig-values": {
    		syntax: "[ discretionary-ligatures | no-discretionary-ligatures ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "discretionary-ligatures"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "no-discretionary-ligatures"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"display-box": {
    		syntax: "contents | none",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "contents"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "none"
    					}
    				]
    			}
    		]
    	},
    	"display-inside": {
    		syntax: "flow | flow-root | table | flex | grid | ruby",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "flow"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "flow-root"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "table"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "flex"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "grid"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "ruby"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"display-internal": {
    		syntax: "table-row-group | table-header-group | table-footer-group | table-row | table-cell | table-column-group | table-column | table-caption | ruby-base | ruby-text | ruby-base-container | ruby-text-container",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "table-row-group"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "table-header-group"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "table-footer-group"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "table-row"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "table-cell"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "table-column-group"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "table-column"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "table-caption"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "ruby-base"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "ruby-text"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "ruby-base-container"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "ruby-text-container"
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"display-legacy": {
    		syntax: "inline-block | inline-list-item | inline-table | inline-flex | inline-grid",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "inline-block"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "inline-list-item"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "inline-table"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "inline-flex"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "inline-grid"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"display-listitem": {
    		syntax: "<display-outside>? && [ flow | flow-root ]? && list-item",
    		ast: [
    			{
    				typ: 29,
    				l: [
    					{
    						typ: 29,
    						l: [
    							{
    								typ: 2,
    								val: "display-outside",
    								isOptional: true
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "flow"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "flow-root"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "list-item"
    					}
    				]
    			}
    		]
    	},
    	"display-outside": {
    		syntax: "block | inline | run-in",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "block"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "inline"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "run-in"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"drop-shadow()": {
    		syntax: "drop-shadow( <length>{2,3} <color>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "drop-shadow",
    				chi: [
    					{
    						typ: 2,
    						val: "length",
    						occurence: {
    							min: 2,
    							max: 3
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"east-asian-variant-values": {
    		syntax: "[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "jis78"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "jis83"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "jis90"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "jis04"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "simplified"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "traditional"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"east-asian-width-values": {
    		syntax: "[ full-width | proportional-width ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "full-width"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "proportional-width"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"element()": {
    		syntax: "element( <id-selector> )",
    		ast: [
    			{
    				typ: 18,
    				val: "element",
    				chi: [
    					{
    						typ: 2,
    						val: "id-selector"
    					}
    				]
    			}
    		]
    	},
    	"ellipse()": {
    		syntax: "ellipse( [ <shape-radius>{2} ]? [ at <position> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "ellipse",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "shape-radius",
    								occurence: {
    									min: 2,
    									max: 0
    								}
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"ending-shape": {
    		syntax: "circle | ellipse",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "circle"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "ellipse"
    					}
    				]
    			}
    		]
    	},
    	"env()": {
    		syntax: "env( <custom-ident> , <declaration-value>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "env",
    				chi: [
    					{
    						typ: 2,
    						val: "custom-ident"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "declaration-value",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 20,
    							lin: 1,
    							col: 21
    						}
    					}
    				]
    			}
    		]
    	},
    	"exp()": {
    		syntax: "exp( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "exp",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"explicit-track-list": {
    		syntax: "[ <line-names>? <track-size> ]+ <line-names>?",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "line-names",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "track-size"
    					}
    				],
    				atLeastOnce: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "line-names",
    				isOptional: true
    			}
    		]
    	},
    	"family-name": {
    		syntax: "<string> | <custom-ident>+",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "string"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "custom-ident",
    						atLeastOnce: true
    					}
    				]
    			}
    		]
    	},
    	"feature-tag-value": {
    		syntax: "<string> [ <integer> | on | off ]?",
    		ast: [
    			{
    				typ: 2,
    				val: "string"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "integer"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "on"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "off"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"feature-type": {
    		syntax: "@stylistic | @historical-forms | @styleset | @character-variant | @swash | @ornaments | @annotation",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "@stylistic"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "@historical-forms"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "@styleset"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "@character-variant"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "@swash"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "@ornaments"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "@annotation"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"feature-value-block": {
    		syntax: "<feature-type> '{' <feature-value-declaration-list> '}'",
    		ast: [
    			{
    				typ: 2,
    				val: "feature-type"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 33,
    				val: "'{'"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "feature-value-declaration-list"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 33,
    				val: "'}'"
    			}
    		]
    	},
    	"feature-value-block-list": {
    		syntax: "<feature-value-block>+",
    		ast: [
    			{
    				typ: 2,
    				val: "feature-value-block",
    				atLeastOnce: true
    			}
    		]
    	},
    	"feature-value-declaration": {
    		syntax: "<custom-ident>: <integer>+;",
    		ast: [
    			{
    				typ: 2,
    				val: "custom-ident"
    			},
    			{
    				typ: 1,
    				val: ":"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "integer",
    				atLeastOnce: true
    			},
    			{
    				typ: 1,
    				val: ";"
    			}
    		]
    	},
    	"feature-value-declaration-list": {
    		syntax: "<feature-value-declaration>",
    		ast: [
    			{
    				typ: 2,
    				val: "feature-value-declaration"
    			}
    		]
    	},
    	"feature-value-name": {
    		syntax: "<custom-ident>",
    		ast: [
    			{
    				typ: 2,
    				val: "custom-ident"
    			}
    		]
    	},
    	"fill-rule": {
    		syntax: "nonzero | evenodd",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "nonzero"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "evenodd"
    					}
    				]
    			}
    		]
    	},
    	"filter-function": {
    		syntax: "<blur()> | <brightness()> | <contrast()> | <drop-shadow()> | <grayscale()> | <hue-rotate()> | <invert()> | <opacity()> | <saturate()> | <sepia()>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 5,
    						val: "blur"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 5,
    								val: "brightness"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 5,
    										val: "contrast"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 5,
    												val: "drop-shadow"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 5,
    														val: "grayscale"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 5,
    																val: "hue-rotate"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 5,
    																		val: "invert"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 5,
    																				val: "opacity"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 5,
    																						val: "saturate"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 5,
    																						val: "sepia"
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"filter-function-list": {
    		syntax: "[ <filter-function> | <url> ]+",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "filter-function"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "url"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				atLeastOnce: true
    			}
    		]
    	},
    	"final-bg-layer": {
    		syntax: "<'background-color'> || <bg-image> || <bg-position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "background-color"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "bg-image"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "bg-position"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 24
    											},
    											{
    												typ: 2,
    												val: "bg-size"
    											}
    										],
    										isOptional: true
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "repeat-style"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "attachment"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "box"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "box"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"fixed-breadth": {
    		syntax: "<length-percentage>",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage"
    			}
    		]
    	},
    	"fixed-repeat": {
    		syntax: "repeat( [ <integer [1,∞]> ] , [ <line-names>? <fixed-size> ]+ <line-names>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "repeat",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "integer",
    								range: [
    									1,
    									null
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "line-names",
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "fixed-size"
    							}
    						],
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "line-names",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"fixed-size": {
    		syntax: "<fixed-breadth> | minmax( <fixed-breadth> , <track-breadth> ) | minmax( <inflexible-breadth> , <fixed-breadth> )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "fixed-breadth"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "minmax",
    								chi: [
    									{
    										typ: 2,
    										val: "fixed-breadth"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 10
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "track-breadth"
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "minmax",
    								chi: [
    									{
    										typ: 2,
    										val: "inflexible-breadth"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 10
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "fixed-breadth"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-stretch-absolute": {
    		syntax: "normal | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "ultra-condensed"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "extra-condensed"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "condensed"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "semi-condensed"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "semi-expanded"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "expanded"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "extra-expanded"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "ultra-expanded"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 2,
    																						val: "percentage"
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-variant-css21": {
    		syntax: "[ normal | small-caps ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "normal"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "small-caps"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"font-weight-absolute": {
    		syntax: "normal | bold | <number [1,1000]>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "bold"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "number",
    								range: [
    									1,
    									1000
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"frequency-percentage": {
    		syntax: "<frequency> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "frequency"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"general-enclosed": {
    		syntax: "[ <function-token> <any-value> ) ] | ( <ident> <any-value> )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "function-token"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "any-value"
    							},
    							{
    								typ: 20
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "ident"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "any-value"
    					},
    					{
    						typ: 20
    					}
    				]
    			}
    		]
    	},
    	"generic-family": {
    		syntax: "serif | sans-serif | cursive | fantasy | monospace",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "serif"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "sans-serif"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "cursive"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "fantasy"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "monospace"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"generic-name": {
    		syntax: "serif | sans-serif | cursive | fantasy | monospace",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "serif"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "sans-serif"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "cursive"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "fantasy"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "monospace"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"geometry-box": {
    		syntax: "<shape-box> | fill-box | stroke-box | view-box",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "shape-box"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "fill-box"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "stroke-box"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "view-box"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	gradient: {
    		syntax: "<linear-gradient()> | <repeating-linear-gradient()> | <radial-gradient()> | <repeating-radial-gradient()> | <conic-gradient()> | <repeating-conic-gradient()>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 5,
    						val: "linear-gradient"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 5,
    								val: "repeating-linear-gradient"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 5,
    										val: "radial-gradient"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 5,
    												val: "repeating-radial-gradient"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 5,
    														val: "conic-gradient"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 5,
    														val: "repeating-conic-gradient"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"grayscale()": {
    		syntax: "grayscale( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "grayscale",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	"grid-line": {
    		syntax: "auto | <custom-ident> | [ <integer> && <custom-ident>? ] | [ span && [ <integer> || <custom-ident> ] ]",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "custom-ident"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 29,
    												l: [
    													{
    														typ: 2,
    														val: "integer"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "custom-ident",
    														isOptional: true
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 29,
    												l: [
    													{
    														typ: 1,
    														val: "span"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 22,
    														chi: [
    															{
    																typ: 28,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "integer"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "custom-ident"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"historical-lig-values": {
    		syntax: "[ historical-ligatures | no-historical-ligatures ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "historical-ligatures"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "no-historical-ligatures"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"hsl()": {
    		syntax: "hsl( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsl( <hue>, <percentage>, <percentage>, <alpha-value>? )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "hsl",
    						chi: [
    							{
    								typ: 2,
    								val: "hue"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "alpha-value"
    									}
    								],
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "hsl",
    						chi: [
    							{
    								typ: 2,
    								val: "hue"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 10
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "alpha-value",
    										isOptional: true
    									}
    								],
    								pos: {
    									ind: 100,
    									lin: 1,
    									col: 101
    								}
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"hsla()": {
    		syntax: "hsla( <hue> <percentage> <percentage> [ / <alpha-value> ]? ) | hsla( <hue>, <percentage>, <percentage>, <alpha-value>? )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "hsla",
    						chi: [
    							{
    								typ: 2,
    								val: "hue"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "alpha-value"
    									}
    								],
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 18,
    						val: "hsla",
    						chi: [
    							{
    								typ: 2,
    								val: "hue"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "percentage"
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 10
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "alpha-value",
    										isOptional: true
    									}
    								],
    								pos: {
    									ind: 102,
    									lin: 1,
    									col: 103
    								}
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	hue: {
    		syntax: "<number> | <angle>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "angle"
    					}
    				]
    			}
    		]
    	},
    	"hue-rotate()": {
    		syntax: "hue-rotate( <angle> )",
    		ast: [
    			{
    				typ: 18,
    				val: "hue-rotate",
    				chi: [
    					{
    						typ: 2,
    						val: "angle"
    					}
    				]
    			}
    		]
    	},
    	"hwb()": {
    		syntax: "hwb( [<hue> | none] [<percentage> | none] [<percentage> | none] [ / [<alpha-value> | none] ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "hwb",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 2,
    										val: "hue"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 24
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 2,
    												val: "alpha-value"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"hypot()": {
    		syntax: "hypot( <calc-sum># )",
    		ast: [
    			{
    				typ: 18,
    				val: "hypot",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"id-selector": {
    		syntax: "<hash-token>",
    		ast: [
    			{
    				typ: 2,
    				val: "hash-token"
    			}
    		]
    	},
    	image: {
    		syntax: "<url> | <image()> | <image-set()> | <element()> | <paint()> | <cross-fade()> | <gradient>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "url"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 5,
    								val: "image"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 5,
    										val: "image-set"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 5,
    												val: "element"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 5,
    														val: "paint"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 5,
    																val: "cross-fade"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "gradient"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"image()": {
    		syntax: "image( <image-tags>? [ <image-src>? , <color>? ]! )",
    		ast: [
    			{
    				typ: 18,
    				val: "image",
    				chi: [
    					{
    						typ: 2,
    						val: "image-tags",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 2,
    										val: "image-src",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 10
    									}
    								],
    								pos: {
    									ind: 22,
    									lin: 1,
    									col: 23
    								}
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color",
    								isOptional: true
    							}
    						],
    						isRepeatableGroup: true
    					}
    				]
    			}
    		]
    	},
    	"image-set()": {
    		syntax: "image-set( <image-set-option># )",
    		ast: [
    			{
    				typ: 18,
    				val: "image-set",
    				chi: [
    					{
    						typ: 2,
    						val: "image-set-option",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"image-set-option": {
    		syntax: "[ <image> | <string> ] [ <resolution> || type(<string>) ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "image"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "string"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "resolution"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "type",
    								chi: [
    									{
    										typ: 2,
    										val: "string"
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"image-src": {
    		syntax: "<url> | <string>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "url"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					}
    				]
    			}
    		]
    	},
    	"image-tags": {
    		syntax: "ltr | rtl",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "ltr"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "rtl"
    					}
    				]
    			}
    		]
    	},
    	"inflexible-breadth": {
    		syntax: "<length-percentage> | min-content | max-content | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "min-content"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "max-content"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"inset()": {
    		syntax: "inset( <length-percentage>{1,4} [ round <'border-radius'> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "inset",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage",
    						occurence: {
    							min: 1,
    							max: 4
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "round"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 3,
    								val: "border-radius"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"invert()": {
    		syntax: "invert( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "invert",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	"keyframes-name": {
    		syntax: "<custom-ident> | <string>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "custom-ident"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					}
    				]
    			}
    		]
    	},
    	"keyframe-block": {
    		syntax: "<keyframe-selector># {\n  <declaration-list>\n}",
    		ast: [
    			{
    				typ: 2,
    				val: "keyframe-selector",
    				isList: true,
    				occurence: {
    					min: 0,
    					max: 0
    				}
    			}
    		]
    	},
    	"keyframe-block-list": {
    		syntax: "<keyframe-block>+",
    		ast: [
    			{
    				typ: 2,
    				val: "keyframe-block",
    				atLeastOnce: true
    			}
    		]
    	},
    	"keyframe-selector": {
    		syntax: "from | to | <percentage> | <timeline-range-name> <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "from"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "to"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "timeline-range-name"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"lab()": {
    		syntax: "lab( [<percentage> | <number> | none] [ <percentage> | <number> | none] [ <percentage> | <number> | none] [ / [<alpha-value> | none] ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "lab",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 24
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 2,
    												val: "alpha-value"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"layer()": {
    		syntax: "layer( <layer-name> )",
    		ast: [
    			{
    				typ: 18,
    				val: "layer",
    				chi: [
    					{
    						typ: 2,
    						val: "layer-name"
    					}
    				]
    			}
    		]
    	},
    	"layer-name": {
    		syntax: "<ident> [ '.' <ident> ]*",
    		ast: [
    			{
    				typ: 2,
    				val: "ident"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 33,
    						val: "'.'"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "ident"
    					}
    				],
    				isRepeatable: true
    			}
    		]
    	},
    	"lch()": {
    		syntax: "lch( [<percentage> | <number> | none] [ <percentage> | <number> | none] [ <hue> | none] [ / [<alpha-value> | none] ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "lch",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "number"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "hue"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 24
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 2,
    												val: "alpha-value"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "none"
    											}
    										]
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"leader()": {
    		syntax: "leader( <leader-type> )",
    		ast: [
    			{
    				typ: 18,
    				val: "leader",
    				chi: [
    					{
    						typ: 2,
    						val: "leader-type"
    					}
    				]
    			}
    		]
    	},
    	"leader-type": {
    		syntax: "dotted | solid | space | <string>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "dotted"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "solid"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "space"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"length-percentage": {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"light-dark()": {
    		syntax: "light-dark( <color>, <color> )",
    		ast: [
    			{
    				typ: 18,
    				val: "light-dark",
    				chi: [
    					{
    						typ: 2,
    						val: "color"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color"
    					}
    				]
    			}
    		]
    	},
    	"line-names": {
    		syntax: "'[' <custom-ident>* ']'",
    		ast: [
    			{
    				typ: 33,
    				val: "'['"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "custom-ident",
    				isRepeatable: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 33,
    				val: "']'"
    			}
    		]
    	},
    	"line-name-list": {
    		syntax: "[ <line-names> | <name-repeat> ]+",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "line-names"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "name-repeat"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				atLeastOnce: true
    			}
    		]
    	},
    	"line-style": {
    		syntax: "none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "hidden"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "dotted"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "dashed"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "solid"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "double"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "groove"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "ridge"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "inset"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "outset"
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"line-width": {
    		syntax: "<length> | thin | medium | thick",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "thin"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "medium"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "thick"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"linear-color-hint": {
    		syntax: "<length-percentage>",
    		ast: [
    			{
    				typ: 2,
    				val: "length-percentage"
    			}
    		]
    	},
    	"linear-color-stop": {
    		syntax: "<color> <color-stop-length>?",
    		ast: [
    			{
    				typ: 2,
    				val: "color"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "color-stop-length",
    				isOptional: true
    			}
    		]
    	},
    	"linear-gradient()": {
    		syntax: "linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "linear-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "angle"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "to"
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "side-or-corner"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 10
    							}
    						],
    						pos: {
    							ind: 17,
    							lin: 1,
    							col: 18
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	"log()": {
    		syntax: "log( <calc-sum>, <calc-sum>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "log",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "calc-sum",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 15,
    							lin: 1,
    							col: 16
    						}
    					}
    				]
    			}
    		]
    	},
    	"mask-layer": {
    		syntax: "<mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || <geometry-box> || [ <geometry-box> | no-clip ] || <compositing-operator> || <masking-mode>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 2,
    						val: "mask-reference"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "bg-size"
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "repeat-style"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "geometry-box"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 22,
    														chi: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "geometry-box"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "no-clip"
    																	},
    																	{
    																		typ: 20
    																	}
    																]
    															}
    														]
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "compositing-operator"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "masking-mode"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"mask-position": {
    		syntax: "[ <length-percentage> | left | center | right ] [ <length-percentage> | top | center | bottom ]?",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "left"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "center"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "right"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "top"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "center"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "bottom"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"mask-reference": {
    		syntax: "none | <image> | <mask-source>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "image"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "mask-source"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"mask-source": {
    		syntax: "<url>",
    		ast: [
    			{
    				typ: 2,
    				val: "url"
    			}
    		]
    	},
    	"masking-mode": {
    		syntax: "alpha | luminance | match-source",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "alpha"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "luminance"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "match-source"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"matrix()": {
    		syntax: "matrix( <number>#{6} )",
    		ast: [
    			{
    				typ: 18,
    				val: "matrix",
    				chi: [
    					{
    						typ: 2,
    						val: "number",
    						isList: true,
    						occurence: {
    							min: 6,
    							max: 0
    						}
    					}
    				]
    			}
    		]
    	},
    	"matrix3d()": {
    		syntax: "matrix3d( <number>#{16} )",
    		ast: [
    			{
    				typ: 18,
    				val: "matrix3d",
    				chi: [
    					{
    						typ: 2,
    						val: "number",
    						isList: true,
    						occurence: {
    							min: 16,
    							max: 0
    						}
    					}
    				]
    			}
    		]
    	},
    	"max()": {
    		syntax: "max( <calc-sum># )",
    		ast: [
    			{
    				typ: 18,
    				val: "max",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"media-and": {
    		syntax: "<media-in-parens> [ and <media-in-parens> ]+",
    		ast: [
    			{
    				typ: 2,
    				val: "media-in-parens"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 1,
    						val: "and"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "media-in-parens"
    					}
    				],
    				atLeastOnce: true
    			}
    		]
    	},
    	"media-condition": {
    		syntax: "<media-not> | <media-and> | <media-or> | <media-in-parens>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "media-not"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "media-and"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "media-or"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "media-in-parens"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"media-condition-without-or": {
    		syntax: "<media-not> | <media-and> | <media-in-parens>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "media-not"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "media-and"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "media-in-parens"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"media-feature": {
    		syntax: "( [ <mf-plain> | <mf-boolean> | <mf-range> ] )",
    		ast: [
    			{
    				typ: 30,
    				val: "",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "mf-plain"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "mf-boolean"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "mf-range"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"media-in-parens": {
    		syntax: "( <media-condition> ) | <media-feature> | <general-enclosed>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 30,
    						val: "",
    						chi: [
    							{
    								typ: 2,
    								val: "media-condition"
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "media-feature"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "general-enclosed"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"media-not": {
    		syntax: "not <media-in-parens>",
    		ast: [
    			{
    				typ: 1,
    				val: "not"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "media-in-parens"
    			}
    		]
    	},
    	"media-or": {
    		syntax: "<media-in-parens> [ or <media-in-parens> ]+",
    		ast: [
    			{
    				typ: 2,
    				val: "media-in-parens"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 1,
    						val: "or"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "media-in-parens"
    					}
    				],
    				atLeastOnce: true
    			}
    		]
    	},
    	"media-query": {
    		syntax: "<media-condition> | [ not | only ]? <media-type> [ and <media-condition-without-or> ]?",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "media-condition"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "not"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "only"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "media-type"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "and"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "media-condition-without-or"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"media-query-list": {
    		syntax: "<media-query>#",
    		ast: [
    			{
    				typ: 2,
    				val: "media-query",
    				isList: true
    			}
    		]
    	},
    	"media-type": {
    		syntax: "<ident>",
    		ast: [
    			{
    				typ: 2,
    				val: "ident"
    			}
    		]
    	},
    	"mf-boolean": {
    		syntax: "<mf-name>",
    		ast: [
    			{
    				typ: 2,
    				val: "mf-name"
    			}
    		]
    	},
    	"mf-name": {
    		syntax: "<ident>",
    		ast: [
    			{
    				typ: 2,
    				val: "ident"
    			}
    		]
    	},
    	"mf-plain": {
    		syntax: "<mf-name> : <mf-value>",
    		ast: [
    			{
    				typ: 2,
    				val: "mf-name"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 1,
    				val: ":"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "mf-value"
    			}
    		]
    	},
    	"mf-range": {
    		syntax: "<mf-name> [ '<' | '>' ]? '='? <mf-value>\n| <mf-value> [ '<' | '>' ]? '='? <mf-name>\n| <mf-value> '<' '='? <mf-name> '<' '='? <mf-value>\n| <mf-value> '>' '='? <mf-name> '>' '='? <mf-value>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "mf-name"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'<'"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'>'"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 33,
    						val: "'='",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "mf-value"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "mf-value"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 33,
    												val: "'<'"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 33,
    												val: "'>'"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 33,
    								val: "'='",
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "mf-name"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "mf-value"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'<'"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'='",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "mf-name"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'<'"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'='",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "mf-value"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "mf-value"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'>'"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'='",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "mf-name"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'>'"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'='",
    										isOptional: true
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "mf-value"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"mf-value": {
    		syntax: "<number> | <dimension> | <ident> | <ratio>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "dimension"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "ident"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "ratio"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"min()": {
    		syntax: "min( <calc-sum># )",
    		ast: [
    			{
    				typ: 18,
    				val: "min",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum",
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	"minmax()": {
    		syntax: "minmax( [ <length-percentage> | min-content | max-content | auto ] , [ <length-percentage> | <flex> | min-content | max-content | auto ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "minmax",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "min-content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "max-content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "auto"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length-percentage"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "flex"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "min-content"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "max-content"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "auto"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"mod()": {
    		syntax: "mod( <calc-sum>, <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "mod",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"name-repeat": {
    		syntax: "repeat( [ <integer [1,∞]> | auto-fill ], <line-names>+ )",
    		ast: [
    			{
    				typ: 18,
    				val: "repeat",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "integer",
    										range: [
    											1,
    											null
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "auto-fill"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "line-names",
    						atLeastOnce: true
    					}
    				]
    			}
    		]
    	},
    	"named-color": {
    		syntax: "transparent | aliceblue | antiquewhite | aqua | aquamarine | azure | beige | bisque | black | blanchedalmond | blue | blueviolet | brown | burlywood | cadetblue | chartreuse | chocolate | coral | cornflowerblue | cornsilk | crimson | cyan | darkblue | darkcyan | darkgoldenrod | darkgray | darkgreen | darkgrey | darkkhaki | darkmagenta | darkolivegreen | darkorange | darkorchid | darkred | darksalmon | darkseagreen | darkslateblue | darkslategray | darkslategrey | darkturquoise | darkviolet | deeppink | deepskyblue | dimgray | dimgrey | dodgerblue | firebrick | floralwhite | forestgreen | fuchsia | gainsboro | ghostwhite | gold | goldenrod | gray | green | greenyellow | grey | honeydew | hotpink | indianred | indigo | ivory | khaki | lavender | lavenderblush | lawngreen | lemonchiffon | lightblue | lightcoral | lightcyan | lightgoldenrodyellow | lightgray | lightgreen | lightgrey | lightpink | lightsalmon | lightseagreen | lightskyblue | lightslategray | lightslategrey | lightsteelblue | lightyellow | lime | limegreen | linen | magenta | maroon | mediumaquamarine | mediumblue | mediumorchid | mediumpurple | mediumseagreen | mediumslateblue | mediumspringgreen | mediumturquoise | mediumvioletred | midnightblue | mintcream | mistyrose | moccasin | navajowhite | navy | oldlace | olive | olivedrab | orange | orangered | orchid | palegoldenrod | palegreen | paleturquoise | palevioletred | papayawhip | peachpuff | peru | pink | plum | powderblue | purple | rebeccapurple | red | rosybrown | royalblue | saddlebrown | salmon | sandybrown | seagreen | seashell | sienna | silver | skyblue | slateblue | slategray | slategrey | snow | springgreen | steelblue | tan | teal | thistle | tomato | turquoise | violet | wheat | white | whitesmoke | yellow | yellowgreen",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "transparent"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "aliceblue"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "antiquewhite"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "aqua"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "aquamarine"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "azure"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "beige"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "bisque"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "black"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "blanchedalmond"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "blue"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "blueviolet"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "brown"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 27,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 1,
    																																val: "burlywood"
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 27,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "cadetblue"
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 27,
    																																		l: [
    																																			{
    																																				typ: 20
    																																			},
    																																			{
    																																				typ: 1,
    																																				val: "chartreuse"
    																																			},
    																																			{
    																																				typ: 20
    																																			}
    																																		],
    																																		r: [
    																																			{
    																																				typ: 27,
    																																				l: [
    																																					{
    																																						typ: 20
    																																					},
    																																					{
    																																						typ: 1,
    																																						val: "chocolate"
    																																					},
    																																					{
    																																						typ: 20
    																																					}
    																																				],
    																																				r: [
    																																					{
    																																						typ: 27,
    																																						l: [
    																																							{
    																																								typ: 20
    																																							},
    																																							{
    																																								typ: 1,
    																																								val: "coral"
    																																							},
    																																							{
    																																								typ: 20
    																																							}
    																																						],
    																																						r: [
    																																							{
    																																								typ: 27,
    																																								l: [
    																																									{
    																																										typ: 20
    																																									},
    																																									{
    																																										typ: 1,
    																																										val: "cornflowerblue"
    																																									},
    																																									{
    																																										typ: 20
    																																									}
    																																								],
    																																								r: [
    																																									{
    																																										typ: 27,
    																																										l: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 1,
    																																												val: "cornsilk"
    																																											},
    																																											{
    																																												typ: 20
    																																											}
    																																										],
    																																										r: [
    																																											{
    																																												typ: 27,
    																																												l: [
    																																													{
    																																														typ: 20
    																																													},
    																																													{
    																																														typ: 1,
    																																														val: "crimson"
    																																													},
    																																													{
    																																														typ: 20
    																																													}
    																																												],
    																																												r: [
    																																													{
    																																														typ: 27,
    																																														l: [
    																																															{
    																																																typ: 20
    																																															},
    																																															{
    																																																typ: 1,
    																																																val: "cyan"
    																																															},
    																																															{
    																																																typ: 20
    																																															}
    																																														],
    																																														r: [
    																																															{
    																																																typ: 27,
    																																																l: [
    																																																	{
    																																																		typ: 20
    																																																	},
    																																																	{
    																																																		typ: 1,
    																																																		val: "darkblue"
    																																																	},
    																																																	{
    																																																		typ: 20
    																																																	}
    																																																],
    																																																r: [
    																																																	{
    																																																		typ: 27,
    																																																		l: [
    																																																			{
    																																																				typ: 20
    																																																			},
    																																																			{
    																																																				typ: 1,
    																																																				val: "darkcyan"
    																																																			},
    																																																			{
    																																																				typ: 20
    																																																			}
    																																																		],
    																																																		r: [
    																																																			{
    																																																				typ: 27,
    																																																				l: [
    																																																					{
    																																																						typ: 20
    																																																					},
    																																																					{
    																																																						typ: 1,
    																																																						val: "darkgoldenrod"
    																																																					},
    																																																					{
    																																																						typ: 20
    																																																					}
    																																																				],
    																																																				r: [
    																																																					{
    																																																						typ: 27,
    																																																						l: [
    																																																							{
    																																																								typ: 20
    																																																							},
    																																																							{
    																																																								typ: 1,
    																																																								val: "darkgray"
    																																																							},
    																																																							{
    																																																								typ: 20
    																																																							}
    																																																						],
    																																																						r: [
    																																																							{
    																																																								typ: 27,
    																																																								l: [
    																																																									{
    																																																										typ: 20
    																																																									},
    																																																									{
    																																																										typ: 1,
    																																																										val: "darkgreen"
    																																																									},
    																																																									{
    																																																										typ: 20
    																																																									}
    																																																								],
    																																																								r: [
    																																																									{
    																																																										typ: 27,
    																																																										l: [
    																																																											{
    																																																												typ: 20
    																																																											},
    																																																											{
    																																																												typ: 1,
    																																																												val: "darkgrey"
    																																																											},
    																																																											{
    																																																												typ: 20
    																																																											}
    																																																										],
    																																																										r: [
    																																																											{
    																																																												typ: 27,
    																																																												l: [
    																																																													{
    																																																														typ: 20
    																																																													},
    																																																													{
    																																																														typ: 1,
    																																																														val: "darkkhaki"
    																																																													},
    																																																													{
    																																																														typ: 20
    																																																													}
    																																																												],
    																																																												r: [
    																																																													{
    																																																														typ: 27,
    																																																														l: [
    																																																															{
    																																																																typ: 20
    																																																															},
    																																																															{
    																																																																typ: 1,
    																																																																val: "darkmagenta"
    																																																															},
    																																																															{
    																																																																typ: 20
    																																																															}
    																																																														],
    																																																														r: [
    																																																															{
    																																																																typ: 27,
    																																																																l: [
    																																																																	{
    																																																																		typ: 20
    																																																																	},
    																																																																	{
    																																																																		typ: 1,
    																																																																		val: "darkolivegreen"
    																																																																	},
    																																																																	{
    																																																																		typ: 20
    																																																																	}
    																																																																],
    																																																																r: [
    																																																																	{
    																																																																		typ: 27,
    																																																																		l: [
    																																																																			{
    																																																																				typ: 20
    																																																																			},
    																																																																			{
    																																																																				typ: 1,
    																																																																				val: "darkorange"
    																																																																			},
    																																																																			{
    																																																																				typ: 20
    																																																																			}
    																																																																		],
    																																																																		r: [
    																																																																			{
    																																																																				typ: 27,
    																																																																				l: [
    																																																																					{
    																																																																						typ: 20
    																																																																					},
    																																																																					{
    																																																																						typ: 1,
    																																																																						val: "darkorchid"
    																																																																					},
    																																																																					{
    																																																																						typ: 20
    																																																																					}
    																																																																				],
    																																																																				r: [
    																																																																					{
    																																																																						typ: 27,
    																																																																						l: [
    																																																																							{
    																																																																								typ: 20
    																																																																							},
    																																																																							{
    																																																																								typ: 1,
    																																																																								val: "darkred"
    																																																																							},
    																																																																							{
    																																																																								typ: 20
    																																																																							}
    																																																																						],
    																																																																						r: [
    																																																																							{
    																																																																								typ: 27,
    																																																																								l: [
    																																																																									{
    																																																																										typ: 20
    																																																																									},
    																																																																									{
    																																																																										typ: 1,
    																																																																										val: "darksalmon"
    																																																																									},
    																																																																									{
    																																																																										typ: 20
    																																																																									}
    																																																																								],
    																																																																								r: [
    																																																																									{
    																																																																										typ: 27,
    																																																																										l: [
    																																																																											{
    																																																																												typ: 20
    																																																																											},
    																																																																											{
    																																																																												typ: 1,
    																																																																												val: "darkseagreen"
    																																																																											},
    																																																																											{
    																																																																												typ: 20
    																																																																											}
    																																																																										],
    																																																																										r: [
    																																																																											{
    																																																																												typ: 27,
    																																																																												l: [
    																																																																													{
    																																																																														typ: 20
    																																																																													},
    																																																																													{
    																																																																														typ: 1,
    																																																																														val: "darkslateblue"
    																																																																													},
    																																																																													{
    																																																																														typ: 20
    																																																																													}
    																																																																												],
    																																																																												r: [
    																																																																													{
    																																																																														typ: 27,
    																																																																														l: [
    																																																																															{
    																																																																																typ: 20
    																																																																															},
    																																																																															{
    																																																																																typ: 1,
    																																																																																val: "darkslategray"
    																																																																															},
    																																																																															{
    																																																																																typ: 20
    																																																																															}
    																																																																														],
    																																																																														r: [
    																																																																															{
    																																																																																typ: 27,
    																																																																																l: [
    																																																																																	{
    																																																																																		typ: 20
    																																																																																	},
    																																																																																	{
    																																																																																		typ: 1,
    																																																																																		val: "darkslategrey"
    																																																																																	},
    																																																																																	{
    																																																																																		typ: 20
    																																																																																	}
    																																																																																],
    																																																																																r: [
    																																																																																	{
    																																																																																		typ: 27,
    																																																																																		l: [
    																																																																																			{
    																																																																																				typ: 20
    																																																																																			},
    																																																																																			{
    																																																																																				typ: 1,
    																																																																																				val: "darkturquoise"
    																																																																																			},
    																																																																																			{
    																																																																																				typ: 20
    																																																																																			}
    																																																																																		],
    																																																																																		r: [
    																																																																																			{
    																																																																																				typ: 27,
    																																																																																				l: [
    																																																																																					{
    																																																																																						typ: 20
    																																																																																					},
    																																																																																					{
    																																																																																						typ: 1,
    																																																																																						val: "darkviolet"
    																																																																																					},
    																																																																																					{
    																																																																																						typ: 20
    																																																																																					}
    																																																																																				],
    																																																																																				r: [
    																																																																																					{
    																																																																																						typ: 27,
    																																																																																						l: [
    																																																																																							{
    																																																																																								typ: 20
    																																																																																							},
    																																																																																							{
    																																																																																								typ: 1,
    																																																																																								val: "deeppink"
    																																																																																							},
    																																																																																							{
    																																																																																								typ: 20
    																																																																																							}
    																																																																																						],
    																																																																																						r: [
    																																																																																							{
    																																																																																								typ: 27,
    																																																																																								l: [
    																																																																																									{
    																																																																																										typ: 20
    																																																																																									},
    																																																																																									{
    																																																																																										typ: 1,
    																																																																																										val: "deepskyblue"
    																																																																																									},
    																																																																																									{
    																																																																																										typ: 20
    																																																																																									}
    																																																																																								],
    																																																																																								r: [
    																																																																																									{
    																																																																																										typ: 27,
    																																																																																										l: [
    																																																																																											{
    																																																																																												typ: 20
    																																																																																											},
    																																																																																											{
    																																																																																												typ: 1,
    																																																																																												val: "dimgray"
    																																																																																											},
    																																																																																											{
    																																																																																												typ: 20
    																																																																																											}
    																																																																																										],
    																																																																																										r: [
    																																																																																											{
    																																																																																												typ: 27,
    																																																																																												l: [
    																																																																																													{
    																																																																																														typ: 20
    																																																																																													},
    																																																																																													{
    																																																																																														typ: 1,
    																																																																																														val: "dimgrey"
    																																																																																													},
    																																																																																													{
    																																																																																														typ: 20
    																																																																																													}
    																																																																																												],
    																																																																																												r: [
    																																																																																													{
    																																																																																														typ: 27,
    																																																																																														l: [
    																																																																																															{
    																																																																																																typ: 20
    																																																																																															},
    																																																																																															{
    																																																																																																typ: 1,
    																																																																																																val: "dodgerblue"
    																																																																																															},
    																																																																																															{
    																																																																																																typ: 20
    																																																																																															}
    																																																																																														],
    																																																																																														r: [
    																																																																																															{
    																																																																																																typ: 27,
    																																																																																																l: [
    																																																																																																	{
    																																																																																																		typ: 20
    																																																																																																	},
    																																																																																																	{
    																																																																																																		typ: 1,
    																																																																																																		val: "firebrick"
    																																																																																																	},
    																																																																																																	{
    																																																																																																		typ: 20
    																																																																																																	}
    																																																																																																],
    																																																																																																r: [
    																																																																																																	{
    																																																																																																		typ: 27,
    																																																																																																		l: [
    																																																																																																			{
    																																																																																																				typ: 20
    																																																																																																			},
    																																																																																																			{
    																																																																																																				typ: 1,
    																																																																																																				val: "floralwhite"
    																																																																																																			},
    																																																																																																			{
    																																																																																																				typ: 20
    																																																																																																			}
    																																																																																																		],
    																																																																																																		r: [
    																																																																																																			{
    																																																																																																				typ: 27,
    																																																																																																				l: [
    																																																																																																					{
    																																																																																																						typ: 20
    																																																																																																					},
    																																																																																																					{
    																																																																																																						typ: 1,
    																																																																																																						val: "forestgreen"
    																																																																																																					},
    																																																																																																					{
    																																																																																																						typ: 20
    																																																																																																					}
    																																																																																																				],
    																																																																																																				r: [
    																																																																																																					{
    																																																																																																						typ: 27,
    																																																																																																						l: [
    																																																																																																							{
    																																																																																																								typ: 20
    																																																																																																							},
    																																																																																																							{
    																																																																																																								typ: 1,
    																																																																																																								val: "fuchsia"
    																																																																																																							},
    																																																																																																							{
    																																																																																																								typ: 20
    																																																																																																							}
    																																																																																																						],
    																																																																																																						r: [
    																																																																																																							{
    																																																																																																								typ: 27,
    																																																																																																								l: [
    																																																																																																									{
    																																																																																																										typ: 20
    																																																																																																									},
    																																																																																																									{
    																																																																																																										typ: 1,
    																																																																																																										val: "gainsboro"
    																																																																																																									},
    																																																																																																									{
    																																																																																																										typ: 20
    																																																																																																									}
    																																																																																																								],
    																																																																																																								r: [
    																																																																																																									{
    																																																																																																										typ: 27,
    																																																																																																										l: [
    																																																																																																											{
    																																																																																																												typ: 20
    																																																																																																											},
    																																																																																																											{
    																																																																																																												typ: 1,
    																																																																																																												val: "ghostwhite"
    																																																																																																											},
    																																																																																																											{
    																																																																																																												typ: 20
    																																																																																																											}
    																																																																																																										],
    																																																																																																										r: [
    																																																																																																											{
    																																																																																																												typ: 27,
    																																																																																																												l: [
    																																																																																																													{
    																																																																																																														typ: 20
    																																																																																																													},
    																																																																																																													{
    																																																																																																														typ: 1,
    																																																																																																														val: "gold"
    																																																																																																													},
    																																																																																																													{
    																																																																																																														typ: 20
    																																																																																																													}
    																																																																																																												],
    																																																																																																												r: [
    																																																																																																													{
    																																																																																																														typ: 27,
    																																																																																																														l: [
    																																																																																																															{
    																																																																																																																typ: 20
    																																																																																																															},
    																																																																																																															{
    																																																																																																																typ: 1,
    																																																																																																																val: "goldenrod"
    																																																																																																															},
    																																																																																																															{
    																																																																																																																typ: 20
    																																																																																																															}
    																																																																																																														],
    																																																																																																														r: [
    																																																																																																															{
    																																																																																																																typ: 27,
    																																																																																																																l: [
    																																																																																																																	{
    																																																																																																																		typ: 20
    																																																																																																																	},
    																																																																																																																	{
    																																																																																																																		typ: 1,
    																																																																																																																		val: "gray"
    																																																																																																																	},
    																																																																																																																	{
    																																																																																																																		typ: 20
    																																																																																																																	}
    																																																																																																																],
    																																																																																																																r: [
    																																																																																																																	{
    																																																																																																																		typ: 27,
    																																																																																																																		l: [
    																																																																																																																			{
    																																																																																																																				typ: 20
    																																																																																																																			},
    																																																																																																																			{
    																																																																																																																				typ: 1,
    																																																																																																																				val: "green"
    																																																																																																																			},
    																																																																																																																			{
    																																																																																																																				typ: 20
    																																																																																																																			}
    																																																																																																																		],
    																																																																																																																		r: [
    																																																																																																																			{
    																																																																																																																				typ: 27,
    																																																																																																																				l: [
    																																																																																																																					{
    																																																																																																																						typ: 20
    																																																																																																																					},
    																																																																																																																					{
    																																																																																																																						typ: 1,
    																																																																																																																						val: "greenyellow"
    																																																																																																																					},
    																																																																																																																					{
    																																																																																																																						typ: 20
    																																																																																																																					}
    																																																																																																																				],
    																																																																																																																				r: [
    																																																																																																																					{
    																																																																																																																						typ: 27,
    																																																																																																																						l: [
    																																																																																																																							{
    																																																																																																																								typ: 20
    																																																																																																																							},
    																																																																																																																							{
    																																																																																																																								typ: 1,
    																																																																																																																								val: "grey"
    																																																																																																																							},
    																																																																																																																							{
    																																																																																																																								typ: 20
    																																																																																																																							}
    																																																																																																																						],
    																																																																																																																						r: [
    																																																																																																																							{
    																																																																																																																								typ: 27,
    																																																																																																																								l: [
    																																																																																																																									{
    																																																																																																																										typ: 20
    																																																																																																																									},
    																																																																																																																									{
    																																																																																																																										typ: 1,
    																																																																																																																										val: "honeydew"
    																																																																																																																									},
    																																																																																																																									{
    																																																																																																																										typ: 20
    																																																																																																																									}
    																																																																																																																								],
    																																																																																																																								r: [
    																																																																																																																									{
    																																																																																																																										typ: 27,
    																																																																																																																										l: [
    																																																																																																																											{
    																																																																																																																												typ: 20
    																																																																																																																											},
    																																																																																																																											{
    																																																																																																																												typ: 1,
    																																																																																																																												val: "hotpink"
    																																																																																																																											},
    																																																																																																																											{
    																																																																																																																												typ: 20
    																																																																																																																											}
    																																																																																																																										],
    																																																																																																																										r: [
    																																																																																																																											{
    																																																																																																																												typ: 27,
    																																																																																																																												l: [
    																																																																																																																													{
    																																																																																																																														typ: 20
    																																																																																																																													},
    																																																																																																																													{
    																																																																																																																														typ: 1,
    																																																																																																																														val: "indianred"
    																																																																																																																													},
    																																																																																																																													{
    																																																																																																																														typ: 20
    																																																																																																																													}
    																																																																																																																												],
    																																																																																																																												r: [
    																																																																																																																													{
    																																																																																																																														typ: 27,
    																																																																																																																														l: [
    																																																																																																																															{
    																																																																																																																																typ: 20
    																																																																																																																															},
    																																																																																																																															{
    																																																																																																																																typ: 1,
    																																																																																																																																val: "indigo"
    																																																																																																																															},
    																																																																																																																															{
    																																																																																																																																typ: 20
    																																																																																																																															}
    																																																																																																																														],
    																																																																																																																														r: [
    																																																																																																																															{
    																																																																																																																																typ: 27,
    																																																																																																																																l: [
    																																																																																																																																	{
    																																																																																																																																		typ: 20
    																																																																																																																																	},
    																																																																																																																																	{
    																																																																																																																																		typ: 1,
    																																																																																																																																		val: "ivory"
    																																																																																																																																	},
    																																																																																																																																	{
    																																																																																																																																		typ: 20
    																																																																																																																																	}
    																																																																																																																																],
    																																																																																																																																r: [
    																																																																																																																																	{
    																																																																																																																																		typ: 27,
    																																																																																																																																		l: [
    																																																																																																																																			{
    																																																																																																																																				typ: 20
    																																																																																																																																			},
    																																																																																																																																			{
    																																																																																																																																				typ: 1,
    																																																																																																																																				val: "khaki"
    																																																																																																																																			},
    																																																																																																																																			{
    																																																																																																																																				typ: 20
    																																																																																																																																			}
    																																																																																																																																		],
    																																																																																																																																		r: [
    																																																																																																																																			{
    																																																																																																																																				typ: 27,
    																																																																																																																																				l: [
    																																																																																																																																					{
    																																																																																																																																						typ: 20
    																																																																																																																																					},
    																																																																																																																																					{
    																																																																																																																																						typ: 1,
    																																																																																																																																						val: "lavender"
    																																																																																																																																					},
    																																																																																																																																					{
    																																																																																																																																						typ: 20
    																																																																																																																																					}
    																																																																																																																																				],
    																																																																																																																																				r: [
    																																																																																																																																					{
    																																																																																																																																						typ: 27,
    																																																																																																																																						l: [
    																																																																																																																																							{
    																																																																																																																																								typ: 20
    																																																																																																																																							},
    																																																																																																																																							{
    																																																																																																																																								typ: 1,
    																																																																																																																																								val: "lavenderblush"
    																																																																																																																																							},
    																																																																																																																																							{
    																																																																																																																																								typ: 20
    																																																																																																																																							}
    																																																																																																																																						],
    																																																																																																																																						r: [
    																																																																																																																																							{
    																																																																																																																																								typ: 27,
    																																																																																																																																								l: [
    																																																																																																																																									{
    																																																																																																																																										typ: 20
    																																																																																																																																									},
    																																																																																																																																									{
    																																																																																																																																										typ: 1,
    																																																																																																																																										val: "lawngreen"
    																																																																																																																																									},
    																																																																																																																																									{
    																																																																																																																																										typ: 20
    																																																																																																																																									}
    																																																																																																																																								],
    																																																																																																																																								r: [
    																																																																																																																																									{
    																																																																																																																																										typ: 27,
    																																																																																																																																										l: [
    																																																																																																																																											{
    																																																																																																																																												typ: 20
    																																																																																																																																											},
    																																																																																																																																											{
    																																																																																																																																												typ: 1,
    																																																																																																																																												val: "lemonchiffon"
    																																																																																																																																											},
    																																																																																																																																											{
    																																																																																																																																												typ: 20
    																																																																																																																																											}
    																																																																																																																																										],
    																																																																																																																																										r: [
    																																																																																																																																											{
    																																																																																																																																												typ: 27,
    																																																																																																																																												l: [
    																																																																																																																																													{
    																																																																																																																																														typ: 20
    																																																																																																																																													},
    																																																																																																																																													{
    																																																																																																																																														typ: 1,
    																																																																																																																																														val: "lightblue"
    																																																																																																																																													},
    																																																																																																																																													{
    																																																																																																																																														typ: 20
    																																																																																																																																													}
    																																																																																																																																												],
    																																																																																																																																												r: [
    																																																																																																																																													{
    																																																																																																																																														typ: 27,
    																																																																																																																																														l: [
    																																																																																																																																															{
    																																																																																																																																																typ: 20
    																																																																																																																																															},
    																																																																																																																																															{
    																																																																																																																																																typ: 1,
    																																																																																																																																																val: "lightcoral"
    																																																																																																																																															},
    																																																																																																																																															{
    																																																																																																																																																typ: 20
    																																																																																																																																															}
    																																																																																																																																														],
    																																																																																																																																														r: [
    																																																																																																																																															{
    																																																																																																																																																typ: 27,
    																																																																																																																																																l: [
    																																																																																																																																																	{
    																																																																																																																																																		typ: 20
    																																																																																																																																																	},
    																																																																																																																																																	{
    																																																																																																																																																		typ: 1,
    																																																																																																																																																		val: "lightcyan"
    																																																																																																																																																	},
    																																																																																																																																																	{
    																																																																																																																																																		typ: 20
    																																																																																																																																																	}
    																																																																																																																																																],
    																																																																																																																																																r: [
    																																																																																																																																																	{
    																																																																																																																																																		typ: 27,
    																																																																																																																																																		l: [
    																																																																																																																																																			{
    																																																																																																																																																				typ: 20
    																																																																																																																																																			},
    																																																																																																																																																			{
    																																																																																																																																																				typ: 1,
    																																																																																																																																																				val: "lightgoldenrodyellow"
    																																																																																																																																																			},
    																																																																																																																																																			{
    																																																																																																																																																				typ: 20
    																																																																																																																																																			}
    																																																																																																																																																		],
    																																																																																																																																																		r: [
    																																																																																																																																																			{
    																																																																																																																																																				typ: 27,
    																																																																																																																																																				l: [
    																																																																																																																																																					{
    																																																																																																																																																						typ: 20
    																																																																																																																																																					},
    																																																																																																																																																					{
    																																																																																																																																																						typ: 1,
    																																																																																																																																																						val: "lightgray"
    																																																																																																																																																					},
    																																																																																																																																																					{
    																																																																																																																																																						typ: 20
    																																																																																																																																																					}
    																																																																																																																																																				],
    																																																																																																																																																				r: [
    																																																																																																																																																					{
    																																																																																																																																																						typ: 27,
    																																																																																																																																																						l: [
    																																																																																																																																																							{
    																																																																																																																																																								typ: 20
    																																																																																																																																																							},
    																																																																																																																																																							{
    																																																																																																																																																								typ: 1,
    																																																																																																																																																								val: "lightgreen"
    																																																																																																																																																							},
    																																																																																																																																																							{
    																																																																																																																																																								typ: 20
    																																																																																																																																																							}
    																																																																																																																																																						],
    																																																																																																																																																						r: [
    																																																																																																																																																							{
    																																																																																																																																																								typ: 27,
    																																																																																																																																																								l: [
    																																																																																																																																																									{
    																																																																																																																																																										typ: 20
    																																																																																																																																																									},
    																																																																																																																																																									{
    																																																																																																																																																										typ: 1,
    																																																																																																																																																										val: "lightgrey"
    																																																																																																																																																									},
    																																																																																																																																																									{
    																																																																																																																																																										typ: 20
    																																																																																																																																																									}
    																																																																																																																																																								],
    																																																																																																																																																								r: [
    																																																																																																																																																									{
    																																																																																																																																																										typ: 27,
    																																																																																																																																																										l: [
    																																																																																																																																																											{
    																																																																																																																																																												typ: 20
    																																																																																																																																																											},
    																																																																																																																																																											{
    																																																																																																																																																												typ: 1,
    																																																																																																																																																												val: "lightpink"
    																																																																																																																																																											},
    																																																																																																																																																											{
    																																																																																																																																																												typ: 20
    																																																																																																																																																											}
    																																																																																																																																																										],
    																																																																																																																																																										r: [
    																																																																																																																																																											{
    																																																																																																																																																												typ: 27,
    																																																																																																																																																												l: [
    																																																																																																																																																													{
    																																																																																																																																																														typ: 20
    																																																																																																																																																													},
    																																																																																																																																																													{
    																																																																																																																																																														typ: 1,
    																																																																																																																																																														val: "lightsalmon"
    																																																																																																																																																													},
    																																																																																																																																																													{
    																																																																																																																																																														typ: 20
    																																																																																																																																																													}
    																																																																																																																																																												],
    																																																																																																																																																												r: [
    																																																																																																																																																													{
    																																																																																																																																																														typ: 27,
    																																																																																																																																																														l: [
    																																																																																																																																																															{
    																																																																																																																																																																typ: 20
    																																																																																																																																																															},
    																																																																																																																																																															{
    																																																																																																																																																																typ: 1,
    																																																																																																																																																																val: "lightseagreen"
    																																																																																																																																																															},
    																																																																																																																																																															{
    																																																																																																																																																																typ: 20
    																																																																																																																																																															}
    																																																																																																																																																														],
    																																																																																																																																																														r: [
    																																																																																																																																																															{
    																																																																																																																																																																typ: 27,
    																																																																																																																																																																l: [
    																																																																																																																																																																	{
    																																																																																																																																																																		typ: 20
    																																																																																																																																																																	},
    																																																																																																																																																																	{
    																																																																																																																																																																		typ: 1,
    																																																																																																																																																																		val: "lightskyblue"
    																																																																																																																																																																	},
    																																																																																																																																																																	{
    																																																																																																																																																																		typ: 20
    																																																																																																																																																																	}
    																																																																																																																																																																],
    																																																																																																																																																																r: [
    																																																																																																																																																																	{
    																																																																																																																																																																		typ: 27,
    																																																																																																																																																																		l: [
    																																																																																																																																																																			{
    																																																																																																																																																																				typ: 20
    																																																																																																																																																																			},
    																																																																																																																																																																			{
    																																																																																																																																																																				typ: 1,
    																																																																																																																																																																				val: "lightslategray"
    																																																																																																																																																																			},
    																																																																																																																																																																			{
    																																																																																																																																																																				typ: 20
    																																																																																																																																																																			}
    																																																																																																																																																																		],
    																																																																																																																																																																		r: [
    																																																																																																																																																																			{
    																																																																																																																																																																				typ: 27,
    																																																																																																																																																																				l: [
    																																																																																																																																																																					{
    																																																																																																																																																																						typ: 20
    																																																																																																																																																																					},
    																																																																																																																																																																					{
    																																																																																																																																																																						typ: 1,
    																																																																																																																																																																						val: "lightslategrey"
    																																																																																																																																																																					},
    																																																																																																																																																																					{
    																																																																																																																																																																						typ: 20
    																																																																																																																																																																					}
    																																																																																																																																																																				],
    																																																																																																																																																																				r: [
    																																																																																																																																																																					{
    																																																																																																																																																																						typ: 27,
    																																																																																																																																																																						l: [
    																																																																																																																																																																							{
    																																																																																																																																																																								typ: 20
    																																																																																																																																																																							},
    																																																																																																																																																																							{
    																																																																																																																																																																								typ: 1,
    																																																																																																																																																																								val: "lightsteelblue"
    																																																																																																																																																																							},
    																																																																																																																																																																							{
    																																																																																																																																																																								typ: 20
    																																																																																																																																																																							}
    																																																																																																																																																																						],
    																																																																																																																																																																						r: [
    																																																																																																																																																																							{
    																																																																																																																																																																								typ: 27,
    																																																																																																																																																																								l: [
    																																																																																																																																																																									{
    																																																																																																																																																																										typ: 20
    																																																																																																																																																																									},
    																																																																																																																																																																									{
    																																																																																																																																																																										typ: 1,
    																																																																																																																																																																										val: "lightyellow"
    																																																																																																																																																																									},
    																																																																																																																																																																									{
    																																																																																																																																																																										typ: 20
    																																																																																																																																																																									}
    																																																																																																																																																																								],
    																																																																																																																																																																								r: [
    																																																																																																																																																																									{
    																																																																																																																																																																										typ: 27,
    																																																																																																																																																																										l: [
    																																																																																																																																																																											{
    																																																																																																																																																																												typ: 20
    																																																																																																																																																																											},
    																																																																																																																																																																											{
    																																																																																																																																																																												typ: 1,
    																																																																																																																																																																												val: "lime"
    																																																																																																																																																																											},
    																																																																																																																																																																											{
    																																																																																																																																																																												typ: 20
    																																																																																																																																																																											}
    																																																																																																																																																																										],
    																																																																																																																																																																										r: [
    																																																																																																																																																																											{
    																																																																																																																																																																												typ: 27,
    																																																																																																																																																																												l: [
    																																																																																																																																																																													{
    																																																																																																																																																																														typ: 20
    																																																																																																																																																																													},
    																																																																																																																																																																													{
    																																																																																																																																																																														typ: 1,
    																																																																																																																																																																														val: "limegreen"
    																																																																																																																																																																													},
    																																																																																																																																																																													{
    																																																																																																																																																																														typ: 20
    																																																																																																																																																																													}
    																																																																																																																																																																												],
    																																																																																																																																																																												r: [
    																																																																																																																																																																													{
    																																																																																																																																																																														typ: 27,
    																																																																																																																																																																														l: [
    																																																																																																																																																																															{
    																																																																																																																																																																																typ: 20
    																																																																																																																																																																															},
    																																																																																																																																																																															{
    																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																val: "linen"
    																																																																																																																																																																															},
    																																																																																																																																																																															{
    																																																																																																																																																																																typ: 20
    																																																																																																																																																																															}
    																																																																																																																																																																														],
    																																																																																																																																																																														r: [
    																																																																																																																																																																															{
    																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																l: [
    																																																																																																																																																																																	{
    																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																	},
    																																																																																																																																																																																	{
    																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																		val: "magenta"
    																																																																																																																																																																																	},
    																																																																																																																																																																																	{
    																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																	}
    																																																																																																																																																																																],
    																																																																																																																																																																																r: [
    																																																																																																																																																																																	{
    																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																		l: [
    																																																																																																																																																																																			{
    																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																			},
    																																																																																																																																																																																			{
    																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																				val: "maroon"
    																																																																																																																																																																																			},
    																																																																																																																																																																																			{
    																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																			}
    																																																																																																																																																																																		],
    																																																																																																																																																																																		r: [
    																																																																																																																																																																																			{
    																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																				l: [
    																																																																																																																																																																																					{
    																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																					},
    																																																																																																																																																																																					{
    																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																						val: "mediumaquamarine"
    																																																																																																																																																																																					},
    																																																																																																																																																																																					{
    																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																					}
    																																																																																																																																																																																				],
    																																																																																																																																																																																				r: [
    																																																																																																																																																																																					{
    																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																						l: [
    																																																																																																																																																																																							{
    																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																							},
    																																																																																																																																																																																							{
    																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																								val: "mediumblue"
    																																																																																																																																																																																							},
    																																																																																																																																																																																							{
    																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																							}
    																																																																																																																																																																																						],
    																																																																																																																																																																																						r: [
    																																																																																																																																																																																							{
    																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																								l: [
    																																																																																																																																																																																									{
    																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																									},
    																																																																																																																																																																																									{
    																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																										val: "mediumorchid"
    																																																																																																																																																																																									},
    																																																																																																																																																																																									{
    																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																									}
    																																																																																																																																																																																								],
    																																																																																																																																																																																								r: [
    																																																																																																																																																																																									{
    																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																										l: [
    																																																																																																																																																																																											{
    																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																											},
    																																																																																																																																																																																											{
    																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																												val: "mediumpurple"
    																																																																																																																																																																																											},
    																																																																																																																																																																																											{
    																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																											}
    																																																																																																																																																																																										],
    																																																																																																																																																																																										r: [
    																																																																																																																																																																																											{
    																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																												l: [
    																																																																																																																																																																																													{
    																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																													},
    																																																																																																																																																																																													{
    																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																														val: "mediumseagreen"
    																																																																																																																																																																																													},
    																																																																																																																																																																																													{
    																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																													}
    																																																																																																																																																																																												],
    																																																																																																																																																																																												r: [
    																																																																																																																																																																																													{
    																																																																																																																																																																																														typ: 27,
    																																																																																																																																																																																														l: [
    																																																																																																																																																																																															{
    																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																															},
    																																																																																																																																																																																															{
    																																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																																val: "mediumslateblue"
    																																																																																																																																																																																															},
    																																																																																																																																																																																															{
    																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																															}
    																																																																																																																																																																																														],
    																																																																																																																																																																																														r: [
    																																																																																																																																																																																															{
    																																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																																l: [
    																																																																																																																																																																																																	{
    																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																	},
    																																																																																																																																																																																																	{
    																																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																																		val: "mediumspringgreen"
    																																																																																																																																																																																																	},
    																																																																																																																																																																																																	{
    																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																	}
    																																																																																																																																																																																																],
    																																																																																																																																																																																																r: [
    																																																																																																																																																																																																	{
    																																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																																		l: [
    																																																																																																																																																																																																			{
    																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																			},
    																																																																																																																																																																																																			{
    																																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																																				val: "mediumturquoise"
    																																																																																																																																																																																																			},
    																																																																																																																																																																																																			{
    																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																			}
    																																																																																																																																																																																																		],
    																																																																																																																																																																																																		r: [
    																																																																																																																																																																																																			{
    																																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																																				l: [
    																																																																																																																																																																																																					{
    																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																					},
    																																																																																																																																																																																																					{
    																																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																																						val: "mediumvioletred"
    																																																																																																																																																																																																					},
    																																																																																																																																																																																																					{
    																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																					}
    																																																																																																																																																																																																				],
    																																																																																																																																																																																																				r: [
    																																																																																																																																																																																																					{
    																																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																																						l: [
    																																																																																																																																																																																																							{
    																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																							},
    																																																																																																																																																																																																							{
    																																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																																								val: "midnightblue"
    																																																																																																																																																																																																							},
    																																																																																																																																																																																																							{
    																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																							}
    																																																																																																																																																																																																						],
    																																																																																																																																																																																																						r: [
    																																																																																																																																																																																																							{
    																																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																																								l: [
    																																																																																																																																																																																																									{
    																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																									},
    																																																																																																																																																																																																									{
    																																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																																										val: "mintcream"
    																																																																																																																																																																																																									},
    																																																																																																																																																																																																									{
    																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																									}
    																																																																																																																																																																																																								],
    																																																																																																																																																																																																								r: [
    																																																																																																																																																																																																									{
    																																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																																										l: [
    																																																																																																																																																																																																											{
    																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																											},
    																																																																																																																																																																																																											{
    																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																												val: "mistyrose"
    																																																																																																																																																																																																											},
    																																																																																																																																																																																																											{
    																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																											}
    																																																																																																																																																																																																										],
    																																																																																																																																																																																																										r: [
    																																																																																																																																																																																																											{
    																																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																																												l: [
    																																																																																																																																																																																																													{
    																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																													},
    																																																																																																																																																																																																													{
    																																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																																														val: "moccasin"
    																																																																																																																																																																																																													},
    																																																																																																																																																																																																													{
    																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																													}
    																																																																																																																																																																																																												],
    																																																																																																																																																																																																												r: [
    																																																																																																																																																																																																													{
    																																																																																																																																																																																																														typ: 27,
    																																																																																																																																																																																																														l: [
    																																																																																																																																																																																																															{
    																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																															},
    																																																																																																																																																																																																															{
    																																																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																																																val: "navajowhite"
    																																																																																																																																																																																																															},
    																																																																																																																																																																																																															{
    																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																															}
    																																																																																																																																																																																																														],
    																																																																																																																																																																																																														r: [
    																																																																																																																																																																																																															{
    																																																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																																																l: [
    																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																																																		val: "navy"
    																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																],
    																																																																																																																																																																																																																r: [
    																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																																																		l: [
    																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																																																				val: "oldlace"
    																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																		],
    																																																																																																																																																																																																																		r: [
    																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																																																				l: [
    																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																																																						val: "olive"
    																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																				],
    																																																																																																																																																																																																																				r: [
    																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																																																						l: [
    																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																																																								val: "olivedrab"
    																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																						],
    																																																																																																																																																																																																																						r: [
    																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																																																								l: [
    																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																																																										val: "orange"
    																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																								],
    																																																																																																																																																																																																																								r: [
    																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																																																										l: [
    																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																																												val: "orangered"
    																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																										],
    																																																																																																																																																																																																																										r: [
    																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																																																												l: [
    																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																																																														val: "orchid"
    																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																												],
    																																																																																																																																																																																																																												r: [
    																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																														typ: 27,
    																																																																																																																																																																																																																														l: [
    																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																																																																val: "palegoldenrod"
    																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																														],
    																																																																																																																																																																																																																														r: [
    																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																																																																l: [
    																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																																																																		val: "palegreen"
    																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																],
    																																																																																																																																																																																																																																r: [
    																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																																																																		l: [
    																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																																																																				val: "paleturquoise"
    																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																		],
    																																																																																																																																																																																																																																		r: [
    																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																																																																				l: [
    																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																																																																						val: "palevioletred"
    																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																				],
    																																																																																																																																																																																																																																				r: [
    																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																																																																						l: [
    																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																																																																								val: "papayawhip"
    																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																						],
    																																																																																																																																																																																																																																						r: [
    																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																																																																								l: [
    																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																																																																										val: "peachpuff"
    																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																								],
    																																																																																																																																																																																																																																								r: [
    																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																																																																										l: [
    																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																																																												val: "peru"
    																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																										],
    																																																																																																																																																																																																																																										r: [
    																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																																																																												l: [
    																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																																																																														val: "pink"
    																																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																																												],
    																																																																																																																																																																																																																																												r: [
    																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																														typ: 27,
    																																																																																																																																																																																																																																														l: [
    																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																																																																																val: "plum"
    																																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																																														],
    																																																																																																																																																																																																																																														r: [
    																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																																																																																l: [
    																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																																																																																		val: "powderblue"
    																																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																																],
    																																																																																																																																																																																																																																																r: [
    																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																																																																																		l: [
    																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																																																																																				val: "purple"
    																																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																																		],
    																																																																																																																																																																																																																																																		r: [
    																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																																																																																				l: [
    																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																																																																																						val: "rebeccapurple"
    																																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																																				],
    																																																																																																																																																																																																																																																				r: [
    																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																																																																																						l: [
    																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																																																																																								val: "red"
    																																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																																						],
    																																																																																																																																																																																																																																																						r: [
    																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																																																																																								l: [
    																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																																																																																										val: "rosybrown"
    																																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																																								],
    																																																																																																																																																																																																																																																								r: [
    																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																																																																																										l: [
    																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																																																																												val: "royalblue"
    																																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																																										],
    																																																																																																																																																																																																																																																										r: [
    																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																																																																																												l: [
    																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																																																																																														val: "saddlebrown"
    																																																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																																																												],
    																																																																																																																																																																																																																																																												r: [
    																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																														typ: 27,
    																																																																																																																																																																																																																																																														l: [
    																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																																																																																																val: "salmon"
    																																																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																																																														],
    																																																																																																																																																																																																																																																														r: [
    																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																																																																																																l: [
    																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																																																																																																		val: "sandybrown"
    																																																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																																																],
    																																																																																																																																																																																																																																																																r: [
    																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																																																																																																		l: [
    																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																																																																																																				val: "seagreen"
    																																																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																																																		],
    																																																																																																																																																																																																																																																																		r: [
    																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																																																																																																				l: [
    																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																																																																																																						val: "seashell"
    																																																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																																																				],
    																																																																																																																																																																																																																																																																				r: [
    																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																																																																																																						l: [
    																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																																																																																																								val: "sienna"
    																																																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																																																						],
    																																																																																																																																																																																																																																																																						r: [
    																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																																																																																																								l: [
    																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																																																																																																										val: "silver"
    																																																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																																																								],
    																																																																																																																																																																																																																																																																								r: [
    																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																																																																																																										l: [
    																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																																																																																												val: "skyblue"
    																																																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																																																										],
    																																																																																																																																																																																																																																																																										r: [
    																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																																																																																																												l: [
    																																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																																																																																																														val: "slateblue"
    																																																																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																																																																												],
    																																																																																																																																																																																																																																																																												r: [
    																																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																																														typ: 27,
    																																																																																																																																																																																																																																																																														l: [
    																																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																																																																																																																val: "slategray"
    																																																																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																																																																														],
    																																																																																																																																																																																																																																																																														r: [
    																																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																																																																																																																l: [
    																																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																																																																																																																		val: "slategrey"
    																																																																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																																																																],
    																																																																																																																																																																																																																																																																																r: [
    																																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																																																																																																																		l: [
    																																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																																																																																																																				val: "snow"
    																																																																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																																																																		],
    																																																																																																																																																																																																																																																																																		r: [
    																																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																																																																																																																				l: [
    																																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																																																																																																																						val: "springgreen"
    																																																																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																																																																				],
    																																																																																																																																																																																																																																																																																				r: [
    																																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																																																																																																																						l: [
    																																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																																																																																																																								val: "steelblue"
    																																																																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																																																																						],
    																																																																																																																																																																																																																																																																																						r: [
    																																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																																																																																																																								l: [
    																																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																																																																																																																										val: "tan"
    																																																																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																																																																								],
    																																																																																																																																																																																																																																																																																								r: [
    																																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																																																																																																																										l: [
    																																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																																																																																																												val: "teal"
    																																																																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																																																																										],
    																																																																																																																																																																																																																																																																																										r: [
    																																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																																												typ: 27,
    																																																																																																																																																																																																																																																																																												l: [
    																																																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																																																														typ: 1,
    																																																																																																																																																																																																																																																																																														val: "thistle"
    																																																																																																																																																																																																																																																																																													},
    																																																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																																																														typ: 20
    																																																																																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																																																																																												],
    																																																																																																																																																																																																																																																																																												r: [
    																																																																																																																																																																																																																																																																																													{
    																																																																																																																																																																																																																																																																																														typ: 27,
    																																																																																																																																																																																																																																																																																														l: [
    																																																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																																																typ: 1,
    																																																																																																																																																																																																																																																																																																val: "tomato"
    																																																																																																																																																																																																																																																																																															},
    																																																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																																																typ: 20
    																																																																																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																																																																																														],
    																																																																																																																																																																																																																																																																																														r: [
    																																																																																																																																																																																																																																																																																															{
    																																																																																																																																																																																																																																																																																																typ: 27,
    																																																																																																																																																																																																																																																																																																l: [
    																																																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																																																		typ: 1,
    																																																																																																																																																																																																																																																																																																		val: "turquoise"
    																																																																																																																																																																																																																																																																																																	},
    																																																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																																																		typ: 20
    																																																																																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																																																																																],
    																																																																																																																																																																																																																																																																																																r: [
    																																																																																																																																																																																																																																																																																																	{
    																																																																																																																																																																																																																																																																																																		typ: 27,
    																																																																																																																																																																																																																																																																																																		l: [
    																																																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																																																				typ: 1,
    																																																																																																																																																																																																																																																																																																				val: "violet"
    																																																																																																																																																																																																																																																																																																			},
    																																																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																																																				typ: 20
    																																																																																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																																																																																		],
    																																																																																																																																																																																																																																																																																																		r: [
    																																																																																																																																																																																																																																																																																																			{
    																																																																																																																																																																																																																																																																																																				typ: 27,
    																																																																																																																																																																																																																																																																																																				l: [
    																																																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																																																						typ: 1,
    																																																																																																																																																																																																																																																																																																						val: "wheat"
    																																																																																																																																																																																																																																																																																																					},
    																																																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																																																						typ: 20
    																																																																																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																																																																																				],
    																																																																																																																																																																																																																																																																																																				r: [
    																																																																																																																																																																																																																																																																																																					{
    																																																																																																																																																																																																																																																																																																						typ: 27,
    																																																																																																																																																																																																																																																																																																						l: [
    																																																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																																																								typ: 1,
    																																																																																																																																																																																																																																																																																																								val: "white"
    																																																																																																																																																																																																																																																																																																							},
    																																																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																																																								typ: 20
    																																																																																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																																																																																						],
    																																																																																																																																																																																																																																																																																																						r: [
    																																																																																																																																																																																																																																																																																																							{
    																																																																																																																																																																																																																																																																																																								typ: 27,
    																																																																																																																																																																																																																																																																																																								l: [
    																																																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																																																										typ: 1,
    																																																																																																																																																																																																																																																																																																										val: "whitesmoke"
    																																																																																																																																																																																																																																																																																																									},
    																																																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																																																										typ: 20
    																																																																																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																																																																																								],
    																																																																																																																																																																																																																																																																																																								r: [
    																																																																																																																																																																																																																																																																																																									{
    																																																																																																																																																																																																																																																																																																										typ: 27,
    																																																																																																																																																																																																																																																																																																										l: [
    																																																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																																																																																																																												val: "yellow"
    																																																																																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																																																																																										],
    																																																																																																																																																																																																																																																																																																										r: [
    																																																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																																																												typ: 20
    																																																																																																																																																																																																																																																																																																											},
    																																																																																																																																																																																																																																																																																																											{
    																																																																																																																																																																																																																																																																																																												typ: 1,
    																																																																																																																																																																																																																																																																																																												val: "yellowgreen"
    																																																																																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																																																																																										]
    																																																																																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																																																																																								]
    																																																																																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																																																																																						]
    																																																																																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																																																																																				]
    																																																																																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																																																																																		]
    																																																																																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																																																																																]
    																																																																																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																																																																																														]
    																																																																																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																																																																																												]
    																																																																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																																																																										]
    																																																																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																																																																								]
    																																																																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																																																																						]
    																																																																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																																																																				]
    																																																																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																																																																		]
    																																																																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																																																																]
    																																																																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																																																																														]
    																																																																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																																																																												]
    																																																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																																																										]
    																																																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																																																								]
    																																																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																																																						]
    																																																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																																																				]
    																																																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																																																		]
    																																																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																																																]
    																																																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																																																														]
    																																																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																																																												]
    																																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																																										]
    																																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																																								]
    																																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																																						]
    																																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																																				]
    																																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																																		]
    																																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																																]
    																																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																																														]
    																																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																																												]
    																																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																																										]
    																																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																																								]
    																																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																																						]
    																																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																																				]
    																																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																																		]
    																																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																																]
    																																																																																																																																																																																																																															}
    																																																																																																																																																																																																																														]
    																																																																																																																																																																																																																													}
    																																																																																																																																																																																																																												]
    																																																																																																																																																																																																																											}
    																																																																																																																																																																																																																										]
    																																																																																																																																																																																																																									}
    																																																																																																																																																																																																																								]
    																																																																																																																																																																																																																							}
    																																																																																																																																																																																																																						]
    																																																																																																																																																																																																																					}
    																																																																																																																																																																																																																				]
    																																																																																																																																																																																																																			}
    																																																																																																																																																																																																																		]
    																																																																																																																																																																																																																	}
    																																																																																																																																																																																																																]
    																																																																																																																																																																																																															}
    																																																																																																																																																																																																														]
    																																																																																																																																																																																																													}
    																																																																																																																																																																																																												]
    																																																																																																																																																																																																											}
    																																																																																																																																																																																																										]
    																																																																																																																																																																																																									}
    																																																																																																																																																																																																								]
    																																																																																																																																																																																																							}
    																																																																																																																																																																																																						]
    																																																																																																																																																																																																					}
    																																																																																																																																																																																																				]
    																																																																																																																																																																																																			}
    																																																																																																																																																																																																		]
    																																																																																																																																																																																																	}
    																																																																																																																																																																																																]
    																																																																																																																																																																																															}
    																																																																																																																																																																																														]
    																																																																																																																																																																																													}
    																																																																																																																																																																																												]
    																																																																																																																																																																																											}
    																																																																																																																																																																																										]
    																																																																																																																																																																																									}
    																																																																																																																																																																																								]
    																																																																																																																																																																																							}
    																																																																																																																																																																																						]
    																																																																																																																																																																																					}
    																																																																																																																																																																																				]
    																																																																																																																																																																																			}
    																																																																																																																																																																																		]
    																																																																																																																																																																																	}
    																																																																																																																																																																																]
    																																																																																																																																																																															}
    																																																																																																																																																																														]
    																																																																																																																																																																													}
    																																																																																																																																																																												]
    																																																																																																																																																																											}
    																																																																																																																																																																										]
    																																																																																																																																																																									}
    																																																																																																																																																																								]
    																																																																																																																																																																							}
    																																																																																																																																																																						]
    																																																																																																																																																																					}
    																																																																																																																																																																				]
    																																																																																																																																																																			}
    																																																																																																																																																																		]
    																																																																																																																																																																	}
    																																																																																																																																																																]
    																																																																																																																																																															}
    																																																																																																																																																														]
    																																																																																																																																																													}
    																																																																																																																																																												]
    																																																																																																																																																											}
    																																																																																																																																																										]
    																																																																																																																																																									}
    																																																																																																																																																								]
    																																																																																																																																																							}
    																																																																																																																																																						]
    																																																																																																																																																					}
    																																																																																																																																																				]
    																																																																																																																																																			}
    																																																																																																																																																		]
    																																																																																																																																																	}
    																																																																																																																																																]
    																																																																																																																																															}
    																																																																																																																																														]
    																																																																																																																																													}
    																																																																																																																																												]
    																																																																																																																																											}
    																																																																																																																																										]
    																																																																																																																																									}
    																																																																																																																																								]
    																																																																																																																																							}
    																																																																																																																																						]
    																																																																																																																																					}
    																																																																																																																																				]
    																																																																																																																																			}
    																																																																																																																																		]
    																																																																																																																																	}
    																																																																																																																																]
    																																																																																																																															}
    																																																																																																																														]
    																																																																																																																													}
    																																																																																																																												]
    																																																																																																																											}
    																																																																																																																										]
    																																																																																																																									}
    																																																																																																																								]
    																																																																																																																							}
    																																																																																																																						]
    																																																																																																																					}
    																																																																																																																				]
    																																																																																																																			}
    																																																																																																																		]
    																																																																																																																	}
    																																																																																																																]
    																																																																																																															}
    																																																																																																														]
    																																																																																																													}
    																																																																																																												]
    																																																																																																											}
    																																																																																																										]
    																																																																																																									}
    																																																																																																								]
    																																																																																																							}
    																																																																																																						]
    																																																																																																					}
    																																																																																																				]
    																																																																																																			}
    																																																																																																		]
    																																																																																																	}
    																																																																																																]
    																																																																																															}
    																																																																																														]
    																																																																																													}
    																																																																																												]
    																																																																																											}
    																																																																																										]
    																																																																																									}
    																																																																																								]
    																																																																																							}
    																																																																																						]
    																																																																																					}
    																																																																																				]
    																																																																																			}
    																																																																																		]
    																																																																																	}
    																																																																																]
    																																																																															}
    																																																																														]
    																																																																													}
    																																																																												]
    																																																																											}
    																																																																										]
    																																																																									}
    																																																																								]
    																																																																							}
    																																																																						]
    																																																																					}
    																																																																				]
    																																																																			}
    																																																																		]
    																																																																	}
    																																																																]
    																																																															}
    																																																														]
    																																																													}
    																																																												]
    																																																											}
    																																																										]
    																																																									}
    																																																								]
    																																																							}
    																																																						]
    																																																					}
    																																																				]
    																																																			}
    																																																		]
    																																																	}
    																																																]
    																																															}
    																																														]
    																																													}
    																																												]
    																																											}
    																																										]
    																																									}
    																																								]
    																																							}
    																																						]
    																																					}
    																																				]
    																																			}
    																																		]
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"namespace-prefix": {
    		syntax: "<ident>",
    		ast: [
    			{
    				typ: 2,
    				val: "ident"
    			}
    		]
    	},
    	"ns-prefix": {
    		syntax: "[ <ident-token> | '*' ]? '|'",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "ident-token"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 33,
    								val: "'*'"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				],
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 33,
    				val: "'|'"
    			}
    		]
    	},
    	"number-percentage": {
    		syntax: "<number> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"numeric-figure-values": {
    		syntax: "[ lining-nums | oldstyle-nums ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "lining-nums"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "oldstyle-nums"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"numeric-fraction-values": {
    		syntax: "[ diagonal-fractions | stacked-fractions ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "diagonal-fractions"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "stacked-fractions"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"numeric-spacing-values": {
    		syntax: "[ proportional-nums | tabular-nums ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "proportional-nums"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "tabular-nums"
    							},
    							{
    								typ: 20
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	nth: {
    		syntax: "<an-plus-b> | even | odd",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "an-plus-b"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "even"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "odd"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"opacity()": {
    		syntax: "opacity( [ <number-percentage> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "opacity",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "number-percentage"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"overflow-position": {
    		syntax: "unsafe | safe",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "unsafe"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "safe"
    					}
    				]
    			}
    		]
    	},
    	"outline-radius": {
    		syntax: "<length> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"page-body": {
    		syntax: "<declaration>? [ ; <page-body> ]? | <page-margin-box> <page-body>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "declaration",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: ";"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "page-body"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "page-margin-box"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "page-body"
    					}
    				]
    			}
    		]
    	},
    	"page-margin-box": {
    		syntax: "<page-margin-box-type> '{' <declaration-list> '}'",
    		ast: [
    			{
    				typ: 2,
    				val: "page-margin-box-type"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 33,
    				val: "'{'"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "declaration-list"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 33,
    				val: "'}'"
    			}
    		]
    	},
    	"page-margin-box-type": {
    		syntax: "@top-left-corner | @top-left | @top-center | @top-right | @top-right-corner | @bottom-left-corner | @bottom-left | @bottom-center | @bottom-right | @bottom-right-corner | @left-top | @left-middle | @left-bottom | @right-top | @right-middle | @right-bottom",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "@top-left-corner"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "@top-left"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "@top-center"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "@top-right"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "@top-right-corner"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "@bottom-left-corner"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "@bottom-left"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "@bottom-center"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "@bottom-right"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "@bottom-right-corner"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "@left-top"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "@left-middle"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "@left-bottom"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 27,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 1,
    																																val: "@right-top"
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 27,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "@right-middle"
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "@right-bottom"
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"page-selector-list": {
    		syntax: "[ <page-selector># ]?",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "page-selector",
    						isList: true
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"page-selector": {
    		syntax: "<pseudo-page>+ | <ident> <pseudo-page>*",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "pseudo-page",
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "ident"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "pseudo-page",
    						isRepeatable: true
    					}
    				]
    			}
    		]
    	},
    	"page-size": {
    		syntax: "A5 | A4 | A3 | B5 | B4 | JIS-B5 | JIS-B4 | letter | legal | ledger",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "A5"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "A4"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "A3"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "B5"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "B4"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "JIS-B5"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "JIS-B4"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "letter"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "legal"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "ledger"
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"path()": {
    		syntax: "path( [ <fill-rule>, ]? <string> )",
    		ast: [
    			{
    				typ: 18,
    				val: "path",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "fill-rule"
    							},
    							{
    								typ: 10
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					}
    				]
    			}
    		]
    	},
    	"paint()": {
    		syntax: "paint( <ident>, <declaration-value>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "paint",
    				chi: [
    					{
    						typ: 2,
    						val: "ident"
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "declaration-value",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 14,
    							lin: 1,
    							col: 15
    						}
    					}
    				]
    			}
    		]
    	},
    	"perspective()": {
    		syntax: "perspective( [ <length [0,∞]> | none ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "perspective",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "length",
    										range: [
    											0,
    											null
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"polygon()": {
    		syntax: "polygon( <fill-rule>? , [ <length-percentage> <length-percentage> ]# )",
    		ast: [
    			{
    				typ: 18,
    				val: "polygon",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "fill-rule",
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 10
    							}
    						],
    						pos: {
    							ind: 8,
    							lin: 1,
    							col: 9
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "length-percentage"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage"
    							}
    						],
    						isList: true
    					}
    				]
    			}
    		]
    	},
    	position: {
    		syntax: "[ [ left | center | right ] || [ top | center | bottom ] | [ left | center | right | <length-percentage> ] [ top | center | bottom | <length-percentage> ]? | [ [ left | right ] <length-percentage> ] && [ [ top | bottom ] <length-percentage> ] ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "left"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "center"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "right"
    													},
    													{
    														typ: 20
    													}
    												]
    											}
    										]
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "top"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "center"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "bottom"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "left"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "center"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "right"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 2,
    																				val: "length-percentage"
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "top"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "center"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "bottom"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 2,
    																				val: "length-percentage"
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												],
    												isOptional: true
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 29,
    												l: [
    													{
    														typ: 22,
    														chi: [
    															{
    																typ: 22,
    																chi: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "left"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "right"
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															},
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "length-percentage"
    															}
    														]
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 22,
    														chi: [
    															{
    																typ: 22,
    																chi: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "top"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "bottom"
    																			},
    																			{
    																				typ: 20
    																			}
    																		]
    																	}
    																]
    															},
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "length-percentage"
    															}
    														]
    													}
    												]
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"pow()": {
    		syntax: "pow( <calc-sum>, <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "pow",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"pseudo-class-selector": {
    		syntax: "':' <ident-token> | ':' <function-token> <any-value> ')'",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 33,
    						val: "':'"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "ident-token"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 33,
    						val: "':'"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "function-token"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "any-value"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 33,
    						val: "')'"
    					}
    				]
    			}
    		]
    	},
    	"pseudo-element-selector": {
    		syntax: "':' <pseudo-class-selector>",
    		ast: [
    			{
    				typ: 33,
    				val: "':'"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "pseudo-class-selector"
    			}
    		]
    	},
    	"pseudo-page": {
    		syntax: ": [ left | right | first | blank ]",
    		ast: [
    			{
    				typ: 1,
    				val: ":"
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "left"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "right"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "first"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "blank"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	quote: {
    		syntax: "open-quote | close-quote | no-open-quote | no-close-quote",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "open-quote"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "close-quote"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "no-open-quote"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "no-close-quote"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"radial-gradient()": {
    		syntax: "radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "radial-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "ending-shape"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "size"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	ratio: {
    		syntax: "<number [0,∞]> [ / <number [0,∞]> ]?",
    		ast: [
    			{
    				typ: 2,
    				val: "number",
    				range: [
    					0,
    					null
    				]
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 24
    					},
    					{
    						typ: 2,
    						val: "number",
    						range: [
    							0,
    							null
    						]
    					}
    				],
    				isOptional: true
    			}
    		]
    	},
    	"ray()": {
    		syntax: "ray( <angle> && <ray-size>? && contain? && [at <position>]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "ray",
    				chi: [
    					{
    						typ: 29,
    						l: [
    							{
    								typ: 29,
    								l: [
    									{
    										typ: 29,
    										l: [
    											{
    												typ: 2,
    												val: "angle"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "ray-size",
    												isOptional: true
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "contain",
    										isOptional: true
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 1,
    										val: "at"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "position"
    									}
    								],
    								isOptional: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"ray-size": {
    		syntax: "closest-side | closest-corner | farthest-side | farthest-corner | sides",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "closest-side"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "closest-corner"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "farthest-side"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "farthest-corner"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "sides"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"relative-selector": {
    		syntax: "<combinator>? <complex-selector>",
    		ast: [
    			{
    				typ: 2,
    				val: "combinator",
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "complex-selector"
    			}
    		]
    	},
    	"relative-selector-list": {
    		syntax: "<relative-selector>#",
    		ast: [
    			{
    				typ: 2,
    				val: "relative-selector",
    				isList: true
    			}
    		]
    	},
    	"relative-size": {
    		syntax: "larger | smaller",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "larger"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "smaller"
    					}
    				]
    			}
    		]
    	},
    	"rem()": {
    		syntax: "rem( <calc-sum>, <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "rem",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"repeat-style": {
    		syntax: "repeat-x | repeat-y | [ repeat | space | round | no-repeat ]{1,2}",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "repeat-x"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "repeat-y"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "repeat"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "space"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "round"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "no-repeat"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								],
    								occurence: {
    									min: 1,
    									max: 2
    								}
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"repeating-conic-gradient()": {
    		syntax: "repeating-conic-gradient( [ from <angle> ]? [ at <position> ]?, <angular-color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "repeating-conic-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "from"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "angle"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "angular-color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	"repeating-linear-gradient()": {
    		syntax: "repeating-linear-gradient( [ <angle> | to <side-or-corner> ]? , <color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "repeating-linear-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "angle"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "to"
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "side-or-corner"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 10
    							}
    						],
    						pos: {
    							ind: 27,
    							lin: 1,
    							col: 28
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	"repeating-radial-gradient()": {
    		syntax: "repeating-radial-gradient( [ <ending-shape> || <size> ]? [ at <position> ]? , <color-stop-list> )",
    		ast: [
    			{
    				typ: 18,
    				val: "repeating-radial-gradient",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "ending-shape"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "size"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "at"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "position"
    							}
    						],
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color-stop-list"
    					}
    				]
    			}
    		]
    	},
    	"reversed-counter-name": {
    		syntax: "reversed( <counter-name> )",
    		ast: [
    			{
    				typ: 18,
    				val: "reversed",
    				chi: [
    					{
    						typ: 2,
    						val: "counter-name"
    					}
    				]
    			}
    		]
    	},
    	"rgb()": {
    		syntax: "rgb( <percentage>{3} [ / <alpha-value> ]? ) | rgb( <number>{3} [ / <alpha-value> ]? ) | rgb( <percentage>#{3} , <alpha-value>? ) | rgb( <number>#{3} , <alpha-value>? )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "rgb",
    						chi: [
    							{
    								typ: 2,
    								val: "percentage",
    								occurence: {
    									min: 3,
    									max: 0
    								}
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "alpha-value"
    									}
    								],
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "rgb",
    								chi: [
    									{
    										typ: 2,
    										val: "number",
    										occurence: {
    											min: 3,
    											max: 0
    										}
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 24
    											},
    											{
    												typ: 2,
    												val: "alpha-value"
    											}
    										],
    										isOptional: true
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "rgb",
    										chi: [
    											{
    												typ: 2,
    												val: "percentage",
    												isList: true,
    												occurence: {
    													min: 3,
    													max: 0
    												}
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "alpha-value",
    														isOptional: true
    													}
    												],
    												pos: {
    													ind: 110,
    													lin: 1,
    													col: 111
    												}
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "rgb",
    										chi: [
    											{
    												typ: 2,
    												val: "number",
    												isList: true,
    												occurence: {
    													min: 3,
    													max: 0
    												}
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "alpha-value",
    														isOptional: true
    													}
    												],
    												pos: {
    													ind: 149,
    													lin: 1,
    													col: 150
    												}
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"rgba()": {
    		syntax: "rgba( <percentage>{3} [ / <alpha-value> ]? ) | rgba( <number>{3} [ / <alpha-value> ]? ) | rgba( <percentage>#{3} , <alpha-value>? ) | rgba( <number>#{3} , <alpha-value>? )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 18,
    						val: "rgba",
    						chi: [
    							{
    								typ: 2,
    								val: "percentage",
    								occurence: {
    									min: 3,
    									max: 0
    								}
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 24
    									},
    									{
    										typ: 2,
    										val: "alpha-value"
    									}
    								],
    								isOptional: true
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "rgba",
    								chi: [
    									{
    										typ: 2,
    										val: "number",
    										occurence: {
    											min: 3,
    											max: 0
    										}
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 24
    											},
    											{
    												typ: 2,
    												val: "alpha-value"
    											}
    										],
    										isOptional: true
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "rgba",
    										chi: [
    											{
    												typ: 2,
    												val: "percentage",
    												isList: true,
    												occurence: {
    													min: 3,
    													max: 0
    												}
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "alpha-value",
    														isOptional: true
    													}
    												],
    												pos: {
    													ind: 113,
    													lin: 1,
    													col: 114
    												}
    											}
    										]
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 18,
    										val: "rgba",
    										chi: [
    											{
    												typ: 2,
    												val: "number",
    												isList: true,
    												occurence: {
    													min: 3,
    													max: 0
    												}
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 22,
    												chi: [
    													{
    														typ: 10
    													},
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "alpha-value",
    														isOptional: true
    													}
    												],
    												pos: {
    													ind: 153,
    													lin: 1,
    													col: 154
    												}
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"rotate()": {
    		syntax: "rotate( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotate",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"rotate3d()": {
    		syntax: "rotate3d( <number> , <number> , <number> , [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotate3d",
    				chi: [
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "number"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"rotateX()": {
    		syntax: "rotateX( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotateX",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"rotateY()": {
    		syntax: "rotateY( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotateY",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"rotateZ()": {
    		syntax: "rotateZ( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "rotateZ",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"round()": {
    		syntax: "round( <rounding-strategy>?, <calc-sum>, <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "round",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "rounding-strategy",
    								isOptional: true
    							},
    							{
    								typ: 10
    							}
    						],
    						pos: {
    							ind: 6,
    							lin: 1,
    							col: 7
    						}
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "calc-sum"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"rounding-strategy": {
    		syntax: "nearest | up | down | to-zero",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "nearest"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "up"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "down"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "to-zero"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"saturate()": {
    		syntax: "saturate( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "saturate",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	"scale()": {
    		syntax: "scale( [ <number> | <percentage> ]#{1,2} )",
    		ast: [
    			{
    				typ: 18,
    				val: "scale",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "number"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isList: true,
    						occurence: {
    							min: 1,
    							max: 2
    						}
    					}
    				]
    			}
    		]
    	},
    	"scale3d()": {
    		syntax: "scale3d( [ <number> | <percentage> ]#{3} )",
    		ast: [
    			{
    				typ: 18,
    				val: "scale3d",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "number"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isList: true,
    						occurence: {
    							min: 3,
    							max: 0
    						}
    					}
    				]
    			}
    		]
    	},
    	"scaleX()": {
    		syntax: "scaleX( [ <number> | <percentage> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "scaleX",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "number"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"scaleY()": {
    		syntax: "scaleY( [ <number> | <percentage> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "scaleY",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "number"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"scaleZ()": {
    		syntax: "scaleZ( [ <number> | <percentage> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "scaleZ",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "number"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "percentage"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"scroll()": {
    		syntax: "scroll( [ <axis> || <scroller> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "scroll",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "axis"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "scroller"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	scroller: {
    		syntax: "root | nearest",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "root"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "nearest"
    					}
    				]
    			}
    		]
    	},
    	"self-position": {
    		syntax: "center | start | end | self-start | self-end | flex-start | flex-end",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "center"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "start"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "end"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "self-start"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "self-end"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "flex-start"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "flex-end"
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"shape-radius": {
    		syntax: "<length-percentage> | closest-side | farthest-side",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "closest-side"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "farthest-side"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"sign()": {
    		syntax: "sign( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "sign",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"skew()": {
    		syntax: "skew( [ <angle> | <zero> ] , [ <angle> | <zero> ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "skew",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "angle"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "zero"
    											},
    											{
    												typ: 20
    											}
    										]
    									}
    								],
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 27,
    							lin: 1,
    							col: 28
    						}
    					}
    				]
    			}
    		]
    	},
    	"skewX()": {
    		syntax: "skewX( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "skewX",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"skewY()": {
    		syntax: "skewY( [ <angle> | <zero> ] )",
    		ast: [
    			{
    				typ: 18,
    				val: "skewY",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "angle"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "zero"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"sepia()": {
    		syntax: "sepia( <number-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "sepia",
    				chi: [
    					{
    						typ: 2,
    						val: "number-percentage"
    					}
    				]
    			}
    		]
    	},
    	shadow: {
    		syntax: "inset? && <length>{2,4} && <color>?",
    		ast: [
    			{
    				typ: 29,
    				l: [
    					{
    						typ: 29,
    						l: [
    							{
    								typ: 1,
    								val: "inset",
    								isOptional: true
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length",
    								occurence: {
    									min: 2,
    									max: 4
    								}
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "color",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"shadow-t": {
    		syntax: "[ <length>{2,3} && <color>? ]",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 29,
    						l: [
    							{
    								typ: 2,
    								val: "length",
    								occurence: {
    									min: 2,
    									max: 3
    								}
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "color",
    								isOptional: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	shape: {
    		syntax: "rect(<top>, <right>, <bottom>, <left>)",
    		ast: [
    			{
    				typ: 18,
    				val: "rect",
    				chi: [
    					{
    						typ: 2,
    						val: "top"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "right"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "bottom"
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "left"
    					}
    				]
    			}
    		]
    	},
    	"shape-box": {
    		syntax: "<box> | margin-box",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "box"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "margin-box"
    					}
    				]
    			}
    		]
    	},
    	"side-or-corner": {
    		syntax: "[ left | right ] || [ top | bottom ]",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "left"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "right"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "top"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "bottom"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"sin()": {
    		syntax: "sin( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "sin",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"single-animation": {
    		syntax: "<'animation-duration'> || <easing-function> || <'animation-delay'> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state> || [ none | <keyframes-name> ] || <single-animation-timeline>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 3,
    						val: "animation-duration"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "easing-function"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "animation-delay"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "single-animation-iteration-count"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 28,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "single-animation-direction"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 28,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 2,
    																val: "single-animation-fill-mode"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 28,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 2,
    																		val: "single-animation-play-state"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 28,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 22,
    																				chi: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "none"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 2,
    																								val: "keyframes-name"
    																							},
    																							{
    																								typ: 20
    																							}
    																						]
    																					}
    																				]
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 2,
    																				val: "single-animation-timeline"
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"single-animation-direction": {
    		syntax: "normal | reverse | alternate | alternate-reverse",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "reverse"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "alternate"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "alternate-reverse"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"single-animation-fill-mode": {
    		syntax: "none | forwards | backwards | both",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "none"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "forwards"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "backwards"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "both"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"single-animation-iteration-count": {
    		syntax: "infinite | <number>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "infinite"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "number"
    					}
    				]
    			}
    		]
    	},
    	"single-animation-play-state": {
    		syntax: "running | paused",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "running"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "paused"
    					}
    				]
    			}
    		]
    	},
    	"single-animation-timeline": {
    		syntax: "auto | none | <dashed-ident> | <scroll()> | <view()>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "none"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "dashed-ident"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 5,
    												val: "scroll"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 5,
    												val: "view"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"single-transition": {
    		syntax: "[ none | <single-transition-property> ] || <time> || <easing-function> || <time> || <transition-behavior-value>",
    		ast: [
    			{
    				typ: 28,
    				l: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "none"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "single-transition-property"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 28,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "time"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "easing-function"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 28,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "time"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "transition-behavior-value"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"single-transition-property": {
    		syntax: "all | <custom-ident>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "all"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "custom-ident"
    					}
    				]
    			}
    		]
    	},
    	size: {
    		syntax: "closest-side | farthest-side | closest-corner | farthest-corner | <length> | <length-percentage>{2}",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "closest-side"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "farthest-side"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "closest-corner"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "farthest-corner"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "length"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 2,
    														val: "length-percentage",
    														occurence: {
    															min: 2,
    															max: 0
    														}
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"sqrt()": {
    		syntax: "sqrt( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "sqrt",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	"step-position": {
    		syntax: "jump-start | jump-end | jump-none | jump-both | start | end",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "jump-start"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "jump-end"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "jump-none"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "jump-both"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "start"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "end"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"step-timing-function": {
    		syntax: "step-start | step-end | steps(<integer>[, <step-position>]?)",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "step-start"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "step-end"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "steps",
    								chi: [
    									{
    										typ: 2,
    										val: "integer"
    									},
    									{
    										typ: 22,
    										chi: [
    											{
    												typ: 10
    											},
    											{
    												typ: 20
    											},
    											{
    												typ: 2,
    												val: "step-position"
    											}
    										],
    										isOptional: true
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"subclass-selector": {
    		syntax: "<id-selector> | <class-selector> | <attribute-selector> | <pseudo-class-selector>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "id-selector"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "class-selector"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "attribute-selector"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "pseudo-class-selector"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"supports-condition": {
    		syntax: "not <supports-in-parens> | <supports-in-parens> [ and <supports-in-parens> ]* | <supports-in-parens> [ or <supports-in-parens> ]*",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "not"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "supports-in-parens"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "supports-in-parens"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 1,
    										val: "and"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "supports-in-parens"
    									}
    								],
    								isRepeatable: true
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "supports-in-parens"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 1,
    										val: "or"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "supports-in-parens"
    									}
    								],
    								isRepeatable: true
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"supports-in-parens": {
    		syntax: "( <supports-condition> ) | <supports-feature> | <general-enclosed>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 30,
    						val: "",
    						chi: [
    							{
    								typ: 2,
    								val: "supports-condition"
    							}
    						]
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "supports-feature"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "general-enclosed"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"supports-feature": {
    		syntax: "<supports-decl> | <supports-selector-fn>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "supports-decl"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "supports-selector-fn"
    					}
    				]
    			}
    		]
    	},
    	"supports-decl": {
    		syntax: "( <declaration> )",
    		ast: [
    			{
    				typ: 30,
    				val: "",
    				chi: [
    					{
    						typ: 2,
    						val: "declaration"
    					}
    				]
    			}
    		]
    	},
    	"supports-selector-fn": {
    		syntax: "selector( <complex-selector> )",
    		ast: [
    			{
    				typ: 18,
    				val: "selector",
    				chi: [
    					{
    						typ: 2,
    						val: "complex-selector"
    					}
    				]
    			}
    		]
    	},
    	symbol: {
    		syntax: "<string> | <image> | <custom-ident>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "string"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "image"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "custom-ident"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"tan()": {
    		syntax: "tan( <calc-sum> )",
    		ast: [
    			{
    				typ: 18,
    				val: "tan",
    				chi: [
    					{
    						typ: 2,
    						val: "calc-sum"
    					}
    				]
    			}
    		]
    	},
    	target: {
    		syntax: "<target-counter()> | <target-counters()> | <target-text()>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 5,
    						val: "target-counter"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 5,
    								val: "target-counters"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 5,
    								val: "target-text"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"target-counter()": {
    		syntax: "target-counter( [ <string> | <url> ] , <custom-ident> , <counter-style>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "target-counter",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "url"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "custom-ident"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "counter-style",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 54,
    							lin: 1,
    							col: 55
    						}
    					}
    				]
    			}
    		]
    	},
    	"target-counters()": {
    		syntax: "target-counters( [ <string> | <url> ] , <custom-ident> , <string> , <counter-style>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "target-counters",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "url"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "custom-ident"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "string"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "counter-style",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 66,
    							lin: 1,
    							col: 67
    						}
    					}
    				]
    			}
    		]
    	},
    	"target-text()": {
    		syntax: "target-text( [ <string> | <url> ] , [ content | before | after | first-letter ]? )",
    		ast: [
    			{
    				typ: 18,
    				val: "target-text",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "string"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "url"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 22,
    								chi: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "before"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "after"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "first-letter"
    															},
    															{
    																typ: 20
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								],
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 34,
    							lin: 1,
    							col: 35
    						}
    					}
    				]
    			}
    		]
    	},
    	"time-percentage": {
    		syntax: "<time> | <percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "time"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "percentage"
    					}
    				]
    			}
    		]
    	},
    	"timeline-range-name": {
    		syntax: "cover | contain | entry | exit | entry-crossing | exit-crossing",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "cover"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "contain"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "entry"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "exit"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "entry-crossing"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "exit-crossing"
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"easing-function": {
    		syntax: "linear | <cubic-bezier-timing-function> | <step-timing-function>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "linear"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "cubic-bezier-timing-function"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "step-timing-function"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"track-breadth": {
    		syntax: "<length-percentage> | <flex> | min-content | max-content | auto",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "flex"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "min-content"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "max-content"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "auto"
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"track-list": {
    		syntax: "[ <line-names>? [ <track-size> | <track-repeat> ] ]+ <line-names>?",
    		ast: [
    			{
    				typ: 22,
    				chi: [
    					{
    						typ: 2,
    						val: "line-names",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "track-size"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "track-repeat"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				],
    				atLeastOnce: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "line-names",
    				isOptional: true
    			}
    		]
    	},
    	"track-repeat": {
    		syntax: "repeat( [ <integer [1,∞]> ] , [ <line-names>? <track-size> ]+ <line-names>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "repeat",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "integer",
    								range: [
    									1,
    									null
    								]
    							}
    						]
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 2,
    								val: "line-names",
    								isOptional: true
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "track-size"
    							}
    						],
    						atLeastOnce: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "line-names",
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"track-size": {
    		syntax: "<track-breadth> | minmax( <inflexible-breadth> , <track-breadth> ) | fit-content( <length-percentage> )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "track-breadth"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "minmax",
    								chi: [
    									{
    										typ: 2,
    										val: "inflexible-breadth"
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 10
    									},
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "track-breadth"
    									}
    								]
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 18,
    								val: "fit-content",
    								chi: [
    									{
    										typ: 2,
    										val: "length-percentage"
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"transform-function": {
    		syntax: "<matrix()> | <translate()> | <translateX()> | <translateY()> | <scale()> | <scaleX()> | <scaleY()> | <rotate()> | <skew()> | <skewX()> | <skewY()> | <matrix3d()> | <translate3d()> | <translateZ()> | <scale3d()> | <scaleZ()> | <rotate3d()> | <rotateX()> | <rotateY()> | <rotateZ()> | <perspective()>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 5,
    						val: "matrix"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 5,
    								val: "translate"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 5,
    										val: "translateX"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 5,
    												val: "translateY"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 5,
    														val: "scale"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 5,
    																val: "scaleX"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 5,
    																		val: "scaleY"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 5,
    																				val: "rotate"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 5,
    																						val: "skew"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 5,
    																								val: "skewX"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 5,
    																										val: "skewY"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 5,
    																												val: "matrix3d"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 5,
    																														val: "translate3d"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 27,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 5,
    																																val: "translateZ"
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 27,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 5,
    																																		val: "scale3d"
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 27,
    																																		l: [
    																																			{
    																																				typ: 20
    																																			},
    																																			{
    																																				typ: 5,
    																																				val: "scaleZ"
    																																			},
    																																			{
    																																				typ: 20
    																																			}
    																																		],
    																																		r: [
    																																			{
    																																				typ: 27,
    																																				l: [
    																																					{
    																																						typ: 20
    																																					},
    																																					{
    																																						typ: 5,
    																																						val: "rotate3d"
    																																					},
    																																					{
    																																						typ: 20
    																																					}
    																																				],
    																																				r: [
    																																					{
    																																						typ: 27,
    																																						l: [
    																																							{
    																																								typ: 20
    																																							},
    																																							{
    																																								typ: 5,
    																																								val: "rotateX"
    																																							},
    																																							{
    																																								typ: 20
    																																							}
    																																						],
    																																						r: [
    																																							{
    																																								typ: 27,
    																																								l: [
    																																									{
    																																										typ: 20
    																																									},
    																																									{
    																																										typ: 5,
    																																										val: "rotateY"
    																																									},
    																																									{
    																																										typ: 20
    																																									}
    																																								],
    																																								r: [
    																																									{
    																																										typ: 27,
    																																										l: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 5,
    																																												val: "rotateZ"
    																																											},
    																																											{
    																																												typ: 20
    																																											}
    																																										],
    																																										r: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 5,
    																																												val: "perspective"
    																																											}
    																																										]
    																																									}
    																																								]
    																																							}
    																																						]
    																																					}
    																																				]
    																																			}
    																																		]
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"transform-list": {
    		syntax: "<transform-function>+",
    		ast: [
    			{
    				typ: 2,
    				val: "transform-function",
    				atLeastOnce: true
    			}
    		]
    	},
    	"transition-behavior-value": {
    		syntax: "normal | allow-discrete",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "normal"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 1,
    						val: "allow-discrete"
    					}
    				]
    			}
    		]
    	},
    	"translate()": {
    		syntax: "translate( <length-percentage> , <length-percentage>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "translate",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "length-percentage",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 31,
    							lin: 1,
    							col: 32
    						}
    					}
    				]
    			}
    		]
    	},
    	"translate3d()": {
    		syntax: "translate3d( <length-percentage> , <length-percentage> , <length> )",
    		ast: [
    			{
    				typ: 18,
    				val: "translate3d",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 10
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"translateX()": {
    		syntax: "translateX( <length-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "translateX",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"translateY()": {
    		syntax: "translateY( <length-percentage> )",
    		ast: [
    			{
    				typ: 18,
    				val: "translateY",
    				chi: [
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"translateZ()": {
    		syntax: "translateZ( <length> )",
    		ast: [
    			{
    				typ: 18,
    				val: "translateZ",
    				chi: [
    					{
    						typ: 2,
    						val: "length"
    					}
    				]
    			}
    		]
    	},
    	"type-or-unit": {
    		syntax: "string | color | url | integer | number | length | angle | time | frequency | cap | ch | em | ex | ic | lh | rlh | rem | vb | vi | vw | vh | vmin | vmax | mm | Q | cm | in | pt | pc | px | deg | grad | rad | turn | ms | s | Hz | kHz | %",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "string"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "color"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "url"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 27,
    										l: [
    											{
    												typ: 20
    											},
    											{
    												typ: 1,
    												val: "integer"
    											},
    											{
    												typ: 20
    											}
    										],
    										r: [
    											{
    												typ: 27,
    												l: [
    													{
    														typ: 20
    													},
    													{
    														typ: 1,
    														val: "number"
    													},
    													{
    														typ: 20
    													}
    												],
    												r: [
    													{
    														typ: 27,
    														l: [
    															{
    																typ: 20
    															},
    															{
    																typ: 1,
    																val: "length"
    															},
    															{
    																typ: 20
    															}
    														],
    														r: [
    															{
    																typ: 27,
    																l: [
    																	{
    																		typ: 20
    																	},
    																	{
    																		typ: 1,
    																		val: "angle"
    																	},
    																	{
    																		typ: 20
    																	}
    																],
    																r: [
    																	{
    																		typ: 27,
    																		l: [
    																			{
    																				typ: 20
    																			},
    																			{
    																				typ: 1,
    																				val: "time"
    																			},
    																			{
    																				typ: 20
    																			}
    																		],
    																		r: [
    																			{
    																				typ: 27,
    																				l: [
    																					{
    																						typ: 20
    																					},
    																					{
    																						typ: 1,
    																						val: "frequency"
    																					},
    																					{
    																						typ: 20
    																					}
    																				],
    																				r: [
    																					{
    																						typ: 27,
    																						l: [
    																							{
    																								typ: 20
    																							},
    																							{
    																								typ: 1,
    																								val: "cap"
    																							},
    																							{
    																								typ: 20
    																							}
    																						],
    																						r: [
    																							{
    																								typ: 27,
    																								l: [
    																									{
    																										typ: 20
    																									},
    																									{
    																										typ: 1,
    																										val: "ch"
    																									},
    																									{
    																										typ: 20
    																									}
    																								],
    																								r: [
    																									{
    																										typ: 27,
    																										l: [
    																											{
    																												typ: 20
    																											},
    																											{
    																												typ: 1,
    																												val: "em"
    																											},
    																											{
    																												typ: 20
    																											}
    																										],
    																										r: [
    																											{
    																												typ: 27,
    																												l: [
    																													{
    																														typ: 20
    																													},
    																													{
    																														typ: 1,
    																														val: "ex"
    																													},
    																													{
    																														typ: 20
    																													}
    																												],
    																												r: [
    																													{
    																														typ: 27,
    																														l: [
    																															{
    																																typ: 20
    																															},
    																															{
    																																typ: 1,
    																																val: "ic"
    																															},
    																															{
    																																typ: 20
    																															}
    																														],
    																														r: [
    																															{
    																																typ: 27,
    																																l: [
    																																	{
    																																		typ: 20
    																																	},
    																																	{
    																																		typ: 1,
    																																		val: "lh"
    																																	},
    																																	{
    																																		typ: 20
    																																	}
    																																],
    																																r: [
    																																	{
    																																		typ: 27,
    																																		l: [
    																																			{
    																																				typ: 20
    																																			},
    																																			{
    																																				typ: 1,
    																																				val: "rlh"
    																																			},
    																																			{
    																																				typ: 20
    																																			}
    																																		],
    																																		r: [
    																																			{
    																																				typ: 27,
    																																				l: [
    																																					{
    																																						typ: 20
    																																					},
    																																					{
    																																						typ: 1,
    																																						val: "rem"
    																																					},
    																																					{
    																																						typ: 20
    																																					}
    																																				],
    																																				r: [
    																																					{
    																																						typ: 27,
    																																						l: [
    																																							{
    																																								typ: 20
    																																							},
    																																							{
    																																								typ: 1,
    																																								val: "vb"
    																																							},
    																																							{
    																																								typ: 20
    																																							}
    																																						],
    																																						r: [
    																																							{
    																																								typ: 27,
    																																								l: [
    																																									{
    																																										typ: 20
    																																									},
    																																									{
    																																										typ: 1,
    																																										val: "vi"
    																																									},
    																																									{
    																																										typ: 20
    																																									}
    																																								],
    																																								r: [
    																																									{
    																																										typ: 27,
    																																										l: [
    																																											{
    																																												typ: 20
    																																											},
    																																											{
    																																												typ: 1,
    																																												val: "vw"
    																																											},
    																																											{
    																																												typ: 20
    																																											}
    																																										],
    																																										r: [
    																																											{
    																																												typ: 27,
    																																												l: [
    																																													{
    																																														typ: 20
    																																													},
    																																													{
    																																														typ: 1,
    																																														val: "vh"
    																																													},
    																																													{
    																																														typ: 20
    																																													}
    																																												],
    																																												r: [
    																																													{
    																																														typ: 27,
    																																														l: [
    																																															{
    																																																typ: 20
    																																															},
    																																															{
    																																																typ: 1,
    																																																val: "vmin"
    																																															},
    																																															{
    																																																typ: 20
    																																															}
    																																														],
    																																														r: [
    																																															{
    																																																typ: 27,
    																																																l: [
    																																																	{
    																																																		typ: 20
    																																																	},
    																																																	{
    																																																		typ: 1,
    																																																		val: "vmax"
    																																																	},
    																																																	{
    																																																		typ: 20
    																																																	}
    																																																],
    																																																r: [
    																																																	{
    																																																		typ: 27,
    																																																		l: [
    																																																			{
    																																																				typ: 20
    																																																			},
    																																																			{
    																																																				typ: 1,
    																																																				val: "mm"
    																																																			},
    																																																			{
    																																																				typ: 20
    																																																			}
    																																																		],
    																																																		r: [
    																																																			{
    																																																				typ: 27,
    																																																				l: [
    																																																					{
    																																																						typ: 20
    																																																					},
    																																																					{
    																																																						typ: 1,
    																																																						val: "Q"
    																																																					},
    																																																					{
    																																																						typ: 20
    																																																					}
    																																																				],
    																																																				r: [
    																																																					{
    																																																						typ: 27,
    																																																						l: [
    																																																							{
    																																																								typ: 20
    																																																							},
    																																																							{
    																																																								typ: 1,
    																																																								val: "cm"
    																																																							},
    																																																							{
    																																																								typ: 20
    																																																							}
    																																																						],
    																																																						r: [
    																																																							{
    																																																								typ: 27,
    																																																								l: [
    																																																									{
    																																																										typ: 20
    																																																									},
    																																																									{
    																																																										typ: 1,
    																																																										val: "in"
    																																																									},
    																																																									{
    																																																										typ: 20
    																																																									}
    																																																								],
    																																																								r: [
    																																																									{
    																																																										typ: 27,
    																																																										l: [
    																																																											{
    																																																												typ: 20
    																																																											},
    																																																											{
    																																																												typ: 1,
    																																																												val: "pt"
    																																																											},
    																																																											{
    																																																												typ: 20
    																																																											}
    																																																										],
    																																																										r: [
    																																																											{
    																																																												typ: 27,
    																																																												l: [
    																																																													{
    																																																														typ: 20
    																																																													},
    																																																													{
    																																																														typ: 1,
    																																																														val: "pc"
    																																																													},
    																																																													{
    																																																														typ: 20
    																																																													}
    																																																												],
    																																																												r: [
    																																																													{
    																																																														typ: 27,
    																																																														l: [
    																																																															{
    																																																																typ: 20
    																																																															},
    																																																															{
    																																																																typ: 1,
    																																																																val: "px"
    																																																															},
    																																																															{
    																																																																typ: 20
    																																																															}
    																																																														],
    																																																														r: [
    																																																															{
    																																																																typ: 27,
    																																																																l: [
    																																																																	{
    																																																																		typ: 20
    																																																																	},
    																																																																	{
    																																																																		typ: 1,
    																																																																		val: "deg"
    																																																																	},
    																																																																	{
    																																																																		typ: 20
    																																																																	}
    																																																																],
    																																																																r: [
    																																																																	{
    																																																																		typ: 27,
    																																																																		l: [
    																																																																			{
    																																																																				typ: 20
    																																																																			},
    																																																																			{
    																																																																				typ: 1,
    																																																																				val: "grad"
    																																																																			},
    																																																																			{
    																																																																				typ: 20
    																																																																			}
    																																																																		],
    																																																																		r: [
    																																																																			{
    																																																																				typ: 27,
    																																																																				l: [
    																																																																					{
    																																																																						typ: 20
    																																																																					},
    																																																																					{
    																																																																						typ: 1,
    																																																																						val: "rad"
    																																																																					},
    																																																																					{
    																																																																						typ: 20
    																																																																					}
    																																																																				],
    																																																																				r: [
    																																																																					{
    																																																																						typ: 27,
    																																																																						l: [
    																																																																							{
    																																																																								typ: 20
    																																																																							},
    																																																																							{
    																																																																								typ: 1,
    																																																																								val: "turn"
    																																																																							},
    																																																																							{
    																																																																								typ: 20
    																																																																							}
    																																																																						],
    																																																																						r: [
    																																																																							{
    																																																																								typ: 27,
    																																																																								l: [
    																																																																									{
    																																																																										typ: 20
    																																																																									},
    																																																																									{
    																																																																										typ: 1,
    																																																																										val: "ms"
    																																																																									},
    																																																																									{
    																																																																										typ: 20
    																																																																									}
    																																																																								],
    																																																																								r: [
    																																																																									{
    																																																																										typ: 27,
    																																																																										l: [
    																																																																											{
    																																																																												typ: 20
    																																																																											},
    																																																																											{
    																																																																												typ: 1,
    																																																																												val: "s"
    																																																																											},
    																																																																											{
    																																																																												typ: 20
    																																																																											}
    																																																																										],
    																																																																										r: [
    																																																																											{
    																																																																												typ: 27,
    																																																																												l: [
    																																																																													{
    																																																																														typ: 20
    																																																																													},
    																																																																													{
    																																																																														typ: 1,
    																																																																														val: "Hz"
    																																																																													},
    																																																																													{
    																																																																														typ: 20
    																																																																													}
    																																																																												],
    																																																																												r: [
    																																																																													{
    																																																																														typ: 27,
    																																																																														l: [
    																																																																															{
    																																																																																typ: 20
    																																																																															},
    																																																																															{
    																																																																																typ: 1,
    																																																																																val: "kHz"
    																																																																															},
    																																																																															{
    																																																																																typ: 20
    																																																																															}
    																																																																														],
    																																																																														r: [
    																																																																															{
    																																																																																typ: 20
    																																																																															},
    																																																																															{
    																																																																																typ: 1,
    																																																																																val: "%"
    																																																																															}
    																																																																														]
    																																																																													}
    																																																																												]
    																																																																											}
    																																																																										]
    																																																																									}
    																																																																								]
    																																																																							}
    																																																																						]
    																																																																					}
    																																																																				]
    																																																																			}
    																																																																		]
    																																																																	}
    																																																																]
    																																																															}
    																																																														]
    																																																													}
    																																																												]
    																																																											}
    																																																										]
    																																																									}
    																																																								]
    																																																							}
    																																																						]
    																																																					}
    																																																				]
    																																																			}
    																																																		]
    																																																	}
    																																																]
    																																															}
    																																														]
    																																													}
    																																												]
    																																											}
    																																										]
    																																									}
    																																								]
    																																							}
    																																						]
    																																					}
    																																				]
    																																			}
    																																		]
    																																	}
    																																]
    																															}
    																														]
    																													}
    																												]
    																											}
    																										]
    																									}
    																								]
    																							}
    																						]
    																					}
    																				]
    																			}
    																		]
    																	}
    																]
    															}
    														]
    													}
    												]
    											}
    										]
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"type-selector": {
    		syntax: "<wq-name> | <ns-prefix>? '*'",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 2,
    						val: "wq-name"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "ns-prefix",
    						isOptional: true
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 33,
    						val: "'*'"
    					}
    				]
    			}
    		]
    	},
    	"var()": {
    		syntax: "var( <custom-property-name> , <declaration-value>? )",
    		ast: [
    			{
    				typ: 18,
    				val: "var",
    				chi: [
    					{
    						typ: 2,
    						val: "custom-property-name"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 10
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "declaration-value",
    								isOptional: true
    							}
    						],
    						pos: {
    							ind: 28,
    							lin: 1,
    							col: 29
    						}
    					}
    				]
    			}
    		]
    	},
    	"view()": {
    		syntax: "view([<axis> || <'view-timeline-inset'>]?)",
    		ast: [
    			{
    				typ: 18,
    				val: "view",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 28,
    								l: [
    									{
    										typ: 2,
    										val: "axis"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 3,
    										val: "view-timeline-inset"
    									}
    								]
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	"viewport-length": {
    		syntax: "auto | <length-percentage>",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "auto"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 2,
    						val: "length-percentage"
    					}
    				]
    			}
    		]
    	},
    	"visual-box": {
    		syntax: "content-box | padding-box | border-box",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 1,
    						val: "content-box"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 27,
    						l: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "padding-box"
    							},
    							{
    								typ: 20
    							}
    						],
    						r: [
    							{
    								typ: 20
    							},
    							{
    								typ: 1,
    								val: "border-box"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"wq-name": {
    		syntax: "<ns-prefix>? <ident-token>",
    		ast: [
    			{
    				typ: 2,
    				val: "ns-prefix",
    				isOptional: true
    			},
    			{
    				typ: 20
    			},
    			{
    				typ: 2,
    				val: "ident-token"
    			}
    		]
    	}
    };
    var selectors = {
    	":active": {
    		syntax: ":active",
    		ast: [
    			{
    				typ: 31,
    				val: ":active"
    			}
    		]
    	},
    	":any-link": {
    		syntax: ":any-link",
    		ast: [
    			{
    				typ: 31,
    				val: ":any-link"
    			}
    		]
    	},
    	":checked": {
    		syntax: ":checked",
    		ast: [
    			{
    				typ: 31,
    				val: ":checked"
    			}
    		]
    	},
    	":current": {
    		syntax: ":current",
    		ast: [
    			{
    				typ: 31,
    				val: ":current"
    			}
    		]
    	},
    	":blank": {
    		syntax: ":blank",
    		ast: [
    			{
    				typ: 31,
    				val: ":blank"
    			}
    		]
    	},
    	":default": {
    		syntax: ":default",
    		ast: [
    			{
    				typ: 31,
    				val: ":default"
    			}
    		]
    	},
    	":defined": {
    		syntax: ":defined",
    		ast: [
    			{
    				typ: 31,
    				val: ":defined"
    			}
    		]
    	},
    	":dir": {
    		syntax: ":dir( [ ltr | rtl ] )",
    		ast: [
    			{
    				typ: 32,
    				val: ":dir",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "ltr"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 1,
    										val: "rtl"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	":disabled": {
    		syntax: ":disabled",
    		ast: [
    			{
    				typ: 31,
    				val: ":disabled"
    			}
    		]
    	},
    	":empty": {
    		syntax: ":empty",
    		ast: [
    			{
    				typ: 31,
    				val: ":empty"
    			}
    		]
    	},
    	":enabled": {
    		syntax: ":enabled",
    		ast: [
    			{
    				typ: 31,
    				val: ":enabled"
    			}
    		]
    	},
    	":first": {
    		syntax: ":first",
    		ast: [
    			{
    				typ: 31,
    				val: ":first"
    			}
    		]
    	},
    	":first-child": {
    		syntax: ":first-child",
    		ast: [
    			{
    				typ: 31,
    				val: ":first-child"
    			}
    		]
    	},
    	":first-of-type": {
    		syntax: ":first-of-type",
    		ast: [
    			{
    				typ: 31,
    				val: ":first-of-type"
    			}
    		]
    	},
    	":fullscreen": {
    		syntax: ":fullscreen",
    		ast: [
    			{
    				typ: 31,
    				val: ":fullscreen"
    			}
    		]
    	},
    	":future": {
    		syntax: ":future",
    		ast: [
    			{
    				typ: 31,
    				val: ":future"
    			}
    		]
    	},
    	":focus": {
    		syntax: ":focus",
    		ast: [
    			{
    				typ: 31,
    				val: ":focus"
    			}
    		]
    	},
    	":focus-visible": {
    		syntax: ":focus-visible",
    		ast: [
    			{
    				typ: 31,
    				val: ":focus-visible"
    			}
    		]
    	},
    	":focus-within": {
    		syntax: ":focus-within",
    		ast: [
    			{
    				typ: 31,
    				val: ":focus-within"
    			}
    		]
    	},
    	":has": {
    		syntax: ":has( <forgiving-relative-selector-list> )",
    		ast: [
    			{
    				typ: 32,
    				val: ":has",
    				chi: [
    					{
    						typ: 2,
    						val: "forgiving-relative-selector-list"
    					}
    				]
    			}
    		]
    	},
    	":host()": {
    		syntax: ":host( <compound-selector> )",
    		ast: [
    			{
    				typ: 32,
    				val: ":host",
    				chi: [
    					{
    						typ: 2,
    						val: "compound-selector"
    					}
    				]
    			}
    		]
    	},
    	":host-context()": {
    		syntax: ":host-context( <compound-selector> )",
    		ast: [
    			{
    				typ: 32,
    				val: ":host-context",
    				chi: [
    					{
    						typ: 2,
    						val: "compound-selector"
    					}
    				]
    			}
    		]
    	},
    	":hover": {
    		syntax: ":hover",
    		ast: [
    			{
    				typ: 31,
    				val: ":hover"
    			}
    		]
    	},
    	":indeterminate": {
    		syntax: ":indeterminate",
    		ast: [
    			{
    				typ: 31,
    				val: ":indeterminate"
    			}
    		]
    	},
    	":in-range": {
    		syntax: ":in-range",
    		ast: [
    			{
    				typ: 31,
    				val: ":in-range"
    			}
    		]
    	},
    	":invalid": {
    		syntax: ":invalid",
    		ast: [
    			{
    				typ: 31,
    				val: ":invalid"
    			}
    		]
    	},
    	":is": {
    		syntax: ":is( <forgiving-selector-list> )",
    		ast: [
    			{
    				typ: 32,
    				val: ":is",
    				chi: [
    					{
    						typ: 2,
    						val: "forgiving-selector-list"
    					}
    				]
    			}
    		]
    	},
    	":lang": {
    		syntax: ":lang( <language-code> )",
    		ast: [
    			{
    				typ: 32,
    				val: ":lang",
    				chi: [
    					{
    						typ: 2,
    						val: "language-code"
    					}
    				]
    			}
    		]
    	},
    	":last-child": {
    		syntax: ":last-child",
    		ast: [
    			{
    				typ: 31,
    				val: ":last-child"
    			}
    		]
    	},
    	":last-of-type": {
    		syntax: ":last-of-type",
    		ast: [
    			{
    				typ: 31,
    				val: ":last-of-type"
    			}
    		]
    	},
    	":left": {
    		syntax: ":left",
    		ast: [
    			{
    				typ: 31,
    				val: ":left"
    			}
    		]
    	},
    	":link": {
    		syntax: ":link",
    		ast: [
    			{
    				typ: 31,
    				val: ":link"
    			}
    		]
    	},
    	":local-link": {
    		syntax: ":local-link",
    		ast: [
    			{
    				typ: 31,
    				val: ":local-link"
    			}
    		]
    	},
    	":not": {
    		syntax: ":not( <complex-selector-list> )",
    		ast: [
    			{
    				typ: 32,
    				val: ":not",
    				chi: [
    					{
    						typ: 2,
    						val: "complex-selector-list"
    					}
    				]
    			}
    		]
    	},
    	":nth-child": {
    		syntax: ":nth-child( <nth> [ of <complex-selector-list> ]? )",
    		ast: [
    			{
    				typ: 32,
    				val: ":nth-child",
    				chi: [
    					{
    						typ: 2,
    						val: "nth"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "of"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "complex-selector-list"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	":nth-last-child": {
    		syntax: ":nth-last-child( <nth> [ of <complex-selector-list> ]? )",
    		ast: [
    			{
    				typ: 32,
    				val: ":nth-last-child",
    				chi: [
    					{
    						typ: 2,
    						val: "nth"
    					},
    					{
    						typ: 20
    					},
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 1,
    								val: "of"
    							},
    							{
    								typ: 20
    							},
    							{
    								typ: 2,
    								val: "complex-selector-list"
    							}
    						],
    						isOptional: true
    					}
    				]
    			}
    		]
    	},
    	":nth-last-of-type": {
    		syntax: ":nth-last-of-type( <nth> )",
    		ast: [
    			{
    				typ: 32,
    				val: ":nth-last-of-type",
    				chi: [
    					{
    						typ: 2,
    						val: "nth"
    					}
    				]
    			}
    		]
    	},
    	":nth-of-type": {
    		syntax: ":nth-of-type( <nth> )",
    		ast: [
    			{
    				typ: 32,
    				val: ":nth-of-type",
    				chi: [
    					{
    						typ: 2,
    						val: "nth"
    					}
    				]
    			}
    		]
    	},
    	":only-child": {
    		syntax: ":only-child",
    		ast: [
    			{
    				typ: 31,
    				val: ":only-child"
    			}
    		]
    	},
    	":only-of-type": {
    		syntax: ":only-of-type",
    		ast: [
    			{
    				typ: 31,
    				val: ":only-of-type"
    			}
    		]
    	},
    	":optional": {
    		syntax: ":optional",
    		ast: [
    			{
    				typ: 31,
    				val: ":optional"
    			}
    		]
    	},
    	":out-of-range": {
    		syntax: ":out-of-range",
    		ast: [
    			{
    				typ: 31,
    				val: ":out-of-range"
    			}
    		]
    	},
    	":past": {
    		syntax: ":past",
    		ast: [
    			{
    				typ: 31,
    				val: ":past"
    			}
    		]
    	},
    	":paused": {
    		syntax: ":paused",
    		ast: [
    			{
    				typ: 31,
    				val: ":paused"
    			}
    		]
    	},
    	":placeholder-shown": {
    		syntax: ":placeholder-shown",
    		ast: [
    			{
    				typ: 31,
    				val: ":placeholder-shown"
    			}
    		]
    	},
    	":playing": {
    		syntax: ":playing",
    		ast: [
    			{
    				typ: 31,
    				val: ":playing"
    			}
    		]
    	},
    	":read-only": {
    		syntax: ":read-only",
    		ast: [
    			{
    				typ: 31,
    				val: ":read-only"
    			}
    		]
    	},
    	":read-write": {
    		syntax: ":read-write",
    		ast: [
    			{
    				typ: 31,
    				val: ":read-write"
    			}
    		]
    	},
    	":required": {
    		syntax: ":required",
    		ast: [
    			{
    				typ: 31,
    				val: ":required"
    			}
    		]
    	},
    	":right": {
    		syntax: ":right",
    		ast: [
    			{
    				typ: 31,
    				val: ":right"
    			}
    		]
    	},
    	":root": {
    		syntax: ":root",
    		ast: [
    			{
    				typ: 31,
    				val: ":root"
    			}
    		]
    	},
    	":scope": {
    		syntax: ":scope",
    		ast: [
    			{
    				typ: 31,
    				val: ":scope"
    			}
    		]
    	},
    	":target": {
    		syntax: ":target",
    		ast: [
    			{
    				typ: 31,
    				val: ":target"
    			}
    		]
    	},
    	"::target-text": {
    		syntax: "::target-text",
    		ast: [
    			{
    				typ: 31,
    				val: "::target-text"
    			}
    		]
    	},
    	":target-within": {
    		syntax: ":target-within",
    		ast: [
    			{
    				typ: 31,
    				val: ":target-within"
    			}
    		]
    	},
    	":user-invalid": {
    		syntax: ":user-invalid",
    		ast: [
    			{
    				typ: 31,
    				val: ":user-invalid"
    			}
    		]
    	},
    	":user-valid": {
    		syntax: ":user-valid",
    		ast: [
    			{
    				typ: 31,
    				val: ":user-valid"
    			}
    		]
    	},
    	":valid": {
    		syntax: ":valid",
    		ast: [
    			{
    				typ: 31,
    				val: ":valid"
    			}
    		]
    	},
    	":visited": {
    		syntax: ":visited",
    		ast: [
    			{
    				typ: 31,
    				val: ":visited"
    			}
    		]
    	},
    	":where": {
    		syntax: ":where( <complex-selector-list> )",
    		ast: [
    			{
    				typ: 32,
    				val: ":where",
    				chi: [
    					{
    						typ: 2,
    						val: "complex-selector-list"
    					}
    				]
    			}
    		]
    	},
    	"::-moz-progress-bar": {
    		syntax: "::-moz-progress-bar",
    		ast: [
    			{
    				typ: 31,
    				val: "::-moz-progress-bar"
    			}
    		]
    	},
    	"::-moz-range-progress": {
    		syntax: "::-moz-range-progress",
    		ast: [
    			{
    				typ: 31,
    				val: "::-moz-range-progress"
    			}
    		]
    	},
    	"::-moz-range-thumb": {
    		syntax: "::-moz-range-thumb",
    		ast: [
    			{
    				typ: 31,
    				val: "::-moz-range-thumb"
    			}
    		]
    	},
    	"::-moz-range-track": {
    		syntax: "::-moz-range-track",
    		ast: [
    			{
    				typ: 31,
    				val: "::-moz-range-track"
    			}
    		]
    	},
    	"::-ms-browse": {
    		syntax: "::-ms-browse",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-browse"
    			}
    		]
    	},
    	"::-ms-check": {
    		syntax: "::-ms-check",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-check"
    			}
    		]
    	},
    	"::-ms-clear": {
    		syntax: "::-ms-clear",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-clear"
    			}
    		]
    	},
    	"::-ms-expand": {
    		syntax: "::-ms-expand",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-expand"
    			}
    		]
    	},
    	"::-ms-fill": {
    		syntax: "::-ms-fill",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-fill"
    			}
    		]
    	},
    	"::-ms-fill-lower": {
    		syntax: "::-ms-fill-lower",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-fill-lower"
    			}
    		]
    	},
    	"::-ms-fill-upper": {
    		syntax: "::-ms-fill-upper",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-fill-upper"
    			}
    		]
    	},
    	"::-ms-reveal": {
    		syntax: "::-ms-reveal",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-reveal"
    			}
    		]
    	},
    	"::-ms-thumb": {
    		syntax: "::-ms-thumb",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-thumb"
    			}
    		]
    	},
    	"::-ms-ticks-after": {
    		syntax: "::-ms-ticks-after",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-ticks-after"
    			}
    		]
    	},
    	"::-ms-ticks-before": {
    		syntax: "::-ms-ticks-before",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-ticks-before"
    			}
    		]
    	},
    	"::-ms-tooltip": {
    		syntax: "::-ms-tooltip",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-tooltip"
    			}
    		]
    	},
    	"::-ms-track": {
    		syntax: "::-ms-track",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-track"
    			}
    		]
    	},
    	"::-ms-value": {
    		syntax: "::-ms-value",
    		ast: [
    			{
    				typ: 31,
    				val: "::-ms-value"
    			}
    		]
    	},
    	"::-webkit-progress-bar": {
    		syntax: "::-webkit-progress-bar",
    		ast: [
    			{
    				typ: 31,
    				val: "::-webkit-progress-bar"
    			}
    		]
    	},
    	"::-webkit-progress-inner-value": {
    		syntax: "::-webkit-progress-inner-value",
    		ast: [
    			{
    				typ: 31,
    				val: "::-webkit-progress-inner-value"
    			}
    		]
    	},
    	"::-webkit-progress-value": {
    		syntax: "::-webkit-progress-value",
    		ast: [
    			{
    				typ: 31,
    				val: "::-webkit-progress-value"
    			}
    		]
    	},
    	"::-webkit-slider-runnable-track": {
    		syntax: "::-webkit-slider-runnable-track",
    		ast: [
    			{
    				typ: 31,
    				val: "::-webkit-slider-runnable-track"
    			}
    		]
    	},
    	"::-webkit-slider-thumb": {
    		syntax: "::-webkit-slider-thumb",
    		ast: [
    			{
    				typ: 31,
    				val: "::-webkit-slider-thumb"
    			}
    		]
    	},
    	"::after": {
    		syntax: "::after",
    		ast: [
    			{
    				typ: 31,
    				val: "::after"
    			}
    		]
    	},
    	"::backdrop": {
    		syntax: "::backdrop",
    		ast: [
    			{
    				typ: 31,
    				val: "::backdrop"
    			}
    		]
    	},
    	"::before": {
    		syntax: "::before",
    		ast: [
    			{
    				typ: 31,
    				val: "::before"
    			}
    		]
    	},
    	"::cue": {
    		syntax: "::cue | ::cue( <selector> )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 31,
    						val: "::cue"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 32,
    						val: "::cue",
    						chi: [
    							{
    								typ: 2,
    								val: "selector"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"::cue-region": {
    		syntax: "::cue-region | ::cue-region( <selector> )",
    		ast: [
    			{
    				typ: 27,
    				l: [
    					{
    						typ: 31,
    						val: "::cue-region"
    					},
    					{
    						typ: 20
    					}
    				],
    				r: [
    					{
    						typ: 20
    					},
    					{
    						typ: 32,
    						val: "::cue-region",
    						chi: [
    							{
    								typ: 2,
    								val: "selector"
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"::first-letter": {
    		syntax: "::first-letter",
    		ast: [
    			{
    				typ: 31,
    				val: "::first-letter"
    			}
    		]
    	},
    	"::first-line": {
    		syntax: "::first-line",
    		ast: [
    			{
    				typ: 31,
    				val: "::first-line"
    			}
    		]
    	},
    	"::grammar-error": {
    		syntax: "::grammar-error",
    		ast: [
    			{
    				typ: 31,
    				val: "::grammar-error"
    			}
    		]
    	},
    	"::marker": {
    		syntax: "::marker",
    		ast: [
    			{
    				typ: 31,
    				val: "::marker"
    			}
    		]
    	},
    	"::part": {
    		syntax: "::part( <ident>+ )",
    		ast: [
    			{
    				typ: 32,
    				val: "::part",
    				chi: [
    					{
    						typ: 2,
    						val: "ident",
    						atLeastOnce: true
    					}
    				]
    			}
    		]
    	},
    	":picture-in-picture": {
    		syntax: ":picture-in-picture",
    		ast: [
    			{
    				typ: 31,
    				val: ":picture-in-picture"
    			}
    		]
    	},
    	"::placeholder": {
    		syntax: "::placeholder",
    		ast: [
    			{
    				typ: 31,
    				val: "::placeholder"
    			}
    		]
    	},
    	"::selection": {
    		syntax: "::selection",
    		ast: [
    			{
    				typ: 31,
    				val: "::selection"
    			}
    		]
    	},
    	"::slotted": {
    		syntax: "::slotted( <compound-selector> )",
    		ast: [
    			{
    				typ: 32,
    				val: "::slotted",
    				chi: [
    					{
    						typ: 2,
    						val: "compound-selector"
    					}
    				]
    			}
    		]
    	},
    	"::spelling-error": {
    		syntax: "::spelling-error",
    		ast: [
    			{
    				typ: 31,
    				val: "::spelling-error"
    			}
    		]
    	},
    	"::view-transition": {
    		syntax: "::view-transition",
    		ast: [
    			{
    				typ: 31,
    				val: "::view-transition"
    			}
    		]
    	},
    	"::view-transition-group": {
    		syntax: "::view-transition-group([ '*' | <custom-ident> ])",
    		ast: [
    			{
    				typ: 32,
    				val: "::view-transition-group",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'*'"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "custom-ident"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"::view-transition-image-pair": {
    		syntax: "::view-transition-image-pair([ '*' | <custom-ident> ])",
    		ast: [
    			{
    				typ: 32,
    				val: "::view-transition-image-pair",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'*'"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "custom-ident"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"::view-transition-new": {
    		syntax: "::view-transition-new([ '*' | <custom-ident> ])",
    		ast: [
    			{
    				typ: 32,
    				val: "::view-transition-new",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'*'"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "custom-ident"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	"::view-transition-old": {
    		syntax: "::view-transition-old([ '*' | <custom-ident> ])",
    		ast: [
    			{
    				typ: 32,
    				val: "::view-transition-old",
    				chi: [
    					{
    						typ: 22,
    						chi: [
    							{
    								typ: 27,
    								l: [
    									{
    										typ: 20
    									},
    									{
    										typ: 33,
    										val: "'*'"
    									},
    									{
    										typ: 20
    									}
    								],
    								r: [
    									{
    										typ: 20
    									},
    									{
    										typ: 2,
    										val: "custom-ident"
    									},
    									{
    										typ: 20
    									}
    								]
    							}
    						]
    					}
    				]
    			}
    		]
    	},
    	":host": {
    		syntax: ":host",
    		ast: [
    			{
    				typ: 31,
    				val: ":host"
    			}
    		]
    	},
    	":autofill": {
    		syntax: ":autofill",
    		ast: [
    			{
    				typ: 31,
    				val: ":autofill"
    			}
    		]
    	}
    };
    var config$2 = {
    	declarations: declarations,
    	functions: functions,
    	syntaxes: syntaxes,
    	selectors: selectors
    };

    Object.freeze(config$2);
    function getConfig() {
        // @ts-ignore
        return config$2;
    }

    const expressions = [
        exports.EnumToken.DelimTokenType, exports.EnumToken.IncludeMatchTokenType, exports.EnumToken.DashMatchTokenType,
        exports.EnumToken.StartMatchTokenType, exports.EnumToken.EndMatchTokenType, exports.EnumToken.ContainMatchTokenType
    ];
    const selectorTokens = [
        exports.EnumToken.IdenTokenType, exports.EnumToken.ClassSelectorTokenType, exports.EnumToken.AttrTokenType,
        exports.EnumToken.PseudoClassTokenType, exports.EnumToken.PseudoClassFuncTokenType, exports.EnumToken.HashTokenType,
        exports.EnumToken.UniversalSelectorTokenType
    ];
    const combinatorTokens = [
        exports.EnumToken.ChildCombinatorTokenType, exports.EnumToken.NextSiblingCombinatorTokenType,
        exports.EnumToken.SubsequentSiblingCombinatorTokenType
    ];
    function validateSelector(selector, options, root) {
        if (selector.length == 0) {
            return {
                valid: ValidationLevel.Drop,
                node: null,
                error: 'The selector is empty.'
            };
        }
        return doValidateSelector(selector, options, root);
    }
    function doValidateSelector(selector, options, root) {
        let result;
        if (combinatorTokens.includes(selector[0].typ)) {
            if (root == null || root.typ == exports.EnumToken.StyleSheetNodeType) {
                return {
                    valid: ValidationLevel.Drop,
                    node: null,
                    error: 'The selector cannot start with a combinator.'
                };
            }
            selector = selector.slice(1);
        }
        while ((selector?.length ?? 0) > 0) {
            result = validateSimpleSelector(selector, options, root);
            if (result.valid == ValidationLevel.Drop) {
                return {
                    valid: ValidationLevel.Drop,
                    node: result.nodes[0] ?? null,
                    error: result.error
                };
            }
            if (result.nodes.length == 0) {
                return {
                    valid: result.valid,
                    node: result.nodes[0] ?? null,
                    error: result.error
                };
            }
            selector = result.nodes;
            result = validateCombinator(selector);
            if (result.valid == ValidationLevel.Drop) {
                while (result.valid == ValidationLevel.Drop && selector.length > 0) {
                    if (selector[0].typ == exports.EnumToken.CommaTokenType) {
                        selector = consumeWhitespace(selector.slice(1));
                        if (selector.length == 0) {
                            return {
                                valid: ValidationLevel.Drop,
                                node: selector[0],
                                error: 'unexpected token'
                            };
                        }
                        if (selector.length > 0 && combinatorTokens.includes(selector[0].typ)) {
                            if (root == null || root.typ == exports.EnumToken.StyleSheetNodeType) {
                                return {
                                    valid: ValidationLevel.Drop,
                                    node: selector[0],
                                    error: 'Unexpected token'
                                };
                            }
                            selector = selector.slice(1);
                        }
                        result = validateSimpleSelector(selector, options, root);
                        if (result.valid == ValidationLevel.Drop) {
                            return {
                                valid: ValidationLevel.Drop,
                                node: null,
                                error: 'Invalid selector'
                            };
                        }
                        if (result.nodes.length == 0) {
                            return {
                                valid: result.valid,
                                node: null,
                                error: result.error
                            };
                        }
                        selector = result.nodes;
                        result = validateCombinator(selector);
                        if (result.nodes.length == 0) {
                            return {
                                valid: result.valid,
                                node: null,
                                error: result.error
                            };
                        }
                        selector = result.nodes;
                    }
                    else {
                        break;
                    }
                }
            }
            else {
                selector = result.nodes;
            }
        }
        return {
            valid: ValidationLevel.Valid,
            node: null,
            error: ''
        };
    }
    function consumeWhitespace(selector) {
        let i = 0;
        while (i < selector.length &&
            (selector[i].typ == exports.EnumToken.WhitespaceTokenType ||
                selector[i].typ == exports.EnumToken.CommentTokenType)) {
            i++;
        }
        return selector.slice(i);
    }
    function validateSimpleSelector(selector, options, root) {
        let i = 0;
        if (i >= selector.length) {
            return {
                valid: ValidationLevel.Valid,
                nodes: selector.slice(i),
                error: 'empty selector'
            };
        }
        if (root?.typ == exports.EnumToken.AtRuleNodeType && null != root.nam.match(/(-[a-zA-Z]+-)?keyframes/)) {
            while (i < selector.length) {
                if ([exports.EnumToken.PercentageTokenType, exports.EnumToken.CommentTokenType].includes(selector[i].typ)) {
                    i++;
                    continue;
                }
                if ((selector[i].typ == exports.EnumToken.IdenTokenType && ['from', 'to'].includes(selector[i].val))) {
                    i++;
                    continue;
                }
                if (selector[i].typ == exports.EnumToken.CommaTokenType) {
                    break;
                }
                return {
                    valid: ValidationLevel.Drop,
                    nodes: selector.slice(i),
                    error: 'invalid selector'
                };
            }
            return {
                valid: ValidationLevel.Valid,
                nodes: selector.slice(i),
                error: 'empty selector'
            };
        }
        while (i < selector.length && [exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(selector[i].typ)) {
            i++;
        }
        if (i >= selector.length) {
            return {
                valid: ValidationLevel.Valid,
                nodes: selector.slice(i),
                error: 'empty selector'
            };
        }
        if (selectorTokens.includes(selector[i].typ)) {
            let result;
            if (selector[i].typ == exports.EnumToken.PseudoClassTokenType) {
                result = validatePseudoClass(selector[i], options);
                if (result.valid != ValidationLevel.Valid) {
                    return result;
                }
            }
            if (selector[i].typ == exports.EnumToken.PseudoClassFuncTokenType) {
                result = validatePseudoClassFunction(selector[i], options);
                if (result.valid != ValidationLevel.Valid) {
                    return result;
                }
            }
            if (selector[i].typ == exports.EnumToken.AttrTokenType) {
                result = validateAttributeSelector(selector[i], options);
                if (result.valid != ValidationLevel.Valid) {
                    return result;
                }
            }
            return {
                valid: ValidationLevel.Valid,
                nodes: selector.slice(i + 1),
                error: ''
            };
        }
        if (selector[i].typ == exports.EnumToken.LiteralTokenType && selector[i].val.startsWith('\\')) {
            return {
                valid: ValidationLevel.Valid,
                nodes: selector.slice(i + 1),
                error: ''
            };
        }
        if (selector[i].typ == exports.EnumToken.NestingSelectorTokenType && root != null && root.typ != exports.EnumToken.StyleSheetNodeType) {
            return {
                valid: ValidationLevel.Valid,
                nodes: selector.slice(i + 1),
                error: 'Compound selector not allowed here'
            };
        }
        return {
            valid: ValidationLevel.Drop,
            nodes: selector.slice(i + 1, 1),
            error: 'unexpected token'
        };
    }
    function validatePseudoClass(selector, options) {
        const name = selector.val.slice(selector.val[1] == ':' ? 2 : 1);
        if (name.match(/^-[a-zA-Z]+-/) || selector.val == ':before' || selector.val == ':after') {
            return {
                valid: ValidationLevel.Valid,
                nodes: [selector],
                error: ''
            };
        }
        const config = getConfig();
        const isValid = selector.val in config.selectors;
        return {
            valid: isValid || !options.validation ? ValidationLevel.Valid : ValidationLevel.Drop,
            nodes: [selector],
            error: isValid ? '' : 'invalid selector'
        };
    }
    function validatePseudoClassFunction(selector, options) {
        const name = selector.val.slice(1);
        if (name.match(/^-[a-zA-Z]+-/)) {
            const isValid = name == '-webkit-any' || name == '-moz-any';
            return {
                valid: isValid ? ValidationLevel.Valid : ValidationLevel.Drop,
                nodes: [selector],
                error: isValid ? '' : 'invalid pseudo class'
            };
        }
        const config = getConfig();
        if (selector.val in config.selectors) {
            if (!('chi' in config.selectors[selector.val].ast[0])) {
                return {
                    valid: !options.validation ? ValidationLevel.Valid : ValidationLevel.Drop,
                    nodes: [selector],
                    error: ''
                };
            }
        }
        else if (!(selector.val + '()' in config.selectors)) {
            return {
                valid: !options.validation ? ValidationLevel.Valid : ValidationLevel.Drop,
                nodes: [selector],
                error: ''
            };
        }
        // TODO: validate params
        return {
            valid: ValidationLevel.Valid,
            nodes: [selector],
            error: ''
        };
    }
    function validateAttributeSelector(selector, options) {
        let i = 0;
        let isMatchExpression = false;
        let expression;
        while (i < selector.chi.length) {
            if ([exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(selector.chi[i].typ)) {
                i++;
                continue;
            }
            if (exports.EnumToken.IdenTokenType == selector.chi[i].typ ||
                exports.EnumToken.MatchExpressionTokenType == selector.chi[i].typ ||
                exports.EnumToken.NameSpaceAttributeTokenType == selector.chi[i].typ) {
                isMatchExpression = exports.EnumToken.MatchExpressionTokenType == selector.chi[i].typ;
                if (isMatchExpression) {
                    expression = selector.chi[i];
                }
                if (exports.EnumToken.NameSpaceAttributeTokenType == selector.chi[i].typ) {
                    if (selector.chi[i].r.typ != exports.EnumToken.IdenTokenType) {
                        return {
                            valid: ValidationLevel.Drop,
                            nodes: [selector],
                            error: 'identifier expected'
                        };
                    }
                    if (selector.chi[i].l != null) {
                        // @ts-ignore
                        if (selector.chi[i].l.typ != exports.EnumToken.IdenTokenType &&
                            // @ts-ignore
                            selector.chi[i].l.typ != exports.EnumToken.LiteralTokenType) {
                            return {
                                valid: ValidationLevel.Drop,
                                nodes: [selector],
                                error: 'invalid namespace prefix'
                            };
                        }
                        if (
                        // @ts-ignore
                        selector.chi[i].l.typ == exports.EnumToken.LiteralTokenType &&
                            selector.chi[i].l.val != '*') {
                            return {
                                valid: ValidationLevel.Drop,
                                nodes: [selector],
                                error: 'exoected universal selector or namespace prefix'
                            };
                        }
                    }
                }
                i++;
                break;
            }
            return {
                valid: ValidationLevel.Drop,
                nodes: [selector],
                error: 'invalid selector'
            };
        }
        if (!isMatchExpression) {
            while (i < selector.chi.length) {
                if ([exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(selector.chi[i].typ)) {
                    i++;
                    continue;
                }
                break;
            }
            if (i < selector.chi.length) {
                if (!expressions.includes(selector.chi[i].typ)) {
                    return {
                        valid: ValidationLevel.Drop,
                        nodes: [selector],
                        error: 'invalid selector'
                    };
                }
                i++;
                while (i < selector.chi.length) {
                    if ([exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(selector.chi[i].typ)) {
                        i++;
                        continue;
                    }
                    break;
                }
                if (i >= selector.chi.length || ![exports.EnumToken.IdenTokenType, exports.EnumToken.StringTokenType].includes(selector.chi[i].typ)) {
                    return {
                        valid: ValidationLevel.Drop,
                        nodes: [selector],
                        error: 'expected identifier or string'
                    };
                }
                i++;
            }
        }
        else {
            if (expression.l.typ != exports.EnumToken.IdenTokenType ||
                ![exports.EnumToken.IdenTokenType, exports.EnumToken.StringTokenType].includes(expression.r.typ) ||
                !expressions.includes(expression.op)) {
                return {
                    valid: ValidationLevel.Drop,
                    nodes: [selector],
                    error: 'expected identifier or string'
                };
            }
        }
        if (i < selector.chi.length) {
            let hasWhitespace = false;
            while (i < selector.chi.length) {
                if ([exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(selector.chi[i].typ)) {
                    if (!hasWhitespace) {
                        hasWhitespace = selector.chi[i].typ == exports.EnumToken.WhitespaceTokenType;
                    }
                    i++;
                    continue;
                }
                break;
            }
            // @ts-ignore
            if (!hasWhitespace || i >= selector.chi.length || selector.chi[i].typ != exports.EnumToken.IdenTokenType || !['i', 's'].includes(selector.chi[i].val)) {
                const valid = !options.validation && selector.chi[i].typ == exports.EnumToken.IdenTokenType && selector.chi[i].val.match(/^[a-z]$/);
                return {
                    valid: valid ? ValidationLevel.Valid : ValidationLevel.Drop,
                    nodes: [selector],
                    error: valid ? '' : 'invalid attribute selector'
                };
            }
            i++;
            while (i < selector.chi.length) {
                if (![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(selector.chi[i].typ)) {
                    return {
                        valid: ValidationLevel.Drop,
                        nodes: [selector],
                        error: 'invalid attribute selector'
                    };
                }
                i++;
            }
        }
        return {
            valid: ValidationLevel.Valid,
            nodes: [selector],
            error: ''
        };
    }
    function validateCombinator(selector, options, root) {
        selector = consumeWhitespace(selector);
        if (selector.length == 0) {
            return {
                valid: ValidationLevel.Drop,
                nodes: selector,
                error: 'expecting combinator'
            };
        }
        const combinatorTypes = [
            exports.EnumToken.ChildCombinatorTokenType,
            exports.EnumToken.DescendantCombinatorTokenType,
            exports.EnumToken.NextSiblingCombinatorTokenType,
            exports.EnumToken.SubsequentSiblingCombinatorTokenType,
            exports.EnumToken.ColumnCombinatorTokenType
        ];
        if (!combinatorTypes.includes(selector[0].typ)) {
            return {
                valid: ValidationLevel.Drop,
                nodes: selector,
                error: 'Expecting combinator'
            };
        }
        selector = consumeWhitespace(selector.slice(1));
        if (selector.length == 0) {
            return {
                valid: ValidationLevel.Drop,
                nodes: selector,
                error: 'Unexpected combinator'
            };
        }
        if (combinatorTypes.includes(selector[0].typ)) {
            return {
                valid: ValidationLevel.Drop,
                nodes: selector,
                error: 'Unexpected combinator'
            };
        }
        return {
            valid: ValidationLevel.Valid,
            nodes: selector,
            error: ''
        };
    }

    const urlTokenMatcher = /^(["']?)[a-zA-Z0-9_/.-][a-zA-Z0-9_/:.#?-]+(\1)$/;
    const trimWhiteSpace = [exports.EnumToken.CommentTokenType, exports.EnumToken.GtTokenType, exports.EnumToken.GteTokenType, exports.EnumToken.LtTokenType, exports.EnumToken.LteTokenType, exports.EnumToken.ColumnCombinatorTokenType];
    const BadTokensTypes = [
        exports.EnumToken.BadCommentTokenType,
        exports.EnumToken.BadCdoTokenType,
        exports.EnumToken.BadUrlTokenType,
        exports.EnumToken.BadStringTokenType
    ];
    const enumTokenHints = new Set([
        exports.EnumToken.WhitespaceTokenType, exports.EnumToken.SemiColonTokenType, exports.EnumToken.ColonTokenType, exports.EnumToken.BlockStartTokenType,
        exports.EnumToken.BlockStartTokenType, exports.EnumToken.AttrStartTokenType, exports.EnumToken.AttrEndTokenType, exports.EnumToken.StartParensTokenType, exports.EnumToken.EndParensTokenType,
        exports.EnumToken.CommaTokenType, exports.EnumToken.GtTokenType, exports.EnumToken.LtTokenType, exports.EnumToken.GteTokenType, exports.EnumToken.LteTokenType, exports.EnumToken.CommaTokenType,
        exports.EnumToken.StartMatchTokenType, exports.EnumToken.EndMatchTokenType, exports.EnumToken.IncludeMatchTokenType, exports.EnumToken.DashMatchTokenType, exports.EnumToken.ContainMatchTokenType,
        exports.EnumToken.EOFTokenType
    ]);
    const webkitPseudoAliasMap = {
        '-webkit-autofill': 'autofill',
        '-webkit-any': 'is',
        '-moz-any': 'is',
        '-webkit-border-after': 'border-block-end',
        '-webkit-border-after-color': 'border-block-end-color',
        '-webkit-border-after-style': 'border-block-end-style',
        '-webkit-border-after-width': 'border-block-end-width',
        '-webkit-border-before': 'border-block-start',
        '-webkit-border-before-color': 'border-block-start-color',
        '-webkit-border-before-style': 'border-block-start-style',
        '-webkit-border-before-width': 'border-block-start-width',
        '-webkit-border-end': 'border-inline-end',
        '-webkit-border-end-color': 'border-inline-end-color',
        '-webkit-border-end-style': 'border-inline-end-style',
        '-webkit-border-end-width': 'border-inline-end-width',
        '-webkit-border-start': 'border-inline-start',
        '-webkit-border-start-color': 'border-inline-start-color',
        '-webkit-border-start-style': 'border-inline-start-style',
        '-webkit-border-start-width': 'border-inline-start-width',
        '-webkit-box-align': 'align-items',
        '-webkit-box-direction': 'flex-direction',
        '-webkit-box-flex': 'flex-grow',
        '-webkit-box-lines': 'flex-flow',
        '-webkit-box-ordinal-group': 'order',
        '-webkit-box-orient': 'flex-direction',
        '-webkit-box-pack': 'justify-content',
        '-webkit-column-break-after': 'break-after',
        '-webkit-column-break-before': 'break-before',
        '-webkit-column-break-inside': 'break-inside',
        '-webkit-font-feature-settings': 'font-feature-settings',
        '-webkit-hyphenate-character': 'hyphenate-character',
        '-webkit-initial-letter': 'initial-letter',
        '-webkit-margin-end': 'margin-block-end',
        '-webkit-margin-start': 'margin-block-start',
        '-webkit-padding-after': 'padding-block-end',
        '-webkit-padding-before': 'padding-block-start',
        '-webkit-padding-end': 'padding-inline-end',
        '-webkit-padding-start': 'padding-inline-start',
        '-webkit-min-device-pixel-ratio': 'min-resolution',
        '-webkit-max-device-pixel-ratio': 'max-resolution'
    };
    function reject(reason) {
        throw new Error(reason ?? 'Parsing aborted');
    }
    async function doParse(iterator, options = {}) {
        if (options.signal != null) {
            options.signal.addEventListener('abort', reject);
        }
        options = {
            src: '',
            sourcemap: false,
            minify: true,
            parseColor: true,
            nestingRules: false,
            resolveImport: false,
            resolveUrls: false,
            removeCharset: true,
            removeEmpty: true,
            removeDuplicateDeclarations: true,
            computeShorthand: true,
            computeCalcExpression: true,
            inlineCssVariables: false,
            setParent: true,
            removePrefix: false,
            validation: false,
            ...options
        };
        if (options.expandNestingRules) {
            options.nestingRules = false;
        }
        if (options.resolveImport) {
            options.resolveUrls = true;
        }
        const startTime = performance.now();
        const errors = [];
        const src = options.src;
        const stack = [];
        const stats = {
            bytesIn: 0,
            importedBytesIn: 0,
            parse: `0ms`,
            minify: `0ms`,
            total: `0ms`
        };
        let ast = {
            typ: exports.EnumToken.StyleSheetNodeType,
            chi: []
        };
        let tokens = [];
        let map = new Map;
        let context = ast;
        if (options.sourcemap) {
            ast.loc = {
                sta: {
                    ind: 0,
                    lin: 1,
                    col: 1
                },
                src: ''
            };
        }
        const iter = tokenize(iterator);
        let item;
        while (item = iter.next().value) {
            stats.bytesIn = item.bytesIn;
            //
            // doParse error
            if (item.hint != null && BadTokensTypes.includes(item.hint)) {
                // bad token
                continue;
            }
            if (item.hint != exports.EnumToken.EOFTokenType) {
                tokens.push(item);
            }
            if (item.token == ';' || item.token == '{') {
                let node = await parseNode(tokens, context, stats, options, errors, src, map);
                if (node != null) {
                    stack.push(node);
                    // @ts-ignore
                    context = node;
                }
                else if (item.token == '{') {
                    // node == null
                    // consume and throw away until the closing '}' or EOF
                    let inBlock = 1;
                    do {
                        item = iter.next().value;
                        if (item == null) {
                            break;
                        }
                        if (item.token == '{') {
                            inBlock++;
                        }
                        else if (item.token == '}') {
                            inBlock--;
                        }
                    } while (inBlock != 0);
                }
                tokens = [];
                map = new Map;
            }
            else if (item.token == '}') {
                await parseNode(tokens, context, stats, options, errors, src, map);
                const previousNode = stack.pop();
                // @ts-ignore
                context = stack[stack.length - 1] ?? ast;
                if (previousNode != null && previousNode.typ == exports.EnumToken.InvalidRuleTokenType) {
                    const index = context.chi.findIndex(node => node == previousNode);
                    if (index > -1) {
                        context.chi.splice(index, 1);
                    }
                }
                // @ts-ignore
                if (options.removeEmpty && previousNode != null && previousNode.chi.length == 0 && context.chi[context.chi.length - 1] == previousNode) {
                    context.chi.pop();
                }
                tokens = [];
                map = new Map;
            }
        }
        if (tokens.length > 0) {
            await parseNode(tokens, context, stats, options, errors, src, map);
            if (context != null && context.typ == exports.EnumToken.InvalidRuleTokenType) {
                const index = context.chi.findIndex(node => node == context);
                if (index > -1) {
                    context.chi.splice(index, 1);
                }
            }
        }
        while (stack.length > 0 && context != ast) {
            const previousNode = stack.pop();
            // @ts-ignore
            context = stack[stack.length - 1] ?? ast;
            // @ts-ignore
            if (options.removeEmpty && previousNode != null && previousNode.chi.length == 0 && context.chi[context.chi.length - 1] == previousNode) {
                context.chi.pop();
                continue;
            }
            break;
        }
        const endParseTime = performance.now();
        if (options.expandNestingRules) {
            ast = expand(ast);
        }
        if (options.visitor != null) {
            for (const result of walk(ast)) {
                if (result.node.typ == exports.EnumToken.DeclarationNodeType &&
                    // @ts-ignore
                    (typeof options.visitor.Declaration == 'function' || options.visitor.Declaration?.[result.node.nam] != null)) {
                    const callable = typeof options.visitor.Declaration == 'function' ? options.visitor.Declaration : options.visitor.Declaration[result.node.nam];
                    const results = await callable(result.node);
                    if (results == null || (Array.isArray(results) && results.length == 0)) {
                        continue;
                    }
                    // @ts-ignore
                    result.parent.chi.splice(result.parent.chi.indexOf(result.node), 1, ...(Array.isArray(results) ? results : [results]));
                }
                else if (options.visitor.Rule != null && result.node.typ == exports.EnumToken.RuleNodeType) {
                    const results = await options.visitor.Rule(result.node);
                    if (results == null || (Array.isArray(results) && results.length == 0)) {
                        continue;
                    }
                    // @ts-ignore
                    result.parent.chi.splice(result.parent.chi.indexOf(result.node), 1, ...(Array.isArray(results) ? results : [results]));
                }
                else if (options.visitor.AtRule != null &&
                    result.node.typ == exports.EnumToken.AtRuleNodeType &&
                    // @ts-ignore
                    (typeof options.visitor.AtRule == 'function' || options.visitor.AtRule?.[result.node.nam] != null)) {
                    const callable = typeof options.visitor.AtRule == 'function' ? options.visitor.AtRule : options.visitor.AtRule[result.node.nam];
                    const results = await callable(result.node);
                    if (results == null || (Array.isArray(results) && results.length == 0)) {
                        continue;
                    }
                    // @ts-ignore
                    result.parent.chi.splice(result.parent.chi.indexOf(result.node), 1, ...(Array.isArray(results) ? results : [results]));
                }
            }
        }
        if (options.minify) {
            if (ast.chi.length > 0) {
                minify(ast, options, true, errors, false);
            }
        }
        if (options.setParent) {
            const nodes = [ast];
            let node;
            while ((node = nodes.shift())) {
                // @ts-ignore
                if (node.chi.length > 0) {
                    // @ts-ignore
                    for (const child of node.chi) {
                        if (child.parent != node) {
                            Object.defineProperty(child, 'parent', { ...definedPropertySettings, value: node });
                        }
                        if ('chi' in child && child.chi.length > 0) {
                            // @ts-ignore
                            nodes.push(child);
                        }
                    }
                }
            }
        }
        const endTime = performance.now();
        if (options.signal != null) {
            options.signal.removeEventListener('abort', reject);
        }
        stats.bytesIn += stats.importedBytesIn;
        return {
            ast,
            errors,
            stats: {
                ...stats,
                parse: `${(endParseTime - startTime).toFixed(2)}ms`,
                minify: `${(endTime - endParseTime).toFixed(2)}ms`,
                total: `${(endTime - startTime).toFixed(2)}ms`
            }
        };
        // });
    }
    async function parseNode(results, context, stats, options, errors, src, map) {
        let tokens = [];
        for (const t of results) {
            const node = getTokenType(t.token, t.hint);
            map.set(node, t.position);
            tokens.push(node);
        }
        let i;
        let loc;
        for (i = 0; i < tokens.length; i++) {
            if (tokens[i].typ == exports.EnumToken.CommentTokenType || tokens[i].typ == exports.EnumToken.CDOCOMMTokenType) {
                const position = map.get(tokens[i]);
                if (tokens[i].typ == exports.EnumToken.CDOCOMMTokenType && context.typ != exports.EnumToken.StyleSheetNodeType) {
                    errors.push({
                        action: 'drop',
                        message: `CDOCOMM not allowed here ${JSON.stringify(tokens[i], null, 1)}`,
                        location: { src, ...position }
                    });
                    continue;
                }
                loc = {
                    sta: position,
                    src
                };
                // @ts-ignore
                context.chi.push(tokens[i]);
                if (options.sourcemap) {
                    tokens[i].loc = loc;
                }
            }
            else if (tokens[i].typ != exports.EnumToken.WhitespaceTokenType) {
                break;
            }
        }
        tokens = tokens.slice(i);
        if (tokens.length == 0) {
            return null;
        }
        let delim = tokens.at(-1);
        if (delim.typ == exports.EnumToken.SemiColonTokenType || delim.typ == exports.EnumToken.BlockStartTokenType || delim.typ == exports.EnumToken.BlockEndTokenType) {
            tokens.pop();
        }
        else {
            delim = { typ: exports.EnumToken.SemiColonTokenType };
        }
        // @ts-ignore
        while ([exports.EnumToken.WhitespaceTokenType, exports.EnumToken.BadStringTokenType, exports.EnumToken.BadCommentTokenType].includes(tokens.at(-1)?.typ)) {
            tokens.pop();
        }
        if (tokens.length == 0) {
            return null;
        }
        if (tokens[0]?.typ == exports.EnumToken.AtRuleTokenType) {
            const atRule = tokens.shift();
            const position = map.get(atRule);
            if (atRule.val == 'charset') {
                if (position.ind > 0) {
                    errors.push({
                        action: 'drop',
                        message: 'doParse: invalid @charset',
                        location: { src, ...position }
                    });
                    return null;
                }
                if (options.removeCharset) {
                    return null;
                }
            }
            // @ts-ignore
            while ([exports.EnumToken.WhitespaceTokenType].includes(tokens[0]?.typ)) {
                tokens.shift();
            }
            if (atRule.val == 'import') {
                // only @charset and @layer are accepted before @import
                if (context.chi.length > 0) {
                    let i = context.chi.length;
                    while (i--) {
                        const type = context.chi[i].typ;
                        if (type == exports.EnumToken.CommentNodeType) {
                            continue;
                        }
                        if (type != exports.EnumToken.AtRuleNodeType) {
                            errors.push({ action: 'drop', message: 'invalid @import', location: { src, ...position } });
                            return null;
                        }
                        const name = context.chi[i].nam;
                        if (name != 'charset' && name != 'import' && name != 'layer') {
                            errors.push({ action: 'drop', message: 'invalid @import', location: { src, ...position } });
                            return null;
                        }
                        break;
                    }
                }
                // @ts-ignore
                if (tokens[0]?.typ != exports.EnumToken.StringTokenType && tokens[0]?.typ != exports.EnumToken.UrlFunctionTokenType) {
                    errors.push({
                        action: 'drop',
                        message: 'doParse: invalid @import',
                        location: { src, ...position }
                    });
                    return null;
                }
                // @ts-ignore
                if (tokens[0].typ == exports.EnumToken.UrlFunctionTokenType && tokens[1]?.typ != exports.EnumToken.UrlTokenTokenType && tokens[1]?.typ != exports.EnumToken.StringTokenType) {
                    errors.push({
                        action: 'drop',
                        message: 'doParse: invalid @import',
                        location: { src, ...position }
                    });
                    return null;
                }
            }
            if (atRule.val == 'import') {
                // @ts-ignore
                if (tokens[0].typ == exports.EnumToken.UrlFunctionTokenType) {
                    if (tokens[1].typ == exports.EnumToken.UrlTokenTokenType || tokens[1].typ == exports.EnumToken.StringTokenType) {
                        tokens.shift();
                        if (tokens[1].typ == exports.EnumToken.UrlTokenTokenType) {
                            // @ts-ignore
                            tokens[0].typ = exports.EnumToken.StringTokenType;
                            // @ts-ignore
                            tokens[0].val = `"${tokens[0].val}"`;
                        }
                    }
                }
                // @ts-ignore
                if (tokens[0].typ == exports.EnumToken.StringTokenType) {
                    if (options.resolveImport) {
                        const url = tokens[0].val.slice(1, -1);
                        try {
                            // @ts-ignore
                            const root = await options.load(url, options.src).then((src) => {
                                return doParse(src, Object.assign({}, options, {
                                    minify: false,
                                    setParent: false,
                                    // @ts-ignore
                                    src: options.resolve(url, options.src).absolute
                                }));
                            });
                            stats.importedBytesIn += root.stats.bytesIn;
                            if (root.ast.chi.length > 0) {
                                // @todo - filter charset, layer and scope
                                context.chi.push(...root.ast.chi);
                            }
                            if (root.errors.length > 0) {
                                errors.push(...root.errors);
                            }
                            return null;
                        }
                        catch (error) {
                            // @ts-ignore
                            errors.push({ action: 'ignore', message: 'doParse: ' + error.message, error });
                        }
                    }
                }
            }
            // https://www.w3.org/TR/css-nesting-1/#conditionals
            // allowed nesting at-rules
            // there must be a top level rule in the stack
            const raw = parseTokens(tokens, { minify: options.minify }).reduce((acc, curr) => {
                acc.push(renderToken(curr, { removeComments: true }));
                return acc;
            }, []);
            const node = {
                typ: exports.EnumToken.AtRuleNodeType,
                nam: renderToken(atRule, { removeComments: true }),
                val: raw.join('')
            };
            Object.defineProperty(node, 'raw', { ...definedPropertySettings, value: raw });
            if (delim.typ == exports.EnumToken.BlockStartTokenType) {
                node.chi = [];
            }
            loc = {
                sta: position,
                src
            };
            if (options.sourcemap) {
                node.loc = loc;
            }
            // @ts-ignore
            context.chi.push(node);
            return delim.typ == exports.EnumToken.BlockStartTokenType ? node : null;
        }
        else {
            // rule
            if (delim.typ == exports.EnumToken.BlockStartTokenType) {
                const position = map.get(tokens[0]);
                const uniq = new Map;
                parseTokens(tokens, { minify: true }).reduce((acc, curr, index, array) => {
                    if (curr.typ == exports.EnumToken.CommentTokenType) {
                        return acc;
                    }
                    if (curr.typ == exports.EnumToken.WhitespaceTokenType) {
                        if (trimWhiteSpace.includes(array[index - 1]?.typ) ||
                            trimWhiteSpace.includes(array[index + 1]?.typ) ||
                            combinators.includes(array[index - 1]?.val) ||
                            combinators.includes(array[index + 1]?.val)) {
                            return acc;
                        }
                    }
                    let t = renderToken(curr, { minify: false });
                    if (t == ',') {
                        acc.push([]);
                    }
                    else {
                        acc[acc.length - 1].push(t);
                    }
                    return acc;
                }, [[]]).reduce((acc, curr) => {
                    // for (let i = 0; i < curr.length; i++) {
                    //
                    //     if (curr[i] == '*' && i + 1 < curr.length) {
                    //
                    //         curr.splice(i, curr[i + 1] == ' ' ? 2 : 1);
                    //         i--;
                    //     }
                    // }
                    acc.set(curr.join(''), curr);
                    return acc;
                }, uniq);
                const ruleType = context.typ == exports.EnumToken.AtRuleNodeType && context.nam == 'keyframes' ? exports.EnumToken.KeyFrameRuleNodeType : exports.EnumToken.RuleNodeType;
                if (ruleType == exports.EnumToken.RuleNodeType) {
                    parseSelector(tokens);
                    const valid = validateSelector(tokens, options, context);
                    if (valid.valid != ValidationLevel.Valid) {
                        const node = {
                            typ: exports.EnumToken.InvalidRuleTokenType,
                            // @ts-ignore
                            sel: tokens.reduce((acc, curr) => acc + renderToken(curr, { minify: false }), ''),
                            chi: []
                        };
                        errors.push({
                            action: 'drop',
                            message: valid.error + ' - "' + tokens.reduce((acc, curr) => acc + renderToken(curr, { minify: false }), '') + '"',
                            location: { src, ...(map.get(valid.node) ?? position) }
                        });
                        // @ts-ignore
                        context.chi.push(node);
                        return node;
                    }
                }
                const node = {
                    typ: ruleType,
                    // @ts-ignore
                    sel: [...uniq.keys()].join(','),
                    chi: []
                };
                let raw = [...uniq.values()];
                Object.defineProperty(node, 'raw', {
                    enumerable: false,
                    configurable: true,
                    writable: true,
                    value: raw
                });
                loc = {
                    sta: position,
                    src
                };
                if (options.sourcemap) {
                    node.loc = loc;
                }
                // @ts-ignore
                context.chi.push(node);
                return node;
            }
            else {
                // declaration
                // @ts-ignore
                let name = null;
                // @ts-ignore
                let value = null;
                for (let i = 0; i < tokens.length; i++) {
                    if (tokens[i].typ == exports.EnumToken.CommentTokenType) {
                        continue;
                    }
                    if (tokens[i].typ == exports.EnumToken.ColonTokenType) {
                        name = tokens.slice(0, i);
                        value = parseTokens(tokens.slice(i + 1), {
                            parseColor: options.parseColor,
                            src: options.src,
                            resolveUrls: options.resolveUrls,
                            resolve: options.resolve,
                            cwd: options.cwd
                        });
                    }
                }
                if (name == null) {
                    name = tokens;
                }
                const position = map.get(name[0]);
                if (name.length > 0) {
                    for (let i = 1; i < name.length; i++) {
                        if (name[i].typ != exports.EnumToken.WhitespaceTokenType && name[i].typ != exports.EnumToken.CommentTokenType) {
                            errors.push({
                                action: 'drop',
                                message: 'doParse: invalid declaration',
                                location: { src, ...position }
                            });
                            return null;
                        }
                    }
                }
                if (value == null || value.length == 0) {
                    errors.push({
                        action: 'drop',
                        message: 'doParse: invalid declaration',
                        location: { src, ...position }
                    });
                    return null;
                }
                const node = {
                    typ: exports.EnumToken.DeclarationNodeType,
                    // @ts-ignore
                    nam: renderToken(name.shift(), { removeComments: true }),
                    // @ts-ignore
                    val: value
                };
                const result = parseDeclaration(node, errors, src, position);
                if (result != null) {
                    // @ts-ignore
                    context.chi.push(node);
                }
                return null;
            }
        }
    }
    function parseSelector(tokens) {
        for (const { value, previousValue, nextValue, parent } of walkValues(tokens)) {
            if (value.typ == exports.EnumToken.CommentTokenType ||
                value.typ == exports.EnumToken.WhitespaceTokenType ||
                value.typ == exports.EnumToken.CommaTokenType ||
                value.typ == exports.EnumToken.IdenTokenType ||
                value.typ == exports.EnumToken.HashTokenType) {
                continue;
            }
            if (parent == null) {
                if (value.typ == exports.EnumToken.GtTokenType) {
                    // @ts-ignore
                    value.typ = exports.EnumToken.ChildCombinatorTokenType;
                }
                // @ts-ignore
                else if (value.typ == exports.EnumToken.WhitespaceTokenType) {
                    if (nextValue != null && nextValue.typ == exports.EnumToken.LiteralTokenType) {
                        if (['>', '+', '~'].includes(nextValue.val)) {
                            switch (value.val) {
                                case '>':
                                    // @ts-ignore
                                    nextValue.typ = exports.EnumToken.ChildCombinatorTokenType;
                                    break;
                                case '+':
                                    // @ts-ignore
                                    nextValue.typ = exports.EnumToken.NextSiblingCombinatorTokenType;
                                    break;
                                case '~':
                                    // @ts-ignore
                                    nextValue.typ = exports.EnumToken.SubsequentSiblingCombinatorTokenType;
                                    break;
                            }
                            // @ts-ignore
                            delete nextValue.val;
                            continue;
                        }
                    }
                    if (previousValue != null && [
                        exports.EnumToken.ChildCombinatorTokenType,
                        exports.EnumToken.DescendantCombinatorTokenType,
                        exports.EnumToken.NextSiblingCombinatorTokenType,
                        exports.EnumToken.SubsequentSiblingCombinatorTokenType,
                        exports.EnumToken.ColumnCombinatorTokenType,
                        exports.EnumToken.NameSpaceAttributeTokenType,
                        exports.EnumToken.CommaTokenType
                    ].includes(previousValue.typ)) {
                        continue;
                    }
                    // @ts-ignore
                    value.typ = exports.EnumToken.DescendantCombinatorTokenType;
                }
                else if (value.typ == exports.EnumToken.LiteralTokenType) {
                    if (value.val.charAt(0) == '&') {
                        // @ts-ignore
                        value.typ = exports.EnumToken.NestingSelectorTokenType;
                        // @ts-ignore
                        delete value.val;
                    }
                    else if (value.val.charAt(0) == '.') {
                        if (!isIdent(value.val.slice(1))) {
                            // @ts-ignore
                            value.typ = exports.EnumToken.InvalidClassSelectorTokenType;
                        }
                        else {
                            // @ts-ignore
                            value.typ = exports.EnumToken.ClassSelectorTokenType;
                        }
                    }
                    // @ts-ignore
                    if (value.typ == exports.EnumToken.DelimTokenType) {
                        // @ts-ignore
                        value.typ = exports.EnumToken.NextSiblingCombinatorTokenType;
                    }
                    else if (['*', '>', '+', '~'].includes(value.val)) {
                        switch (value.val) {
                            case '*':
                                // @ts-ignore
                                value.typ = exports.EnumToken.UniversalSelectorTokenType;
                                break;
                            case '>':
                                // @ts-ignore
                                value.typ = exports.EnumToken.ChildCombinatorTokenType;
                                break;
                            case '+':
                                // @ts-ignore
                                value.typ = exports.EnumToken.NextSiblingCombinatorTokenType;
                                break;
                            case '~':
                                // @ts-ignore
                                value.typ = exports.EnumToken.SubsequentSiblingCombinatorTokenType;
                                break;
                        }
                        // @ts-ignore
                        // @ts-ignore
                        delete value.val;
                    }
                }
                else if (value.typ == exports.EnumToken.ColorTokenType) {
                    if (value.kin == 'lit' || value.kin == 'hex' || value.kin == 'sys' || value.kin == 'dpsys') {
                        if (value.kin == 'hex') {
                            if (!isIdent(value.val.slice(1))) {
                                continue;
                            }
                            // @ts-ignore
                            value.typ = exports.EnumToken.HashTokenType;
                        }
                        else {
                            // @ts-ignore
                            value.typ = exports.EnumToken.IdenTokenType;
                        }
                        // @ts-ignore
                        delete value.kin;
                    }
                }
            }
        }
        let i = 0;
        for (; i < tokens.length; i++) {
            if ([
                exports.EnumToken.ChildCombinatorTokenType,
                exports.EnumToken.NextSiblingCombinatorTokenType,
                exports.EnumToken.SubsequentSiblingCombinatorTokenType
            ].includes(tokens[i].typ)) {
                if (i + 1 < tokens.length && [exports.EnumToken.WhitespaceTokenType, exports.EnumToken.DescendantCombinatorTokenType].includes(tokens[i + 1].typ)) {
                    tokens.splice(i + 1, 1);
                }
                if (i > 0 && [exports.EnumToken.WhitespaceTokenType, exports.EnumToken.DescendantCombinatorTokenType].includes(tokens[i - 1].typ)) {
                    tokens.splice(i - 1, 1);
                    i--;
                    continue;
                }
            }
            if (tokens[i].typ == exports.EnumToken.WhitespaceTokenType) {
                tokens[i].typ = exports.EnumToken.DescendantCombinatorTokenType;
            }
        }
        return tokens;
    }
    function parseString(src, options = { location: false }) {
        return parseTokens([...tokenize(src)].map(t => {
            const token = getTokenType(t.token, t.hint);
            if (options.location) {
                Object.assign(token, { loc: t.position });
            }
            return token;
        }));
    }
    function getTokenType(val, hint) {
        // if (val === '' && hint == null) {
        //     throw new Error('empty string?');
        // }
        if (hint != null) {
            return enumTokenHints.has(hint) ? { typ: hint } : { typ: hint, val };
        }
        if (val == ' ') {
            return { typ: exports.EnumToken.WhitespaceTokenType };
        }
        if (val == ';') {
            return { typ: exports.EnumToken.SemiColonTokenType };
        }
        if (val == '{') {
            return { typ: exports.EnumToken.BlockStartTokenType };
        }
        if (val == '}') {
            return { typ: exports.EnumToken.BlockEndTokenType };
        }
        if (val == '[') {
            return { typ: exports.EnumToken.AttrStartTokenType };
        }
        if (val == ']') {
            return { typ: exports.EnumToken.AttrEndTokenType };
        }
        if (val == ':') {
            return { typ: exports.EnumToken.ColonTokenType };
        }
        if (val == ')') {
            return { typ: exports.EnumToken.EndParensTokenType };
        }
        if (val == '(') {
            return { typ: exports.EnumToken.StartParensTokenType };
        }
        if (val == '=') {
            return { typ: exports.EnumToken.DelimTokenType };
        }
        if (val == ';') {
            return { typ: exports.EnumToken.SemiColonTokenType };
        }
        if (val == ',') {
            return { typ: exports.EnumToken.CommaTokenType };
        }
        if (val == '<') {
            return { typ: exports.EnumToken.LtTokenType };
        }
        if (val == '>') {
            return { typ: exports.EnumToken.GtTokenType };
        }
        if (isPseudo(val)) {
            return val.endsWith('(') ? {
                typ: exports.EnumToken.PseudoClassFuncTokenType,
                val: val.slice(0, -1),
                chi: []
            }
                : {
                    typ: exports.EnumToken.PseudoClassTokenType,
                    val
                };
        }
        if (isAtKeyword(val)) {
            return {
                typ: exports.EnumToken.AtRuleTokenType,
                val: val.slice(1)
            };
        }
        if (isFunction(val)) {
            val = val.slice(0, -1);
            if (val == 'url') {
                return {
                    typ: exports.EnumToken.UrlFunctionTokenType,
                    val,
                    chi: []
                };
            }
            if (['linear-gradient', 'radial-gradient', 'repeating-linear-gradient', 'repeating-radial-gradient', 'conic-gradient', 'image', 'image-set', 'element', 'cross-fade'].includes(val)) {
                return {
                    typ: exports.EnumToken.ImageFunctionTokenType,
                    val,
                    chi: []
                };
            }
            if (['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear', 'step-start', 'step-end', 'steps', 'cubic-bezier'].includes(val)) {
                return {
                    typ: exports.EnumToken.TimingFunctionTokenType,
                    val,
                    chi: []
                };
            }
            if (['view', 'scroll'].includes(val)) {
                return {
                    typ: exports.EnumToken.TimelineFunctionTokenType,
                    val,
                    chi: []
                };
            }
            return {
                typ: exports.EnumToken.FunctionTokenType,
                val,
                chi: []
            };
        }
        if (isNumber(val)) {
            return {
                typ: exports.EnumToken.NumberTokenType,
                val
            };
        }
        if (isPercentage(val)) {
            return {
                typ: exports.EnumToken.PercentageTokenType,
                val: val.slice(0, -1)
            };
        }
        if (isFlex(val)) {
            return {
                typ: exports.EnumToken.FlexTokenType,
                val: val.slice(0, -2)
            };
        }
        if (isDimension(val)) {
            return parseDimension(val);
        }
        const v = val.toLowerCase();
        if (v == 'currentcolor' || v == 'transparent' || v in COLORS_NAMES) {
            return {
                typ: exports.EnumToken.ColorTokenType,
                val: v,
                kin: 'lit'
            };
        }
        if (isIdent(val)) {
            if (systemColors.has(val.toLowerCase())) {
                return {
                    typ: exports.EnumToken.ColorTokenType,
                    val,
                    kin: 'sys'
                };
            }
            if (deprecatedSystemColors.has(val.toLowerCase())) {
                return {
                    typ: exports.EnumToken.ColorTokenType,
                    val,
                    kin: 'dpsys'
                };
            }
            return {
                typ: val.startsWith('--') ? exports.EnumToken.DashedIdenTokenType : exports.EnumToken.IdenTokenType,
                val
            };
        }
        if (val.charAt(0) == '#' && isHexColor(val)) {
            return {
                typ: exports.EnumToken.ColorTokenType,
                val,
                kin: 'hex'
            };
        }
        if (val.charAt(0) == '#' && isHash(val)) {
            return {
                typ: exports.EnumToken.HashTokenType,
                val
            };
        }
        if ('"\''.includes(val.charAt(0))) {
            return {
                typ: exports.EnumToken.UnclosedStringTokenType,
                val
            };
        }
        return {
            typ: exports.EnumToken.LiteralTokenType,
            val
        };
    }
    function parseTokens(tokens, options = {}) {
        for (let i = 0; i < tokens.length; i++) {
            const t = tokens[i];
            if (t.typ == exports.EnumToken.WhitespaceTokenType && ((i == 0 ||
                i + 1 == tokens.length ||
                [exports.EnumToken.CommaTokenType, exports.EnumToken.GteTokenType, exports.EnumToken.LteTokenType, exports.EnumToken.ColumnCombinatorTokenType].includes(tokens[i + 1].typ)) ||
                (i > 0 &&
                    // tokens[i + 1]?.typ != Literal ||
                    // funcLike.includes(tokens[i - 1].typ) &&
                    // !['var', 'calc'].includes((<FunctionToken>tokens[i - 1]).val)))) &&
                    trimWhiteSpace.includes(tokens[i - 1].typ)))) {
                tokens.splice(i--, 1);
                continue;
            }
            if (t.typ == exports.EnumToken.ColonTokenType) {
                const typ = tokens[i + 1]?.typ;
                if (typ != null) {
                    if (typ == exports.EnumToken.FunctionTokenType) {
                        tokens[i + 1].val = ':' + (tokens[i + 1].val in webkitPseudoAliasMap ? webkitPseudoAliasMap[tokens[i + 1].val] : tokens[i + 1].val);
                        tokens[i + 1].typ = exports.EnumToken.PseudoClassFuncTokenType;
                    }
                    else if (typ == exports.EnumToken.IdenTokenType) {
                        if (tokens[i + 1].val in webkitPseudoAliasMap) {
                            tokens[i + 1].val = webkitPseudoAliasMap[tokens[i + 1].val];
                        }
                        tokens[i + 1].val = ':' + tokens[i + 1].val;
                        tokens[i + 1].typ = exports.EnumToken.PseudoClassTokenType;
                    }
                    if (typ == exports.EnumToken.FunctionTokenType || typ == exports.EnumToken.IdenTokenType) {
                        tokens.splice(i, 1);
                        i--;
                    }
                }
                continue;
            }
            if (t.typ == exports.EnumToken.AttrStartTokenType) {
                let k = i;
                let inAttr = 1;
                while (++k < tokens.length) {
                    if (tokens[k].typ == exports.EnumToken.AttrEndTokenType) {
                        inAttr--;
                    }
                    else if (tokens[k].typ == exports.EnumToken.AttrStartTokenType) {
                        inAttr++;
                    }
                    if (inAttr == 0) {
                        break;
                    }
                }
                Object.assign(t, {
                    typ: inAttr == 0 ? exports.EnumToken.AttrTokenType : exports.EnumToken.InvalidAttrTokenType,
                    chi: tokens.splice(i + 1, k - i)
                });
                // @ts-ignore
                if (t.chi.at(-1).typ == exports.EnumToken.AttrEndTokenType) {
                    // @ts-ignore
                    t.chi.pop();
                }
                // @ts-ignore
                if (t.chi.length > 1) {
                    /*(<AttrToken>t).chi =*/
                    // @ts-ignore
                    parseTokens(t.chi, t.typ);
                }
                let m = t.chi.length;
                let val;
                for (m = 0; m < t.chi.length; m++) {
                    val = t.chi[m];
                    if (val.typ == exports.EnumToken.StringTokenType) {
                        const slice = val.val.slice(1, -1);
                        if ((slice.charAt(0) != '-' || (slice.charAt(0) == '-' && isIdentStart(slice.charCodeAt(1)))) && isIdent(slice)) {
                            Object.assign(val, { typ: exports.EnumToken.IdenTokenType, val: slice });
                        }
                    }
                    else if (val.typ == exports.EnumToken.LiteralTokenType && val.val == '|') {
                        let upper = m;
                        let lower = m;
                        while (++upper < t.chi.length) {
                            if (t.chi[upper].typ == exports.EnumToken.CommentTokenType) {
                                continue;
                            }
                            break;
                        }
                        while (lower-- > 0) {
                            if (t.chi[lower].typ == exports.EnumToken.CommentTokenType) {
                                continue;
                            }
                            break;
                        }
                        // @ts-ignore
                        t.chi[m] = {
                            typ: exports.EnumToken.NameSpaceAttributeTokenType,
                            l: t.chi[lower],
                            r: t.chi[upper]
                        };
                        t.chi.splice(upper, 1);
                        if (lower >= 0) {
                            t.chi.splice(lower, 1);
                            m--;
                        }
                    }
                    else if ([
                        exports.EnumToken.DashMatchTokenType, exports.EnumToken.StartMatchTokenType, exports.EnumToken.ContainMatchTokenType, exports.EnumToken.EndMatchTokenType, exports.EnumToken.IncludeMatchTokenType
                    ].includes(t.chi[m].typ)) {
                        let upper = m;
                        let lower = m;
                        while (++upper < t.chi.length) {
                            if (t.chi[upper].typ == exports.EnumToken.CommentTokenType) {
                                continue;
                            }
                            break;
                        }
                        while (lower-- > 0) {
                            if (t.chi[lower].typ == exports.EnumToken.CommentTokenType) {
                                continue;
                            }
                            break;
                        }
                        val = t.chi[lower];
                        if (val.typ == exports.EnumToken.StringTokenType) {
                            const slice = val.val.slice(1, -1);
                            if ((slice.charAt(0) != '-' || (slice.charAt(0) == '-' && isIdentStart(slice.charCodeAt(1)))) && isIdent(slice)) {
                                Object.assign(val, { typ: exports.EnumToken.IdenTokenType, val: slice });
                            }
                        }
                        val = t.chi[upper];
                        if (val.typ == exports.EnumToken.StringTokenType) {
                            const slice = val.val.slice(1, -1);
                            if ((slice.charAt(0) != '-' || (slice.charAt(0) == '-' && isIdentStart(slice.charCodeAt(1)))) && isIdent(slice)) {
                                Object.assign(val, { typ: exports.EnumToken.IdenTokenType, val: slice });
                            }
                        }
                        t.chi[m] = {
                            typ: exports.EnumToken.MatchExpressionTokenType,
                            op: t.chi[m].typ,
                            l: t.chi[lower],
                            r: t.chi[upper]
                        };
                        t.chi.splice(upper, 1);
                        t.chi.splice(lower, 1);
                        upper = m;
                        m--;
                        while (upper < t.chi.length && t.chi[upper].typ == exports.EnumToken.WhitespaceTokenType) {
                            upper++;
                        }
                        if (upper < t.chi.length &&
                            t.chi[upper].typ == exports.EnumToken.Iden &&
                            ['i', 's'].includes(t.chi[upper].val.toLowerCase())) {
                            t.chi[m].attr = t.chi[upper].val;
                            t.chi.splice(upper, 1);
                        }
                    }
                }
                m = t.chi.length;
                while (t.chi.at(-1)?.typ == exports.EnumToken.WhitespaceTokenType) {
                    t.chi.pop();
                }
                continue;
            }
            if (funcLike.includes(t.typ)) {
                let parens = 1;
                let k = i;
                while (++k < tokens.length) {
                    if (tokens[k].typ == exports.EnumToken.ColonTokenType) {
                        const typ = tokens[k + 1]?.typ;
                        if (typ != null) {
                            if (typ == exports.EnumToken.IdenTokenType) {
                                tokens[k + 1].typ = exports.EnumToken.PseudoClassTokenType;
                                tokens[k + 1].val = ':' + tokens[k + 1].val;
                            }
                            else if (typ == exports.EnumToken.FunctionTokenType) {
                                tokens[k + 1].typ = exports.EnumToken.PseudoClassFuncTokenType;
                                tokens[k + 1].val = ':' + tokens[k + 1].val;
                            }
                            if (typ == exports.EnumToken.FunctionTokenType || typ == exports.EnumToken.IdenTokenType) {
                                tokens.splice(k, 1);
                                k--;
                                continue;
                            }
                        }
                    }
                    if (funcLike.includes(tokens[k].typ)) {
                        parens++;
                    }
                    else if (tokens[k].typ == exports.EnumToken.EndParensTokenType) {
                        parens--;
                    }
                    if (parens == 0) {
                        break;
                    }
                }
                // @ts-ignore
                t.chi = tokens.splice(i + 1, k - i);
                // @ts-ignore
                if (t.chi.at(-1)?.typ == exports.EnumToken.EndParensTokenType) {
                    // @ts-ignore
                    t.chi.pop();
                }
                // @ts-ignore
                if (t.chi.length > 0) {
                    // @ts-ignore
                    parseTokens(t.chi, options);
                }
                if (t.typ == exports.EnumToken.FunctionTokenType && t.val == 'calc') {
                    for (const { value, parent } of walkValues(t.chi)) {
                        if (value.typ == exports.EnumToken.WhitespaceTokenType) {
                            const p = (parent ?? t);
                            for (let i = 0; i < (p).chi.length; i++) {
                                // @ts-ignore
                                if (p.chi[i] == value) {
                                    // @ts-ignore
                                    (p).chi.splice(i, 1);
                                    i--;
                                    break;
                                }
                            }
                        }
                        else if (value.typ == exports.EnumToken.LiteralTokenType && ['+', '-', '/', '*'].includes(value.val)) {
                            // @ts-ignore
                            value.typ = value.val == '+' ? exports.EnumToken.Add : (value.val == '-' ? exports.EnumToken.Sub : (value.val == '*' ? exports.EnumToken.Mul : exports.EnumToken.Div));
                            // @ts-ignore
                            delete value.val;
                        }
                    }
                }
                else if (t.typ == exports.EnumToken.FunctionTokenType && ['minmax', 'fit-content', 'repeat'].includes(t.val)) {
                    // @ts-ignore
                    t.typ = exports.EnumToken.GridTemplateFuncTokenType;
                }
                else if (t.typ == exports.EnumToken.StartParensTokenType) {
                    // @ts-ignore
                    t.typ = exports.EnumToken.ParensTokenType;
                }
                // @ts-ignore
                if (options.parseColor && t.typ == exports.EnumToken.FunctionTokenType && isColor(t)) {
                    // @ts-ignore
                    t.typ = exports.EnumToken.ColorTokenType;
                    // @ts-ignore
                    t.kin = t.val;
                    if (t.chi[0].typ == exports.EnumToken.IdenTokenType) {
                        if (t.chi[0].val == 'from') {
                            // @ts-ignore
                            t.cal = 'rel';
                        }
                        // @ts-ignore
                        else if (t.val == 'color-mix' && t.chi[0].val == 'in') {
                            // @ts-ignore
                            t.cal = 'mix';
                        }
                        else if (t.val == 'color') {
                            // @ts-ignore
                            t.cal = 'col';
                            // t.chi = t.chi.filter((t: Token) => [EnumToken.IdenTokenType, EnumToken.NumberTokenType, EnumToken.PercentageTokenType].includes(t.typ));
                        }
                    }
                    const filter = [exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType];
                    if (t.val != 'light-dark') {
                        filter.push(exports.EnumToken.CommaTokenType);
                    }
                    t.chi = t.chi.filter((t) => !filter.includes(t.typ));
                    continue;
                }
                if (t.typ == exports.EnumToken.UrlFunctionTokenType) {
                    // @ts-ignore
                    if (t.chi[0]?.typ == exports.EnumToken.StringTokenType) {
                        // @ts-ignore
                        const value = t.chi[0].val.slice(1, -1);
                        // @ts-ignore
                        if (t.chi[0].val.slice(1, 5) != 'data:' && urlTokenMatcher.test(value)) {
                            // @ts-ignore
                            t.chi[0].typ = exports.EnumToken.UrlTokenTokenType;
                            // @ts-ignore
                            t.chi[0].val = options.src !== '' && options.resolveUrls ? options.resolve(value, options.src).absolute : value;
                        }
                    }
                    if (t.chi[0]?.typ == exports.EnumToken.UrlTokenTokenType) {
                        if (options.src !== '' && options.resolveUrls) {
                            // @ts-ignore
                            t.chi[0].val = options.resolve(t.chi[0].val, options.src, options.cwd).relative;
                        }
                    }
                }
                // @ts-ignore
                if (t.chi.length > 0) {
                    if (t.typ == exports.EnumToken.PseudoClassFuncTokenType && t.val == ':is' && options.minify) {
                        //
                        const count = t.chi.filter(t => t.typ != exports.EnumToken.CommentTokenType).length;
                        if (count == 1 ||
                            (i == 0 &&
                                (tokens[i + 1]?.typ == exports.EnumToken.CommaTokenType || tokens.length == i + 1)) ||
                            (tokens[i - 1]?.typ == exports.EnumToken.CommaTokenType && (tokens[i + 1]?.typ == exports.EnumToken.CommaTokenType || tokens.length == i + 1))) {
                            tokens.splice(i, 1, ...t.chi);
                            i = Math.max(0, i - t.chi.length);
                        }
                    }
                }
                continue;
            }
            if (options.parseColor) {
                if (t.typ == exports.EnumToken.IdenTokenType) {
                    // named color
                    const value = t.val.toLowerCase();
                    if (value in COLORS_NAMES) {
                        Object.assign(t, {
                            typ: exports.EnumToken.ColorTokenType,
                            val: COLORS_NAMES[value].length < value.length ? COLORS_NAMES[value] : value,
                            kin: 'hex'
                        });
                    }
                    continue;
                }
                if (t.typ == exports.EnumToken.HashTokenType && isHexColor(t.val)) {
                    // hex color
                    // @ts-ignore
                    t.typ = exports.EnumToken.ColorTokenType;
                    // @ts-ignore
                    t.kin = 'hex';
                }
            }
        }
        return tokens;
    }

    function eq(a, b) {
        if (a == null || b == null) {
            return a == b;
        }
        if (typeof a != 'object' || typeof b != 'object') {
            return a === b;
        }
        if (a.constructor != b.constructor) {
            return false;
        }
        if (Array.isArray(a)) {
            if (a.length != b.length) {
                return false;
            }
            let i = 0;
            for (; i < a.length; i++) {
                if (!eq(a[i], b[i])) {
                    return false;
                }
            }
            return true;
        }
        const k1 = Object.keys(a);
        const k2 = Object.keys(b);
        if (k1.length != k2.length) {
            return false;
        }
        let key;
        for (key of k1) {
            if (!(key in b) || !eq(a[key], b[key])) {
                return false;
            }
        }
        return true;
    }

    function* walk(node, filter) {
        const parents = [node];
        const root = node;
        const map = new Map;
        while ((node = parents.shift())) {
            let option = null;
            if (filter != null) {
                option = filter(node);
                if (option === 'ignore') {
                    continue;
                }
                if (option === 'stop') {
                    break;
                }
            }
            // @ts-ignore
            if (option !== 'children') {
                // @ts-ignore
                yield { node, parent: map.get(node), root };
            }
            if (option !== 'ignore-children' && 'chi' in node) {
                parents.unshift(...node.chi);
                for (const child of node.chi.slice()) {
                    map.set(child, node);
                }
            }
        }
    }
    function* walkValues(values, root = null, filter) {
        const stack = values.slice();
        const map = new Map;
        let value;
        let previous = null;
        while ((value = stack.shift())) {
            let option = null;
            if (filter != null) {
                option = filter(value);
                if (option === 'ignore') {
                    continue;
                }
                if (option === 'stop') {
                    break;
                }
            }
            // @ts-ignore
            if (option !== 'children') {
                // @ts-ignore
                yield { value, parent: map.get(value), previousValue: previous, nextValue: stack[0] ?? null, root };
            }
            if (option !== 'ignore-children' && 'chi' in value) {
                for (const child of value.chi.slice()) {
                    map.set(child, value);
                }
                stack.unshift(...value.chi);
            }
            else if (value.typ == exports.EnumToken.BinaryExpressionTokenType) {
                map.set(value.l, value);
                map.set(value.r, value);
                stack.unshift(value.l, value.r);
            }
            previous = value;
        }
    }

    function expand(ast) {
        //
        if (![exports.EnumToken.RuleNodeType, exports.EnumToken.StyleSheetNodeType, exports.EnumToken.AtRuleNodeType].includes(ast.typ)) {
            return ast;
        }
        if (exports.EnumToken.RuleNodeType == ast.typ) {
            return {
                typ: exports.EnumToken.StyleSheetNodeType,
                chi: expandRule(ast)
            };
        }
        if (!('chi' in ast)) {
            return ast;
        }
        const result = { ...ast, chi: [] };
        // @ts-ignore
        for (let i = 0; i < ast.chi.length; i++) {
            // @ts-ignore
            const node = ast.chi[i];
            if (node.typ == exports.EnumToken.RuleNodeType) {
                // @ts-ignore
                result.chi.push(...expandRule(node));
                // i += expanded.length - 1;
            }
            else if (node.typ == exports.EnumToken.AtRuleNodeType && 'chi' in node) {
                let hasRule = false;
                let j = node.chi.length;
                while (j--) {
                    if (node.chi[j].typ == exports.EnumToken.RuleNodeType || node.chi[j].typ == exports.EnumToken.AtRuleNodeType) {
                        hasRule = true;
                        break;
                    }
                }
                // @ts-ignore
                result.chi.push({ ...(hasRule ? expand(node) : node) });
            }
            else {
                // @ts-ignore
                result.chi.push(node);
            }
        }
        return result;
    }
    function expandRule(node) {
        const ast = { ...node, chi: node.chi.slice() };
        const result = [];
        if (ast.typ == exports.EnumToken.RuleNodeType) {
            let i = 0;
            for (; i < ast.chi.length; i++) {
                if (ast.chi[i].typ == exports.EnumToken.RuleNodeType) {
                    const rule = ast.chi[i];
                    if (!rule.sel.includes('&')) {
                        const selRule = splitRule(rule.sel);
                        if (selRule.length > 1) {
                            const r = ':is(' + selRule.map(a => a.join('')).join(',') + ')';
                            rule.sel = splitRule(ast.sel).reduce((a, b) => a.concat([b.join('') + r]), []).join(',');
                        }
                        else {
                            selRule.forEach(arr => combinators.includes(arr[0].charAt(0)) ? arr.unshift(ast.sel) : arr.unshift(ast.sel, ' '));
                            rule.sel = selRule.reduce((acc, curr) => {
                                acc.push(curr.join(''));
                                return acc;
                            }, []).join(',');
                        }
                    }
                    else {
                        rule.sel = replaceCompound(rule.sel, ast.sel);
                    }
                    ast.chi.splice(i--, 1);
                    result.push(...expandRule(rule));
                }
                else if (ast.chi[i].typ == exports.EnumToken.AtRuleNodeType) {
                    let astAtRule = ast.chi[i];
                    const values = [];
                    if (astAtRule.nam == 'scope') {
                        if (astAtRule.val.includes('&')) {
                            astAtRule.val = replaceCompound(astAtRule.val, ast.sel);
                        }
                        astAtRule = expand(astAtRule);
                    }
                    else {
                        // @ts-ignore
                        const clone = { ...ast, chi: astAtRule.chi.slice() };
                        // @ts-ignore
                        astAtRule.chi.length = 0;
                        for (const r of expandRule(clone)) {
                            if (r.typ == exports.EnumToken.AtRuleNodeType && 'chi' in r) {
                                if (astAtRule.val !== '' && r.val !== '') {
                                    if (astAtRule.nam == 'media' && r.nam == 'media') {
                                        r.val = astAtRule.val + ' and ' + r.val;
                                    }
                                    else if (astAtRule.nam == 'layer' && r.nam == 'layer') {
                                        r.val = astAtRule.val + '.' + r.val;
                                    }
                                }
                                // @ts-ignore
                                values.push(r);
                            }
                            else if (r.typ == exports.EnumToken.RuleNodeType) {
                                // @ts-ignore
                                astAtRule.chi.push(...expandRule(r));
                            }
                            else {
                                // @ts-ignore
                                astAtRule.chi.push(r);
                            }
                        }
                    }
                    // @ts-ignore
                    result.push(...(astAtRule.chi.length > 0 ? [astAtRule].concat(values) : values));
                    ast.chi.splice(i--, 1);
                }
            }
        }
        // @ts-ignore
        return ast.chi.length > 0 ? [ast].concat(result) : result;
    }
    function replaceCompound(input, replace) {
        const tokens = parseString(input);
        for (const t of walkValues(tokens)) {
            if (t.value.typ == exports.EnumToken.LiteralTokenType) {
                if (t.value.val == '&') {
                    const rule = splitRule(replace);
                    t.value.val = rule.length > 1 ? ':is(' + replace + ')' : replace;
                }
                else if (t.value.val.length > 1 && t.value.val.charAt(0) == '&') {
                    t.value.val = replaceCompoundLiteral(t.value.val, replace);
                }
            }
        }
        return tokens.reduce((acc, curr) => acc + renderToken(curr), '');
    }
    function replaceCompoundLiteral(selector, replace) {
        const tokens = [''];
        let i = 0;
        for (; i < selector.length; i++) {
            if (selector.charAt(i) == '&') {
                tokens.push('&');
                tokens.push('');
            }
            else {
                tokens[tokens.length - 1] += selector.charAt(i);
            }
        }
        return tokens.sort((a, b) => {
            if (a == '&') {
                return 1;
            }
            return b == '&' ? -1 : 0;
        }).reduce((acc, curr) => acc + (curr == '&' ? replace : curr), '');
    }

    var ValidationTokenEnum;
    (function (ValidationTokenEnum) {
        ValidationTokenEnum[ValidationTokenEnum["Root"] = 0] = "Root";
        ValidationTokenEnum[ValidationTokenEnum["Keyword"] = 1] = "Keyword";
        ValidationTokenEnum[ValidationTokenEnum["PropertyType"] = 2] = "PropertyType";
        ValidationTokenEnum[ValidationTokenEnum["DeclarationType"] = 3] = "DeclarationType";
        ValidationTokenEnum[ValidationTokenEnum["AtRule"] = 4] = "AtRule";
        ValidationTokenEnum[ValidationTokenEnum["ValidationFunctionDefinition"] = 5] = "ValidationFunctionDefinition";
        ValidationTokenEnum[ValidationTokenEnum["OpenBracket"] = 6] = "OpenBracket";
        ValidationTokenEnum[ValidationTokenEnum["CloseBracket"] = 7] = "CloseBracket";
        ValidationTokenEnum[ValidationTokenEnum["OpenParenthesis"] = 8] = "OpenParenthesis";
        ValidationTokenEnum[ValidationTokenEnum["CloseParenthesis"] = 9] = "CloseParenthesis";
        ValidationTokenEnum[ValidationTokenEnum["Comma"] = 10] = "Comma";
        ValidationTokenEnum[ValidationTokenEnum["Pipe"] = 11] = "Pipe";
        ValidationTokenEnum[ValidationTokenEnum["Column"] = 12] = "Column";
        ValidationTokenEnum[ValidationTokenEnum["Star"] = 13] = "Star";
        ValidationTokenEnum[ValidationTokenEnum["OpenCurlyBrace"] = 14] = "OpenCurlyBrace";
        ValidationTokenEnum[ValidationTokenEnum["CloseCurlyBrace"] = 15] = "CloseCurlyBrace";
        ValidationTokenEnum[ValidationTokenEnum["HashMark"] = 16] = "HashMark";
        ValidationTokenEnum[ValidationTokenEnum["QuestionMark"] = 17] = "QuestionMark";
        ValidationTokenEnum[ValidationTokenEnum["Function"] = 18] = "Function";
        ValidationTokenEnum[ValidationTokenEnum["Number"] = 19] = "Number";
        ValidationTokenEnum[ValidationTokenEnum["Whitespace"] = 20] = "Whitespace";
        ValidationTokenEnum[ValidationTokenEnum["Parenthesis"] = 21] = "Parenthesis";
        ValidationTokenEnum[ValidationTokenEnum["Bracket"] = 22] = "Bracket";
        ValidationTokenEnum[ValidationTokenEnum["AtLeastOnce"] = 23] = "AtLeastOnce";
        ValidationTokenEnum[ValidationTokenEnum["Separator"] = 24] = "Separator";
        ValidationTokenEnum[ValidationTokenEnum["Exclamation"] = 25] = "Exclamation";
        ValidationTokenEnum[ValidationTokenEnum["Ampersand"] = 26] = "Ampersand";
        ValidationTokenEnum[ValidationTokenEnum["PipeToken"] = 27] = "PipeToken";
        ValidationTokenEnum[ValidationTokenEnum["ColumnToken"] = 28] = "ColumnToken";
        ValidationTokenEnum[ValidationTokenEnum["AmpersandToken"] = 29] = "AmpersandToken";
        ValidationTokenEnum[ValidationTokenEnum["Parens"] = 30] = "Parens";
        ValidationTokenEnum[ValidationTokenEnum["PseudoClassToken"] = 31] = "PseudoClassToken";
        ValidationTokenEnum[ValidationTokenEnum["PseudoClassFunctionToken"] = 32] = "PseudoClassFunctionToken";
        ValidationTokenEnum[ValidationTokenEnum["StringToken"] = 33] = "StringToken";
    })(ValidationTokenEnum || (ValidationTokenEnum = {}));

    [
        ValidationTokenEnum.Star,
        ValidationTokenEnum.HashMark,
        ValidationTokenEnum.AtLeastOnce,
        ValidationTokenEnum.Exclamation,
        ValidationTokenEnum.QuestionMark,
        ValidationTokenEnum.OpenCurlyBrace
    ];

    const config$1 = getConfig();
    class ComputePrefixFeature {
        static get ordering() {
            return 2;
        }
        static register(options) {
            if (options.removePrefix) {
                for (const feature of options.features) {
                    if (feature instanceof ComputePrefixFeature) {
                        return;
                    }
                }
                // @ts-ignore
                options.features.push(new ComputePrefixFeature(options));
            }
        }
        run(ast) {
            // @ts-ignore
            const j = ast.chi.length;
            let k = 0;
            // @ts-ignore
            for (; k < j; k++) {
                // @ts-ignore
                const node = ast.chi[k];
                if (node.typ == exports.EnumToken.DeclarationNodeType) {
                    if (node.nam.charAt(0) == '-') {
                        const match = node.nam.match(/^-(.*?)-(.*)$/);
                        if (match != null) {
                            const nam = match[2];
                            if (nam.toLowerCase() in config$1.declarations) {
                                node.nam = nam;
                            }
                        }
                    }
                    if (node.nam.toLowerCase() in config$1.declarations) {
                        for (const { value } of walkValues(node.val)) {
                            if (value.typ == exports.EnumToken.IdenTokenType && value.val.charAt(0) == '-' && value.val.charAt(1) != '-') {
                                // @ts-ignore
                                const values = config$1.declarations[node.nam].ast.slice();
                                const match = value.val.match(/^-(.*?)-(.*)$/);
                                if (match != null) {
                                    const val = matchToken({ ...value, val: match[2] }, values);
                                    if (val != null) {
                                        // @ts-ignore
                                        value.val = val.val;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ast;
        }
    }
    function matchToken(token, matches) {
        let result;
        for (let i = 0; i < matches.length; i++) {
            switch (matches[i].typ) {
                case ValidationTokenEnum.Whitespace:
                case ValidationTokenEnum.Comma:
                    break;
                case ValidationTokenEnum.Keyword:
                    console.error(matches[i], token);
                    if (token.typ == exports.EnumToken.IdenTokenType && token.val == matches[i].val) {
                        return token;
                    }
                    break;
                case ValidationTokenEnum.PropertyType:
                    if (['ident', 'custom-ident'].includes(matches[i].val)) {
                        if (token.typ == exports.EnumToken.IdenTokenType && token.val == matches[i].val) {
                            return token;
                        }
                    }
                    else {
                        const val = matches[i].val;
                        if (val in config$1.declarations || val in config$1.syntaxes) {
                            // @ts-ignore
                            result = matchToken(token, (config$1.syntaxes[val] ?? config$1.declarations[val]).ast.slice());
                            if (result != null) {
                                return result;
                            }
                        }
                    }
                    break;
                case ValidationTokenEnum.PipeToken:
                case ValidationTokenEnum.ColumnToken:
                case ValidationTokenEnum.AmpersandToken:
                    result = matchToken(token, matches[i].l);
                    if (result == null) {
                        result = matchToken(token, matches[i].r);
                    }
                    if (result != null) {
                        return result;
                    }
                    break;
                case ValidationTokenEnum.Bracket:
                    result = matchToken(token, matches[i].chi);
                    if (result != null) {
                        return result;
                    }
                    break;
                // default:
                //
                //     console.error(token, matches[i]);
                //     throw new Error('bar bar');
            }
        }
        return null;
    }

    function replace(node, variableScope) {
        for (const { value, parent: parentValue } of walkValues(node.val)) {
            if (value?.typ == exports.EnumToken.FunctionTokenType && value.val == 'var') {
                if (value.chi.length == 1 && value.chi[0].typ == exports.EnumToken.DashedIdenTokenType) {
                    const info = variableScope.get(value.chi[0].val);
                    if (info?.replaceable) {
                        if (parentValue != null) {
                            let i = 0;
                            for (; i < parentValue.chi.length; i++) {
                                if (parentValue.chi[i] == value) {
                                    parentValue.chi.splice(i, 1, ...info.node.val);
                                    break;
                                }
                            }
                        }
                        else {
                            node.val = info.node.val.slice();
                        }
                    }
                }
            }
        }
    }
    class InlineCssVariablesFeature {
        static get ordering() {
            return 0;
        }
        static register(options) {
            if (options.inlineCssVariables) {
                for (const feature of options.features) {
                    if (feature instanceof InlineCssVariablesFeature) {
                        return;
                    }
                }
                // @ts-ignore
                options.features.push(new InlineCssVariablesFeature());
            }
        }
        run(ast, options = {}, parent, context) {
            if (!('variableScope' in context)) {
                context.variableScope = new Map;
            }
            const isRoot = parent.typ == exports.EnumToken.StyleSheetNodeType && ast.typ == exports.EnumToken.RuleNodeType && [':root', 'html'].includes(ast.sel);
            const variableScope = context.variableScope;
            // @ts-ignore
            for (const node of ast.chi) {
                if (node.typ == exports.EnumToken.CDOCOMMNodeType || node.typ == exports.EnumToken.CommentNodeType) {
                    continue;
                }
                if (node.typ != exports.EnumToken.DeclarationNodeType) {
                    break;
                }
                // css variable
                if (node.nam.startsWith('--')) {
                    if (!variableScope.has(node.nam)) {
                        const info = {
                            globalScope: isRoot,
                            // @ts-ignore
                            parent: new Set(),
                            declarationCount: 1,
                            replaceable: isRoot,
                            node: node
                        };
                        info.parent.add(ast);
                        variableScope.set(node.nam, info);
                        let recursive = false;
                        for (const { value, parent: parentValue } of walkValues(node.val)) {
                            if (value?.typ == exports.EnumToken.FunctionTokenType && value.val == 'var') {
                                recursive = true;
                                break;
                            }
                        }
                        if (recursive) {
                            replace(node, variableScope);
                        }
                    }
                    else {
                        const info = variableScope.get(node.nam);
                        info.globalScope = isRoot;
                        if (!isRoot) {
                            ++info.declarationCount;
                        }
                        if (info.replaceable) {
                            info.replaceable = isRoot && info.declarationCount == 1;
                        }
                        info.parent.add(ast);
                        info.node = node;
                    }
                }
                else {
                    replace(node, variableScope);
                }
            }
        }
        cleanup(ast, options = {}, context) {
            const variableScope = context.variableScope;
            if (variableScope == null) {
                return;
            }
            for (const info of variableScope.values()) {
                if (info.replaceable) {
                    let i;
                    // drop declarations from :root{}
                    for (const parent of info.parent) {
                        i = parent.chi?.length ?? 0;
                        while (i--) {
                            if (parent.chi[i].typ == exports.EnumToken.DeclarationNodeType && parent.chi[i].nam == info.node.nam) {
                                parent.chi.splice(i, 1);
                            }
                        }
                        if (parent.chi?.length == 0 && 'parent' in parent) {
                            // @ts-ignore
                            for (i = 0; i < parent.parent.chi?.length; i++) {
                                // @ts-ignore
                                if (parent.parent.chi[i] == parent) {
                                    // @ts-ignore
                                    parent.parent.chi.splice(i, 1);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    function dedup(values) {
        for (const value of values) {
            let i = value.length;
            while (i-- > 1) {
                const t = value[i];
                const k = value[i == 1 ? 0 : i % 2];
                if (t.val == k.val && t.val == '0') {
                    if ((t.typ == exports.EnumToken.NumberTokenType && isLength(k)) ||
                        (k.typ == exports.EnumToken.NumberTokenType && isLength(t)) ||
                        (isLength(k) || isLength(t))) {
                        value.splice(i, 1);
                        continue;
                    }
                }
                if (eq(t, k)) {
                    value.splice(i, 1);
                    continue;
                }
                break;
            }
        }
        return values;
    }
    class PropertySet {
        config;
        declarations;
        constructor(config) {
            this.config = config;
            this.declarations = new Map;
        }
        add(declaration) {
            if (declaration.nam == this.config.shorthand) {
                this.declarations = new Map;
            }
            else {
                // expand shorthand
                if (declaration.nam != this.config.shorthand && this.declarations.has(this.config.shorthand)) {
                    let isValid = true;
                    let current = -1;
                    const tokens = [];
                    // @ts-ignore
                    for (let token of this.declarations.get(this.config.shorthand).val) {
                        // @ts-ignore
                        if (this.config.types.some(t => token.typ == exports.EnumToken[t]) || (token.typ == exports.EnumToken.NumberTokenType && token.val == '0' &&
                            (this.config.types.includes('Length') ||
                                this.config.types.includes('Angle') ||
                                this.config.types.includes('Dimension')))) {
                            if (tokens.length == 0) {
                                tokens.push([]);
                                current++;
                            }
                            tokens[current].push(token);
                            continue;
                        }
                        if (token.typ != exports.EnumToken.WhitespaceTokenType && token.typ != exports.EnumToken.CommentTokenType) {
                            if (token.typ == exports.EnumToken.IdenTokenType && this.config.keywords.includes(token.val)) {
                                if (tokens.length == 0) {
                                    tokens.push([]);
                                    current++;
                                }
                                tokens[current].push(token);
                            }
                            // @ts-ignore
                            if (token.typ == exports.EnumToken.LiteralTokenType && token.val == this.config.separator) {
                                tokens.push([]);
                                current++;
                                continue;
                            }
                            isValid = false;
                            break;
                        }
                    }
                    if (isValid && tokens.length > 0) {
                        this.declarations.delete(this.config.shorthand);
                        for (const values of tokens) {
                            this.config.properties.forEach((property, index) => {
                                if (!this.declarations.has(property)) {
                                    this.declarations.set(property, {
                                        typ: exports.EnumToken.DeclarationNodeType,
                                        nam: property,
                                        val: []
                                    });
                                }
                                while (index > 0 && index >= values.length) {
                                    if (index > 1) {
                                        index %= 2;
                                    }
                                    else {
                                        index = 0;
                                        break;
                                    }
                                }
                                // @ts-ignore
                                const val = this.declarations.get(property).val;
                                if (val.length > 0) {
                                    val.push({ typ: exports.EnumToken.WhitespaceTokenType });
                                }
                                val.push({ ...values[index] });
                            });
                        }
                    }
                    this.declarations.set(declaration.nam, declaration);
                    return this;
                }
            }
            this.declarations.set(declaration.nam, declaration);
            return this;
        }
        isShortHand() {
            if (this.declarations.has(this.config.shorthand)) {
                return this.declarations.size == 1;
            }
            return this.config.properties.length == this.declarations.size;
        }
        [Symbol.iterator]() {
            let iterator;
            const declarations = this.declarations;
            if (declarations.size < this.config.properties.length) {
                const values = [...declarations.values()];
                if (this.isShortHand()) {
                    const val = values[0].val.reduce((acc, curr) => {
                        if (![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType].includes(curr.typ)) {
                            acc.push(curr);
                        }
                        return acc;
                    }, []);
                    values[0].val = val.reduce((acc, curr) => {
                        if (acc.length > 0) {
                            acc.push({ typ: exports.EnumToken.WhitespaceTokenType });
                        }
                        acc.push(curr);
                        return acc;
                    }, []);
                }
                return values[Symbol.iterator]();
            }
            else {
                const values = [];
                this.config.properties.forEach((property) => {
                    let index = 0;
                    // @ts-ignore
                    for (const token of this.declarations.get(property).val) {
                        if (token.typ == exports.EnumToken.WhitespaceTokenType) {
                            continue;
                        }
                        if (values.length == index) {
                            values.push([]);
                        }
                        values[index].push(token);
                        index++;
                    }
                });
                dedup(values);
                iterator = [{
                        typ: exports.EnumToken.DeclarationNodeType,
                        nam: this.config.shorthand,
                        val: values.reduce((acc, curr) => {
                            if (curr.length > 1) {
                                const k = curr.length * 2 - 1;
                                let i = 1;
                                while (i < k) {
                                    curr.splice(i, 0, { typ: exports.EnumToken.WhitespaceTokenType });
                                    i += 2;
                                }
                            }
                            if (acc.length > 0) {
                                // @ts-ignore
                                acc.push({ typ: exports.EnumToken.LiteralTokenType, val: this.config.separator });
                            }
                            acc.push(...curr);
                            return acc;
                        }, [])
                    }][Symbol.iterator]();
                // return {
                //     next() {
                //
                //         return iterator.next();
                //     }
                // }
            }
            return iterator;
            // return {
            //     next() {
            //
            //         return iterator.next();
            //     }
            // }
        }
    }

    const propertiesConfig = getConfig$1();
    class PropertyMap {
        config;
        declarations;
        requiredCount;
        pattern;
        constructor(config) {
            const values = Object.values(config.properties);
            this.requiredCount = values.reduce((acc, curr) => curr.required ? ++acc : acc, 0) || values.length;
            this.config = config;
            this.declarations = new Map;
            this.pattern = config.pattern.split(/\s/);
        }
        add(declaration) {
            if (declaration.nam == this.config.shorthand) {
                this.declarations = new Map;
                this.declarations.set(declaration.nam, declaration);
                this.matchTypes(declaration);
            }
            else {
                const separator = this.config.separator != null ? {
                    ...this.config.separator,
                    // @ts-ignore
                    typ: exports.EnumToken[this.config.separator.typ]
                } : null;
                // expand shorthand
                if (declaration.nam != this.config.shorthand && this.declarations.has(this.config.shorthand)) {
                    const tokens = {};
                    const values = [];
                    // @ts-ignore
                    this.declarations.get(this.config.shorthand).val.slice().reduce((acc, curr) => {
                        // @ts-ignore
                        if (separator != null && separator.typ == curr.typ && separator.val == curr.val) {
                            acc.push([]);
                            return acc;
                        }
                        // @ts-ignore
                        acc.at(-1).push(curr);
                        return acc;
                    }, [[]]).
                        // @ts-ignore
                        reduce((acc, list, current) => {
                        values.push(...this.pattern.reduce((acc, property) => {
                            // let current: number = 0;
                            const props = this.config.properties[property];
                            for (let i = 0; i < acc.length; i++) {
                                if (acc[i].typ == exports.EnumToken.CommentTokenType || acc[i].typ == exports.EnumToken.WhitespaceTokenType) {
                                    acc.splice(i, 1);
                                    i--;
                                    continue;
                                }
                                // @ts-ignore
                                if (('propertyName' in acc[i] && acc[i].propertyName == property) || matchType(acc[i], props)) {
                                    if ('prefix' in props && props.previous != null && !(props.previous in tokens)) {
                                        return acc;
                                    }
                                    if (!(property in tokens)) {
                                        tokens[property] = [[acc[i]]];
                                    }
                                    else {
                                        if (current == tokens[property].length) {
                                            tokens[property].push([acc[i]]);
                                        }
                                        else {
                                            tokens[property][current].push({ typ: exports.EnumToken.WhitespaceTokenType }, acc[i]);
                                        }
                                    }
                                    acc.splice(i, 1);
                                    i--;
                                    // @ts-ignore
                                    if ('prefix' in props && acc[i]?.typ == exports.EnumToken[props.prefix.typ]) {
                                        // @ts-ignore
                                        if (acc[i].typ == exports.EnumToken[props.prefix.typ] && acc[i].val == this.config.properties[property].prefix.val) {
                                            acc.splice(i, 1);
                                            i--;
                                        }
                                    }
                                    if (props.multiple) {
                                        continue;
                                    }
                                    return acc;
                                }
                                else {
                                    if (property in tokens && tokens[property].length > current) {
                                        return acc;
                                    }
                                }
                            }
                            if (property in tokens && tokens[property].length > current) {
                                return acc;
                            }
                            // default
                            if (props.default.length > 0) {
                                const defaults = parseString(props.default[0]);
                                if (!(property in tokens)) {
                                    tokens[property] = [
                                        [...defaults]
                                    ];
                                }
                                else {
                                    if (current == tokens[property].length) {
                                        tokens[property].push([]);
                                        tokens[property][current].push(...defaults);
                                    }
                                    else {
                                        tokens[property][current].push({ typ: exports.EnumToken.WhitespaceTokenType }, ...defaults);
                                    }
                                }
                            }
                            return acc;
                        }, list));
                        return values;
                    }, []);
                    if (values.length == 0) {
                        this.declarations = Object.entries(tokens).reduce((acc, curr) => {
                            acc.set(curr[0], {
                                typ: exports.EnumToken.DeclarationNodeType,
                                nam: curr[0],
                                val: curr[1].reduce((acc, curr) => {
                                    if (acc.length > 0) {
                                        acc.push({ ...separator });
                                    }
                                    acc.push(...curr);
                                    return acc;
                                }, [])
                            });
                            return acc;
                        }, new Map);
                    }
                }
                // @ts-ignore
                const config = propertiesConfig.properties[declaration.nam];
                let property = declaration.nam;
                if (config != null) {
                    property = config.shorthand;
                    let value = this.declarations.get(property);
                    if (!(value instanceof PropertySet)) {
                        // @ts-ignore
                        this.declarations.set(property, new PropertySet(propertiesConfig.properties[config.shorthand]));
                        // Token[]
                        if (value != null) {
                            // @ts-ignore
                            this.declarations.get(property).add(value);
                        }
                    }
                    this.declarations.get(property).add(declaration);
                }
                else {
                    this.declarations.set(declaration.nam, declaration);
                }
            }
            return this;
        }
        matchTypes(declaration) {
            const patterns = this.pattern.slice();
            const values = [...declaration.val];
            let i;
            let j;
            const map = new Map;
            for (i = 0; i < patterns.length; i++) {
                for (j = 0; j < values.length; j++) {
                    if (!map.has(patterns[i])) {
                        // @ts-ignore
                        map.set(patterns[i], this.config.properties?.[patterns[i]]?.constraints?.mapping?.max ?? 1);
                    }
                    let count = map.get(patterns[i]);
                    if (count > 0 && matchType(values[j], this.config.properties[patterns[i]])) {
                        Object.defineProperty(values[j], 'propertyName', {
                            enumerable: false,
                            writable: true,
                            value: patterns[i]
                        });
                        map.set(patterns[i], --count);
                        values.splice(j--, 1);
                    }
                }
            }
            if (this.config.set != null) {
                for (const [key, val] of Object.entries(this.config.set)) {
                    if (map.has(key)) {
                        for (const v of val) {
                            // missing
                            if (map.get(v) == 1) {
                                let i = declaration.val.length;
                                while (i--) {
                                    // @ts-ignore
                                    if (declaration.val[i].propertyName == key) {
                                        const val = { ...declaration.val[i] };
                                        Object.defineProperty(val, 'propertyName', {
                                            enumerable: false,
                                            writable: true,
                                            value: v
                                        });
                                        declaration.val.splice(i, 0, val, { typ: exports.EnumToken.WhitespaceTokenType });
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        [Symbol.iterator]() {
            let iterable;
            let requiredCount = 0;
            let property;
            let isShorthand = true;
            for (property of Object.keys(this.config.properties)) {
                if (this.config.properties[property].required) {
                    if (!this.declarations.has(property)) {
                        isShorthand = false;
                        break;
                    }
                    else {
                        const val = this.declarations.get(property);
                        if (val instanceof PropertySet && !val.isShortHand()) {
                            isShorthand = false;
                            break;
                        }
                        else {
                            requiredCount++;
                        }
                    }
                }
            }
            if (requiredCount == 0) {
                requiredCount = this.declarations.size;
            }
            if (!isShorthand || requiredCount < this.requiredCount) {
                if (isShorthand && this.declarations.has(this.config.shorthand)) {
                    const cache = new Map();
                    const removeDefaults = (declaration) => {
                        let i;
                        let t;
                        let map = new Map();
                        let value = [];
                        let values = [];
                        // @ts-ignore
                        let typ = (exports.EnumToken[this.config.separator?.typ] ?? exports.EnumToken.CommaTokenType);
                        // @ts-ignore
                        const sep = this.config.separator == null ? null : { ...this.config.separator, typ: exports.EnumToken[this.config.separator.typ] };
                        // @ts-ignore
                        const separator = this.config.separator ? renderToken({ ...this.config.separator, typ: exports.EnumToken[this.config.separator.typ] }) : ',';
                        this.matchTypes(declaration);
                        values.push(value);
                        for (i = 0; i < declaration.val.length; i++) {
                            t = declaration.val[i];
                            if (!cache.has(t)) {
                                cache.set(t, renderToken(t, { minify: true }));
                            }
                            if (t.typ == typ && separator == cache.get(t)) {
                                this.removeDefaults(map, value);
                                value = [];
                                values.push(value);
                                map.clear();
                                continue;
                            }
                            value.push(t);
                            // @ts-ignore
                            if ('propertyName' in t) {
                                // @ts-ignore
                                if (!map.has(t.propertyName)) {
                                    // @ts-ignore
                                    map.set(t.propertyName, { t: [t], value: [cache.get(t)] });
                                }
                                else {
                                    // @ts-ignore
                                    const v = map.get(t.propertyName);
                                    v.t.push(t);
                                    v.value.push(cache.get(t));
                                }
                            }
                        }
                        this.removeDefaults(map, value);
                        declaration.val = values.reduce((acc, curr) => {
                            if (sep != null && acc.length > 0) {
                                acc.push({ ...sep });
                            }
                            for (const cr of curr) {
                                if (cr.typ == exports.EnumToken.WhitespaceTokenType && acc.at(-1)?.typ == cr.typ) {
                                    continue;
                                }
                                acc.push(cr);
                            }
                            return acc;
                        }, []);
                        while (declaration.val.at(-1)?.typ == exports.EnumToken.WhitespaceTokenType) {
                            declaration.val.pop();
                        }
                        while (declaration.val.at(0)?.typ == exports.EnumToken.WhitespaceTokenType) {
                            declaration.val.shift();
                        }
                        return declaration;
                    };
                    const values = [...this.declarations.values()].reduce((acc, curr) => {
                        if (curr instanceof PropertySet) {
                            acc.push(...curr);
                        }
                        else {
                            acc.push(curr);
                        }
                        return acc;
                    }, []);
                    let isImportant = false;
                    const filtered = values.map(removeDefaults).filter((x) => x.val.filter((t) => {
                        if (t.typ == exports.EnumToken.ImportantTokenType) {
                            isImportant = true;
                        }
                        return ![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.ImportantTokenType].includes(t.typ);
                    }).length > 0);
                    if (filtered.length == 0 && this.config.default.length > 0) {
                        filtered.push({
                            typ: exports.EnumToken.DeclarationNodeType,
                            nam: this.config.shorthand,
                            val: parseString(this.config.default[0])
                        });
                        if (isImportant) {
                            filtered[0].val.push({
                                typ: exports.EnumToken.ImportantTokenType
                            });
                        }
                    }
                    return (filtered.length > 0 ? filtered : values)[Symbol.iterator]();
                }
                for (const declaration of this.declarations.values()) {
                    if (declaration instanceof PropertySet) {
                        continue;
                    }
                    const config = declaration.nam == this.config.shorthand ? this.config : this.config.properties[declaration.nam] ?? this.config;
                    if (!('mapping' in config)) {
                        continue;
                    }
                    // @ts-ignore
                    for (const [key, val] of Object.entries(config.mapping)) {
                        const keys = parseString(key);
                        if (keys.length != declaration.val.length) {
                            continue;
                        }
                        if (eq(declaration.val, keys)) {
                            declaration.val = parseString(val);
                            break;
                        }
                    }
                }
                // @ts-ignore
                iterable = this.declarations.values();
            }
            else {
                let count = 0;
                let match;
                const separator = this.config.separator != null ? {
                    ...this.config.separator,
                    // @ts-ignore
                    typ: exports.EnumToken[this.config.separator.typ]
                } : null;
                const tokens = {};
                // @ts-ignore
                Object.entries(this.config.properties).reduce((acc, curr) => {
                    if (!this.declarations.has(curr[0])) {
                        if (curr[1].required) {
                            acc.push(curr[0]);
                        }
                        return acc;
                    }
                    let current = 0;
                    const props = this.config.properties[curr[0]];
                    const properties = this.declarations.get(curr[0]);
                    for (const declaration of [(properties instanceof PropertySet ? [...properties][0] : properties)]) {
                        // @ts-ignore
                        for (const val of declaration.val) {
                            // @ts-ignore
                            if (separator != null && separator.typ == val.typ && separator.val == val.val) {
                                current++;
                                if (tokens[curr[0]].length == current) {
                                    tokens[curr[0]].push([]);
                                }
                                continue;
                            }
                            if (val.typ == exports.EnumToken.WhitespaceTokenType || val.typ == exports.EnumToken.CommentTokenType) {
                                continue;
                            }
                            // @ts-ignore
                            if (props.multiple && props.separator != null &&
                                // @ts-ignore
                                exports.EnumToken[props.separator.typ] == val.typ &&
                                // @ts-ignore
                                props.separator.val == val.val) {
                                continue;
                            }
                            // @ts-ignore
                            match = val.typ == exports.EnumToken.CommentTokenType || matchType(val, curr[1]);
                            if (isShorthand) {
                                isShorthand = match;
                            }
                            // @ts-ignore
                            if (('propertyName' in val && val.propertyName == property) || match) {
                                if (!(curr[0] in tokens)) {
                                    tokens[curr[0]] = [[]];
                                }
                                // is default value
                                tokens[curr[0]][current].push(val);
                            }
                            else {
                                acc.push(curr[0]);
                                break;
                            }
                        }
                    }
                    if (count == 0) {
                        count = current;
                    }
                    return acc;
                }, []);
                count++;
                if (!isShorthand || Object.entries(this.config.properties).some((entry) => {
                    // missing required property
                    return entry[1].required && !(entry[0] in tokens);
                }) ||
                    // @ts-ignore
                    !Object.values(tokens).every((v) => v.filter((t) => t.typ != exports.EnumToken.CommentTokenType).length == count)) {
                    // @ts-ignore
                    iterable = this.declarations.values();
                }
                else {
                    let values = Object.entries(tokens).reduce((acc, curr) => {
                        const props = this.config.properties[curr[0]];
                        for (let i = 0; i < curr[1].length; i++) {
                            if (acc.length == i) {
                                acc.push([]);
                            }
                            let values = curr[1][i].reduce((acc, curr) => {
                                if (acc.length > 0) {
                                    acc.push({ typ: exports.EnumToken.WhitespaceTokenType });
                                }
                                acc.push(curr);
                                return acc;
                            }, []);
                            // @todo remove renderToken call
                            if (props.default.includes(curr[1][i].reduce((acc, curr) => acc + renderToken(curr) + ' ', '').trimEnd())) {
                                if (!this.config.properties[curr[0]].required) {
                                    continue;
                                }
                            }
                            // remove default values
                            let doFilterDefault = true;
                            if (curr[0] in propertiesConfig.properties) {
                                for (let v of values) {
                                    if (![exports.EnumToken.WhitespaceTokenType, exports.EnumToken.CommentTokenType, exports.EnumToken.IdenTokenType].includes(v.typ)
                                        || (v.typ == exports.EnumToken.IdenTokenType && !this.config.properties[curr[0]].default.includes(v.val))) {
                                        doFilterDefault = false;
                                        break;
                                    }
                                }
                            }
                            // remove default values
                            const filtered = values.filter((val) => {
                                if (val.typ == exports.EnumToken.WhitespaceTokenType || val.typ == exports.EnumToken.CommentTokenType) {
                                    return false;
                                }
                                return !doFilterDefault || !(val.typ == exports.EnumToken.IdenTokenType && props.default.includes(val.val));
                            });
                            if (filtered.length > 0 || !(this.requiredCount == requiredCount && this.config.properties[curr[0]].required)) {
                                values = filtered;
                            }
                            if (values.length > 0) {
                                if ('mapping' in props) {
                                    // @ts-ignore
                                    if (!('constraints' in props) || !('max' in props.constraints) || values.length <= props.constraints.mapping.max) {
                                        let i = values.length;
                                        while (i--) {
                                            // @ts-ignore
                                            if (values[i].typ == exports.EnumToken.IdenTokenType && values[i].val in props.mapping) {
                                                // @ts-ignore
                                                values.splice(i, 1, ...parseString(props.mapping[values[i].val]));
                                            }
                                        }
                                    }
                                }
                                if ('prefix' in props) {
                                    // @ts-ignore
                                    acc[i].push({ ...props.prefix, typ: exports.EnumToken[props.prefix.typ] });
                                }
                                else if (acc[i].length > 0) {
                                    acc[i].push({ typ: exports.EnumToken.WhitespaceTokenType });
                                }
                                acc[i].push(...values.reduce((acc, curr) => {
                                    if (acc.length > 0) {
                                        // @ts-ignore
                                        acc.push({
                                            ...((props.separator && {
                                                ...props.separator,
                                                // @ts-ignore
                                                typ: exports.EnumToken[props.separator.typ]
                                            }) ?? { typ: exports.EnumToken.WhitespaceTokenType })
                                        });
                                    }
                                    // @ts-ignore
                                    acc.push(curr);
                                    return acc;
                                }, []));
                            }
                        }
                        return acc;
                    }, []).reduce((acc, curr) => {
                        if (acc.length > 0) {
                            acc.push({ ...separator });
                        }
                        if (curr.length == 0 && this.config.default.length > 0) {
                            curr.push(...parseString(this.config.default[0]).reduce((acc, curr) => {
                                if (acc.length > 0) {
                                    acc.push({ typ: exports.EnumToken.WhitespaceTokenType });
                                }
                                acc.push(curr);
                                return acc;
                            }, []));
                        }
                        acc.push(...curr);
                        return acc;
                    }, []);
                    if (this.config.mapping != null) {
                        const val = values.reduce((acc, curr) => acc + renderToken(curr, {
                            removeComments: true,
                            minify: true
                        }), '');
                        if (val in this.config.mapping) {
                            values.length = 0;
                            values.push({
                                typ: ['"', "'"].includes(val.charAt(0)) ? exports.EnumToken.StringTokenType : exports.EnumToken.IdenTokenType,
                                // @ts-ignore
                                val: this.config.mapping[val]
                            });
                        }
                    }
                    // @ts-ignore
                    if (values.length == 1 &&
                        typeof values[0].val == 'string' &&
                        this.config.default.includes(values[0].val.toLowerCase()) &&
                        this.config.default[0] != values[0].val.toLowerCase()) {
                        // @ts-ignore/
                        values = parseString(this.config.default[0]);
                    }
                    iterable = [{
                            typ: exports.EnumToken.DeclarationNodeType,
                            nam: this.config.shorthand,
                            val: values
                        }][Symbol.iterator]();
                }
            }
            const iterators = [];
            return {
                // @ts-ignore
                next() {
                    let v = iterable.next();
                    while (v.done || v.value instanceof PropertySet) {
                        if (v.value instanceof PropertySet) {
                            // @ts-ignore
                            iterators.push(iterable);
                            iterable = v.value[Symbol.iterator]();
                            v = iterable.next();
                        }
                        if (v.done) {
                            if (iterators.length > 0) {
                                // @ts-ignore
                                iterable = iterators.pop();
                                v = iterable.next();
                            }
                            if (v.done && iterators.length == 0) {
                                break;
                            }
                        }
                    }
                    return v;
                }
            };
        }
        removeDefaults(map, value) {
            for (const [key, val] of map) {
                const config = this.config.properties[key];
                if (config == null) {
                    continue;
                }
                const v = val.value.join(' ');
                if (config.default.includes(v) || (value.length == 1 && this.config.default.includes(v))) {
                    for (const token of value) {
                        if (val.t.includes(token)) {
                            let index = value.indexOf(token);
                            value.splice(index, 1);
                            if (config.prefix != null) {
                                while (index-- > 0) {
                                    if (value[index].typ == exports.EnumToken.WhitespaceTokenType) {
                                        continue;
                                    }
                                    // @ts-ignore@
                                    if (value[index].typ == exports.EnumToken[config.prefix.typ] &&
                                        // @ts-ignore
                                        value[index].val == config.prefix.val) {
                                        value.splice(index, 1);
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    const config = getConfig$1();
    class PropertyList {
        options = { removeDuplicateDeclarations: true, computeShorthand: true };
        declarations;
        constructor(options = {}) {
            this.options = options;
            this.declarations = new Map;
        }
        set(nam, value) {
            return this.add({
                typ: exports.EnumToken.DeclarationNodeType,
                nam,
                val: Array.isArray(value) ? value : parseString(String(value))
            });
        }
        add(declaration) {
            if (declaration.typ != exports.EnumToken.DeclarationNodeType || !this.options.removeDuplicateDeclarations) {
                this.declarations.set(Number(Math.random().toString().slice(2)).toString(36), declaration);
                return this;
            }
            if (!this.options.computeShorthand) {
                this.declarations.set(declaration.nam, declaration);
                return this;
            }
            let propertyName = declaration.nam;
            let shortHandType;
            let shorthand;
            if (propertyName in config.properties) {
                // @ts-ignore
                if ('map' in config.properties[propertyName]) {
                    shortHandType = 'map';
                    // @ts-ignore
                    shorthand = config.properties[propertyName].map;
                }
                else {
                    shortHandType = 'set';
                    // @ts-ignore
                    shorthand = config.properties[propertyName].shorthand;
                }
            }
            else if (propertyName in config.map) {
                shortHandType = 'map';
                // @ts-ignore
                shorthand = config.map[propertyName].shorthand;
            }
            // @ts-ignore
            if (shortHandType == 'map') {
                // @ts-ignore
                if (!this.declarations.has(shorthand)) {
                    // @ts-ignore
                    this.declarations.set(shorthand, new PropertyMap(config.map[shorthand]));
                }
                // @ts-ignore
                this.declarations.get(shorthand).add(declaration);
                // return this;
            }
            // @ts-ignore
            else if (shortHandType == 'set') {
                // @ts-ignore
                // const shorthand: string = <string>config.properties[propertyName].shorthand;
                if (!this.declarations.has(shorthand)) {
                    // @ts-ignore
                    this.declarations.set(shorthand, new PropertySet(config.properties[shorthand]));
                }
                // @ts-ignore
                this.declarations.get(shorthand).add(declaration);
                // return this;
            }
            else {
                this.declarations.set(propertyName, declaration);
            }
            return this;
        }
        [Symbol.iterator]() {
            let iterator = this.declarations.values();
            const iterators = [];
            return {
                next() {
                    let value = iterator.next();
                    while ((value.done && iterators.length > 0) ||
                        value.value instanceof PropertySet ||
                        value.value instanceof PropertyMap) {
                        if (value.value instanceof PropertySet || value.value instanceof PropertyMap) {
                            iterators.unshift(iterator);
                            // @ts-ignore
                            iterator = value.value[Symbol.iterator]();
                            value = iterator.next();
                        }
                        if (value.done && iterators.length > 0) {
                            iterator = iterators.shift();
                            value = iterator.next();
                        }
                    }
                    return value;
                }
            };
        }
    }

    class ComputeShorthandFeature {
        static get ordering() {
            return 2;
        }
        static register(options) {
            if (options.computeShorthand) {
                for (const feature of options.features) {
                    if (feature instanceof ComputeShorthandFeature) {
                        return;
                    }
                }
                // @ts-ignore
                options.features.push(new ComputeShorthandFeature(options));
            }
        }
        run(ast, options = {}, parent, context) {
            // @ts-ignore
            const j = ast.chi.length;
            let k = 0;
            let properties = new PropertyList(options);
            // @ts-ignore
            for (; k < j; k++) {
                // @ts-ignore
                const node = ast.chi[k];
                if (node.typ == exports.EnumToken.CommentNodeType || node.typ == exports.EnumToken.DeclarationNodeType) {
                    properties.add(node);
                    continue;
                }
                break;
            }
            // @ts-ignore
            ast.chi = [...properties].concat(ast.chi.slice(k));
            return ast;
        }
    }

    class ComputeCalcExpressionFeature {
        static get ordering() {
            return 1;
        }
        static register(options) {
            if (options.computeCalcExpression) {
                for (const feature of options.features) {
                    if (feature instanceof ComputeCalcExpressionFeature) {
                        return;
                    }
                }
                // @ts-ignore
                options.features.push(new ComputeCalcExpressionFeature());
            }
        }
        run(ast) {
            if (!('chi' in ast)) {
                return;
            }
            // @ts-ignore
            for (const node of ast.chi) {
                if (node.typ != exports.EnumToken.DeclarationNodeType) {
                    continue;
                }
                const set = new Set;
                for (const { value, parent } of walkValues(node.val)) {
                    if (value != null && value.typ == exports.EnumToken.FunctionTokenType && value.val == 'calc') {
                        if (!set.has(parent)) {
                            set.add(value);
                            value.chi = evaluate(value.chi);
                            if (value.chi.length == 1 && value.chi[0].typ != exports.EnumToken.BinaryExpressionTokenType) {
                                if (parent != null) {
                                    if (parent.typ == exports.EnumToken.BinaryExpressionTokenType) {
                                        if (parent.l == value) {
                                            parent.l = value.chi[0];
                                        }
                                        else {
                                            parent.r = value.chi[0];
                                        }
                                    }
                                    else {
                                        for (let i = 0; i < parent.chi.length; i++) {
                                            if (parent.chi[i] == value) {
                                                parent.chi.splice(i, 1, value.chi[0]);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    var allFeatures = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ComputeCalcExpressionFeature: ComputeCalcExpressionFeature,
        ComputePrefixFeature: ComputePrefixFeature,
        ComputeShorthandFeature: ComputeShorthandFeature,
        InlineCssVariablesFeature: InlineCssVariablesFeature
    });

    const combinators = ['+', '>', '~', '||', '|'];
    const definedPropertySettings = { configurable: true, enumerable: false, writable: true };
    const notEndingWith = ['(', '['].concat(combinators);
    // @ts-ignore
    const features = Object.values(allFeatures).sort((a, b) => a.ordering - b.ordering);
    function minify(ast, options = {}, recursive = false, errors, nestingContent, context = {}) {
        if (!('nodes' in context)) {
            context.nodes = new Set;
        }
        if (context.nodes.has(ast)) {
            return ast;
        }
        context.nodes.add(ast);
        if (!('features' in options)) {
            // @ts-ignore
            options = {
                removeDuplicateDeclarations: true,
                computeShorthand: true,
                computeCalcExpression: true,
                removePrefix: false,
                features: [], ...options
            };
            // @ts-ignore
            for (const feature of features) {
                feature.register(options);
            }
        }
        function reducer(acc, curr, index, array) {
            // trim :is()
            if (array.length == 1 && array[0][0] == ':is(' && array[0].at(-1) == ')') {
                curr = curr.slice(1, -1);
            }
            if (curr[0] == '&') {
                if (curr[1] == ' ' && !isIdent(curr[2]) && !isFunction(curr[2])) {
                    curr.splice(0, 2);
                }
                else if (combinators.includes(curr[1])) {
                    curr.shift();
                }
            }
            else if (ast.typ == exports.EnumToken.RuleNodeType && (isIdent(curr[0]) || isFunction(curr[0]))) {
                curr.unshift('&', ' ');
            }
            acc.push(curr.join(''));
            return acc;
        }
        // @ts-ignore
        if ('chi' in ast && ast.chi.length > 0) {
            if (!nestingContent) {
                nestingContent = options.nestingRules && ast.typ == exports.EnumToken.RuleNodeType;
            }
            let i = 0;
            let previous;
            let node;
            let nodeIndex;
            // @ts-ignore
            for (; i < ast.chi.length; i++) {
                // @ts-ignore
                if (ast.chi[i].typ == exports.EnumToken.CommentNodeType) {
                    continue;
                }
                // @ts-ignore
                node = ast.chi[i];
                // @ts-ignore
                if (previous == node) {
                    // @ts-ignore
                    ast.chi.splice(i, 1);
                    i--;
                    continue;
                }
                if (node.typ == exports.EnumToken.AtRuleNodeType && node.nam == 'font-face') {
                    continue;
                }
                if (node.typ == exports.EnumToken.AtRuleNodeType) {
                    if (node.nam == 'media' && node.val == 'all') {
                        // @ts-ignore
                        ast.chi?.splice(i, 1, ...node.chi);
                        i--;
                        continue;
                    }
                    // @ts-ignore
                    if (previous?.typ == exports.EnumToken.AtRuleNodeType &&
                        previous.nam == node.nam &&
                        previous.val == node.val) {
                        if ('chi' in node) {
                            // @ts-ignore
                            previous.chi.push(...node.chi);
                        }
                        ast?.chi?.splice(i--, 1);
                        continue;
                    }
                    // @ts-ignore
                    if (!hasDeclaration(node)) {
                        minify(node, options, recursive, errors, nestingContent, context);
                    }
                    previous = node;
                    nodeIndex = i;
                    continue;
                }
                // @ts-ignore
                if (node.typ == exports.EnumToken.RuleNodeType) {
                    reduceRuleSelector(node);
                    let wrapper;
                    let match;
                    // @ts-ignore
                    if (options.nestingRules) {
                        // @ts-ignore
                        if (previous?.typ == exports.EnumToken.RuleNodeType) {
                            // @ts-ignore
                            reduceRuleSelector(previous);
                            // @ts-ignore
                            match = matchSelectors(previous.raw, node.raw, ast.typ, errors);
                            // @ts-ignore
                            if (match != null) {
                                // @ts-ignore
                                wrapper = wrapNodes(previous, node, match, ast, reducer, i, nodeIndex);
                                nodeIndex = i - 1;
                                // @ts-ignore
                                previous = ast.chi[nodeIndex];
                            }
                        }
                        // @ts-ignore
                        if (wrapper != null) {
                            // @ts-ignore
                            while (i < ast.chi.length) {
                                // @ts-ignore
                                const nextNode = ast.chi[i];
                                // @ts-ignore
                                if (nextNode.typ != exports.EnumToken.RuleNodeType) {
                                    break;
                                }
                                reduceRuleSelector(nextNode);
                                // @ts-ignore
                                match = matchSelectors(wrapper.raw, nextNode.raw, ast.typ, errors);
                                // @ts-ignore
                                if (match == null) {
                                    break;
                                }
                                // @ts-ignore
                                wrapper = wrapNodes(wrapper, nextNode, match, ast, reducer, i, nodeIndex);
                            }
                            nodeIndex = --i;
                            // @ts-ignore
                            previous = ast.chi[nodeIndex];
                            minify(wrapper, options, recursive, errors, nestingContent, context);
                            continue;
                        }
                        // @ts-ignore
                        else if (node.optimized != null &&
                            // @ts-ignore
                            node.optimized.match &&
                            // @ts-ignore
                            node.optimized.selector.length > 1) {
                            // @ts-ignore
                            wrapper = { ...node, chi: [], sel: node.optimized.optimized[0] };
                            // @ts-ignore
                            Object.defineProperty(wrapper, 'raw', {
                                ...definedPropertySettings,
                                // @ts-ignore
                                value: [[node.optimized.optimized[0]]]
                            });
                            // @ts-ignore
                            node.sel = node.optimized.selector.reduce(reducer, []).join(',');
                            // @ts-ignore
                            node.raw = node.optimized.selector.slice();
                            // @ts-ignore
                            wrapper.chi.push(node);
                            // @ts-ignore
                            ast.chi.splice(i, 1, wrapper);
                            node = wrapper;
                        }
                    }
                    // @ts-ignore
                    else if (node.optimized?.match) {
                        let wrap = true;
                        // @ts-ignore
                        const selector = node.optimized.selector.reduce((acc, curr) => {
                            if (curr[0] == '&' && curr.length > 1) {
                                if (curr[1] == ' ') {
                                    curr.splice(0, 2);
                                }
                                else {
                                    if (ast.typ != exports.EnumToken.RuleNodeType && combinators.includes(curr[1])) {
                                        wrap = false;
                                    }
                                    else {
                                        curr.splice(0, 1);
                                    }
                                }
                            }
                            else if (combinators.includes(curr[0])) {
                                curr.unshift('&');
                                wrap = false;
                            }
                            // @ts-ignore
                            acc.push(curr);
                            return acc;
                        }, []);
                        if (!wrap) {
                            wrap = selector.some((s) => s[0] != '&');
                        }
                        let rule = selector.map(s => {
                            if (s[0] == '&') {
                                // @ts-ignore
                                s[0] = node.optimized.optimized[0];
                            }
                            return s.join('');
                        }).join(',');
                        // @ts-ignore
                        let sel = wrap ? node.optimized.optimized[0] + `:is(${rule})` : rule;
                        if (rule.includes('&')) {
                            // @ts-ignore
                            rule = replaceCompound(rule, node.optimized.optimized[0]);
                        }
                        if (sel.length < node.sel.length) {
                            node.sel = sel;
                        }
                    }
                }
                // @ts-ignore
                if (previous != null) {
                    // @ts-ignore
                    if ('chi' in previous && ('chi' in node)) {
                        // @ts-ignore
                        if (previous.typ == node.typ) {
                            let shouldMerge = true;
                            // @ts-ignore
                            let k = previous.chi.length;
                            while (k-- > 0) {
                                // @ts-ignore
                                if (previous.chi[k].typ == exports.EnumToken.CommentNodeType) {
                                    continue;
                                }
                                // @ts-ignore
                                shouldMerge = previous.chi[k].typ == exports.EnumToken.DeclarationNodeType;
                                break;
                            }
                            if (shouldMerge) {
                                // @ts-ignore
                                if (((node.typ == exports.EnumToken.RuleNodeType || node.typ == exports.EnumToken.KeyFrameRuleNodeType) && node.sel == previous.sel) ||
                                    // @ts-ignore
                                    (node.typ == exports.EnumToken.AtRuleNodeType) && node.val != 'font-face' && node.val == previous.val) {
                                    // @ts-ignore
                                    node.chi.unshift(...previous.chi);
                                    // @ts-ignore
                                    ast.chi.splice(nodeIndex, 1);
                                    // @ts-ignore
                                    if (!hasDeclaration(node)) {
                                        // @ts-ignore
                                        // minifyRule(node, <MinifyOptions>options, ast, context);
                                        // } else {
                                        minify(node, options, recursive, errors, nestingContent, context);
                                    }
                                    i--;
                                    previous = node;
                                    nodeIndex = i;
                                    continue;
                                }
                                else if (node.typ == previous?.typ && [exports.EnumToken.KeyFrameRuleNodeType, exports.EnumToken.RuleNodeType].includes(node.typ)) {
                                    const intersect = diff(previous, node, reducer, options);
                                    if (intersect != null) {
                                        if (intersect.node1.chi.length == 0) {
                                            // @ts-ignore
                                            ast.chi.splice(i--, 1);
                                            // @ts-ignore
                                            // node = ast.chi[i];
                                        }
                                        else {
                                            // @ts-ignore
                                            ast.chi.splice(i--, 1, intersect.node1);
                                            // node = ast.chi intersect.node1;
                                        }
                                        if (intersect.node2.chi.length == 0) {
                                            // @ts-ignore
                                            ast.chi.splice(nodeIndex, 1, intersect.result);
                                            i--;
                                            // @ts-ignore
                                            if (nodeIndex == i) {
                                                nodeIndex = i;
                                            }
                                        }
                                        else {
                                            // @ts-ignore
                                            ast.chi.splice(nodeIndex, 1, intersect.result, intersect.node2);
                                            // @ts-ignore
                                            i = (nodeIndex ?? 0) + 1;
                                        }
                                        reduceRuleSelector(intersect.result);
                                        // @ts-ignore
                                        if (node != ast.chi[i]) {
                                            // @ts-ignore
                                            node = ast.chi[i];
                                        }
                                        previous = intersect.result;
                                        nodeIndex = i;
                                    }
                                }
                            }
                        }
                        // @ts-ignore
                        if (recursive && previous != node) {
                            // @ts-ignore
                            if (!hasDeclaration(previous)) {
                                // @ts-ignore
                                // minifyRule(previous, <MinifyOptions>options, ast, context);
                                // } else {
                                minify(previous, options, recursive, errors, nestingContent, context);
                            }
                        }
                    }
                    else {
                        if ('chi' in previous) {
                            // @ts-ignore
                            if (!hasDeclaration(previous)) {
                                // @ts-ignore
                                // minifyRule(previous, <MinifyOptions>options, ast, context);
                                // } else {
                                minify(previous, options, recursive, errors, nestingContent, context);
                            }
                        }
                    }
                }
                if (!nestingContent &&
                    // @ts-ignore
                    previous != null &&
                    // previous.optimized != null &&
                    previous.typ == exports.EnumToken.RuleNodeType &&
                    previous.sel.includes('&')) {
                    fixSelector(previous);
                }
                previous = node;
                nodeIndex = i;
            }
            // @ts-ignore
            if (recursive && node != null && ('chi' in node)) {
                // @ts-ignore
                if (!node.chi.some(n => n.typ == exports.EnumToken.DeclarationNodeType)) {
                    // @ts-ignore
                    if (!(node.typ == exports.EnumToken.AtRuleNodeType && node.nam != 'font-face')) {
                        minify(node, options, recursive, errors, nestingContent, context);
                    }
                }
            }
            if (!nestingContent &&
                // @ts-ignore
                node != null &&
                // previous.optimized != null &&
                node.typ == exports.EnumToken.RuleNodeType &&
                node.sel.includes('&')) {
                fixSelector(node);
            }
        }
        if (ast.typ == exports.EnumToken.StyleSheetNodeType) {
            let parent;
            let parents = [ast];
            while (parents.length > 0) {
                parent = parents.shift();
                // @ts-ignore
                for (let k = 0; k < parent.chi.length; k++) {
                    // @ts-ignore
                    const node = parent.chi[k];
                    if (!('chi' in node) || node.typ == exports.EnumToken.StyleSheetNodeType || (node.typ == exports.EnumToken.AtRuleNodeType && node.nam == 'font-face')) {
                        continue;
                    }
                    // @ts-ignore
                    if (node.chi.length > 0) {
                        parents.push(node);
                        Object.defineProperty(node, 'parent', { ...definedPropertySettings, value: parent });
                        for (const feature of options.features) {
                            feature.run(node, options, parent, context);
                        }
                    }
                    // @ts-ignore
                    if (options.removeEmpty && node.chi.length == 0) {
                        // @ts-ignore
                        parent.chi.splice(k, 1);
                        k--;
                    }
                }
            }
            for (const feature of options.features) {
                if ('cleanup' in feature) {
                    // @ts-ignore
                    feature.cleanup(ast, options, context);
                }
            }
        }
        return ast;
    }
    function reduceSelector(selector) {
        if (selector.length == 0) {
            return null;
        }
        selector = selector.reduce((acc, curr) => {
            // trim :is()
            // @ts-ignore
            if (curr.length > 0 && curr.at(-1).startsWith(':is(')) {
                // @ts-ignore
                const rules = splitRule(curr.at(-1).slice(4, -1)).map(x => {
                    if (x[0] == '&' && x.length > 1) {
                        return x.slice(x[1] == ' ' ? 2 : 1);
                    }
                    return x;
                });
                const part = curr.slice(0, -1);
                for (const rule of rules) {
                    acc.push(part.concat(rule));
                }
                return acc;
            }
            acc.push(curr);
            return acc;
        }, []);
        const optimized = [];
        const k = selector.reduce((acc, curr) => acc == 0 ? curr.length : (curr.length == 0 ? acc : Math.min(acc, curr.length)), 0);
        let i = 0;
        let j;
        let match;
        for (; i < k; i++) {
            const item = selector[0][i];
            match = true;
            for (j = 1; j < selector.length; j++) {
                if (item != selector[j][i]) {
                    match = false;
                    break;
                }
            }
            if (!match) {
                break;
            }
            optimized.push(item);
        }
        while (optimized.length > 0) {
            const last = optimized.at(-1);
            if ((last == ' ' || combinators.includes(last))) {
                optimized.pop();
                continue;
            }
            break;
        }
        selector.forEach((selector) => selector.splice(0, optimized.length));
        // combinator
        if (combinators.includes(optimized.at(-1))) {
            const combinator = optimized.pop();
            selector.forEach((selector) => selector.unshift(combinator));
        }
        let reducible = optimized.length == 1;
        if (optimized[0] == '&') {
            if (optimized[1] == ' ') {
                optimized.splice(0, 2);
            }
            // else if (combinators.includes(optimized[1])) {
            //
            // }
        }
        if (optimized.length == 0 ||
            (optimized[0].charAt(0) == '&' ||
                selector.length == 1)) {
            return {
                match: false,
                optimized,
                selector: selector.map((selector) => selector[0] == '&' && selector[1] == ' ' ? selector.slice(2) : (selector)),
                reducible: selector.length > 1 && selector.every((selector) => !combinators.includes(selector[0]))
            };
        }
        return {
            match: true,
            optimized,
            selector: selector.reduce((acc, curr) => {
                let hasCompound = true;
                if (hasCompound && curr.length > 0) {
                    hasCompound = !['&'].concat(combinators).includes(curr[0].charAt(0));
                }
                // @ts-ignore
                if (hasCompound && curr[0] == ' ') {
                    hasCompound = false;
                    curr.unshift('&');
                }
                if (curr.length == 0) {
                    curr.push('&');
                    hasCompound = false;
                }
                if (reducible) {
                    const chr = curr[0].charAt(0);
                    // @ts-ignore
                    reducible = chr == '.' || chr == ':' || isIdentStart(chr.codePointAt(0));
                }
                acc.push(hasCompound ? ['&'].concat(curr) : curr);
                return acc;
            }, []),
            reducible: selector.every((selector) => !['>', '+', '~', '&'].includes(selector[0]))
        };
    }
    function hasDeclaration(node) {
        // @ts-ignore
        for (let i = 0; i < node.chi?.length; i++) {
            // @ts-ignore
            if (node.chi[i].typ == exports.EnumToken.CommentNodeType) {
                continue;
            }
            // @ts-ignore
            return node.chi[i].typ == exports.EnumToken.DeclarationNodeType;
        }
        return true;
    }
    function splitRule(buffer) {
        const result = [[]];
        let str = '';
        for (let i = 0; i < buffer.length; i++) {
            let chr = buffer.charAt(i);
            if (isWhiteSpace(chr.charCodeAt(0))) {
                let k = i;
                while (k + 1 < buffer.length) {
                    if (isWhiteSpace(buffer[k + 1].charCodeAt(0))) {
                        k++;
                        continue;
                    }
                    break;
                }
                if (str !== '') {
                    // @ts-ignore
                    result.at(-1).push(str);
                    str = '';
                }
                // @ts-ignore
                if (result.at(-1).length > 0) {
                    // @ts-ignore
                    result.at(-1).push(' ');
                }
                i = k;
                continue;
            }
            if (chr == ',') {
                if (str !== '') {
                    // @ts-ignore
                    result.at(-1).push(str);
                    str = '';
                }
                result.push([]);
                continue;
            }
            if (chr == ':') {
                if (str !== '') {
                    // @ts-ignore
                    result.at(-1).push(str);
                    str = '';
                }
                if (buffer.charAt(i + 1) == ':') {
                    chr += buffer.charAt(++i);
                }
                str += chr;
                continue;
            }
            str += chr;
            if (chr == '\\') {
                str += buffer.charAt(++i);
                continue;
            }
            if (chr == '"' || chr == "'") {
                let k = i;
                while (++k < buffer.length) {
                    chr = buffer.charAt(k);
                    str += chr;
                    if (chr == '//') {
                        str += buffer.charAt(++k);
                        continue;
                    }
                    if (chr == buffer.charAt(i)) {
                        break;
                    }
                }
                continue;
            }
            if (chr == '(' || chr == '[') {
                const open = chr;
                const close = chr == '(' ? ')' : ']';
                let inParens = 1;
                let k = i;
                while (++k < buffer.length) {
                    chr = buffer.charAt(k);
                    if (chr == '\\') {
                        str += buffer.slice(k, k + 2);
                        k++;
                        continue;
                    }
                    str += chr;
                    if (chr == open) {
                        inParens++;
                    }
                    else if (chr == close) {
                        inParens--;
                    }
                    if (inParens == 0) {
                        break;
                    }
                }
                i = k;
            }
        }
        if (str !== '') {
            // @ts-ignore
            result.at(-1).push(str);
        }
        return result;
    }
    function matchSelectors(selector1, selector2, parentType, errors) {
        let match = [[]];
        const j = Math.min(selector1.reduce((acc, curr) => Math.min(acc, curr.length), selector1.length > 0 ? selector1[0].length : 0), selector2.reduce((acc, curr) => Math.min(acc, curr.length), selector2.length > 0 ? selector2[0].length : 0));
        let i = 0;
        let k;
        let l;
        let token;
        let matching = true;
        let matchFunction = 0;
        let inAttr = 0;
        for (; i < j; i++) {
            k = 0;
            token = selector1[0][i];
            for (; k < selector1.length; k++) {
                if (selector1[k][i] != token) {
                    matching = false;
                    break;
                }
            }
            if (matching) {
                l = 0;
                for (; l < selector2.length; l++) {
                    if (selector2[l][i] != token) {
                        matching = false;
                        break;
                    }
                }
            }
            if (!matching) {
                break;
            }
            if (token == ',') {
                match.push([]);
            }
            else {
                if (token.endsWith('(')) {
                    matchFunction++;
                }
                if (token.endsWith('[')) {
                    inAttr++;
                }
                else if (token == ')') {
                    matchFunction--;
                }
                else if (token == ']') {
                    inAttr--;
                }
                match.at(-1).push(token);
            }
        }
        // invalid function
        if (matchFunction != 0 || inAttr != 0) {
            return null;
        }
        if (parentType != exports.EnumToken.RuleNodeType) {
            for (const part of match) {
                if (part.length > 0 && combinators.includes(part[0].charAt(0))) {
                    return null;
                }
            }
        }
        if (match.length > 1) {
            errors?.push({
                action: 'ignore',
                message: `minify: unsupported multilevel matching\n${JSON.stringify({
                match,
                selector1,
                selector2
            }, null, 1)}`
            });
            return null;
        }
        for (const part of match) {
            while (part.length > 0) {
                const token = part.at(-1);
                if (token == ' ' || combinators.includes(token) || notEndingWith.includes(token.at(-1))) {
                    part.pop();
                    continue;
                }
                break;
            }
        }
        if (match.every(t => t.length == 0)) {
            return null;
        }
        if (eq([['&']], match)) {
            return null;
        }
        function reduce(acc, curr) {
            if (acc === null) {
                return null;
            }
            let hasCompoundSelector = true;
            curr = curr.slice(match[0].length);
            while (curr.length > 0) {
                if (curr[0] == ' ') {
                    hasCompoundSelector = false;
                    curr.unshift('&');
                    continue;
                }
                break;
            }
            // invalid function match
            if (curr.length > 0 && curr[0].endsWith('(') && curr.at(-1) != ')') {
                return null;
            }
            if (curr.length == 1 && combinators.includes(curr[0].charAt(0))) {
                return null;
            }
            if (hasCompoundSelector && curr.length > 0) {
                hasCompoundSelector = !['&'].concat(combinators).includes(curr[0].charAt(0));
            }
            if (curr[0] == ':is(') {
                let inFunction = 0;
                let canReduce = true;
                const isCompound = curr.reduce((acc, token, index) => {
                    if (index == 0) {
                        inFunction++;
                        canReduce = curr[1] == '&';
                    }
                    else if (token.endsWith('(')) {
                        if (inFunction == 0) {
                            canReduce = false;
                        }
                        inFunction++;
                    }
                    else if (token == ')') {
                        inFunction--;
                    }
                    else if (token == ',') {
                        if (!canReduce) {
                            canReduce = curr[index + 1] == '&';
                        }
                        acc.push([]);
                    }
                    else
                        acc.at(-1)?.push(token);
                    return acc;
                }, [[]]);
                if (inFunction > 0) {
                    canReduce = false;
                }
                if (canReduce) {
                    curr = isCompound.reduce((acc, curr) => {
                        if (acc.length > 0) {
                            acc.push(',');
                        }
                        acc.push(...curr);
                        return acc;
                    }, []);
                }
            }
            // @todo: check hasCompoundSelector && curr[0] == '&' && curr[1] == ' '
            acc.push(match.length == 0 ? ['&'] : (hasCompoundSelector && curr[0] != '&' && (curr.length == 0 || !combinators.includes(curr[0].charAt(0))) ? ['&'].concat(curr) : curr));
            return acc;
        }
        // @ts-ignore
        selector1 = selector1.reduce(reduce, []);
        // @ts-ignore
        selector2 = selector2.reduce(reduce, []);
        return selector1 == null || selector2 == null ? null : {
            eq: eq(selector1, selector2),
            match,
            selector1,
            selector2
        };
    }
    function fixSelector(node) {
        // @ts-ignore
        if (node.sel.includes('&')) {
            const attributes = parseString(node.sel);
            for (const attr of walkValues(attributes)) {
                if (attr.value.typ == exports.EnumToken.PseudoClassFuncTokenType && attr.value.val == ':is') {
                    let i = attr.value.chi.length;
                    while (i--) {
                        if (attr.value.chi[i].typ == exports.EnumToken.LiteralTokenType && attr.value.chi[i].val == '&') {
                            attr.value.chi.splice(i, 1);
                        }
                    }
                }
            }
            node.sel = attributes.reduce((acc, curr) => acc + renderToken(curr), '');
        }
    }
    function wrapNodes(previous, node, match, ast, reducer, i, nodeIndex) {
        // @ts-ignore
        let pSel = match.selector1.reduce(reducer, []).join(',');
        // @ts-ignore
        let nSel = match.selector2.reduce(reducer, []).join(',');
        // @ts-ignore
        const wrapper = { ...previous, chi: [], sel: match.match.reduce(reducer, []).join(',') };
        // @ts-ignore
        Object.defineProperty(wrapper, 'raw', {
            ...definedPropertySettings,
            // @ts-ignore
            value: match.match.map(t => t.slice())
        });
        if (pSel == '&' || pSel === '') {
            // @ts-ignore
            wrapper.chi.push(...previous.chi);
            // @ts-ignore
            if ((nSel == '&' || nSel === '')) {
                // @ts-ignore
                wrapper.chi.push(...node.chi);
            }
            else {
                // @ts-ignore
                wrapper.chi.push(node);
            }
        }
        else {
            // @ts-ignore
            wrapper.chi.push(previous, node);
        }
        // @ts-ignore
        ast.chi.splice(i, 1, wrapper);
        // @ts-ignore
        ast.chi.splice(nodeIndex, 1);
        // @ts-ignore
        previous.sel = pSel;
        // @ts-ignore
        previous.raw = match.selector1;
        // @ts-ignore
        node.sel = nSel;
        // @ts-ignore
        node.raw = match.selector2;
        reduceRuleSelector(wrapper);
        return wrapper;
    }
    function diff(n1, n2, reducer, options = {}) {
        let node1 = n1;
        let node2 = n2;
        let exchanged = false;
        if (node1.chi.length > node2.chi.length) {
            const t = node1;
            node1 = node2;
            node2 = t;
            exchanged = true;
        }
        let i = node1.chi.length;
        let j = node2.chi.length;
        if (i == 0 || j == 0) {
            // @ts-ignore
            return null;
        }
        // @ts-ignore
        const raw1 = node1.raw;
        // @ts-ignore
        const raw2 = node2.raw;
        if (raw1 != null && raw2 != null) {
            const prefixes1 = new Set;
            const prefixes2 = new Set;
            for (const token1 of raw1) {
                for (const t of token1) {
                    if (t[0] == ':') {
                        const matches = t.match(/::?-([a-z]+)-/);
                        if (matches == null) {
                            continue;
                        }
                        prefixes1.add(matches[1]);
                        if (prefixes1.size > 1) {
                            break;
                        }
                    }
                }
                if (prefixes1.size > 1) {
                    break;
                }
            }
            for (const token2 of raw2) {
                for (const t of token2) {
                    if (t[0] == ':') {
                        const matches = t.match(/::?-([a-z]+)-/);
                        if (matches == null) {
                            continue;
                        }
                        prefixes2.add(matches[1]);
                        if (prefixes2.size > 1) {
                            break;
                        }
                    }
                }
                if (prefixes2.size > 1) {
                    break;
                }
            }
            if (prefixes1.size != prefixes2.size) {
                return null;
            }
            for (const prefix of prefixes1) {
                if (!prefixes2.has(prefix)) {
                    return null;
                }
            }
        }
        // @ts-ignore
        node1 = { ...node1, chi: node1.chi.slice() };
        node2 = { ...node2, chi: node2.chi.slice() };
        if (raw1 != null) {
            Object.defineProperty(node1, 'raw', { ...definedPropertySettings, value: raw1 });
        }
        if (raw2 != null) {
            Object.defineProperty(node2, 'raw', { ...definedPropertySettings, value: raw2 });
        }
        const intersect = [];
        while (i--) {
            if (node1.chi[i].typ == exports.EnumToken.CommentNodeType) {
                continue;
            }
            j = node2.chi.length;
            if (j == 0) {
                break;
            }
            while (j--) {
                if (node2.chi[j].typ == exports.EnumToken.CommentNodeType) {
                    continue;
                }
                if (node1.chi[i].nam == node2.chi[j].nam) {
                    if (eq(node1.chi[i], node2.chi[j])) {
                        intersect.push(node1.chi[i]);
                        node1.chi.splice(i, 1);
                        node2.chi.splice(j, 1);
                        break;
                    }
                }
            }
        }
        // @ts-ignore
        const result = (intersect.length == 0 ? null : {
            ...node1,
            // @ts-ignore
            sel: [...new Set([...(n1?.raw?.reduce(reducer, []) ?? splitRule(n1.sel)).concat(n2?.raw?.reduce(reducer, []) ?? splitRule(n2.sel))])].join(','),
            chi: intersect.reverse()
        });
        if (result == null || [n1, n2].reduce((acc, curr) => curr.chi.length == 0 ? acc : acc + doRender(curr, options).code.length, 0) <= [node1, node2, result].reduce((acc, curr) => curr.chi.length == 0 ? acc : acc + doRender(curr, options).code.length, 0)) {
            // @ts-ignore
            return null;
        }
        return { result, node1: exchanged ? node2 : node1, node2: exchanged ? node1 : node2 };
    }
    function reduceRuleSelector(node) {
        if (node.raw == null) {
            Object.defineProperty(node, 'raw', { ...definedPropertySettings, value: splitRule(node.sel) });
        }
        // @ts-ignore
        // if (node.raw != null) {
        // @ts-ignore
        let optimized = reduceSelector(node.raw.reduce((acc, curr) => {
            acc.push(curr.slice());
            return acc;
        }, []));
        if (optimized != null) {
            Object.defineProperty(node, 'optimized', { ...definedPropertySettings, value: optimized });
        }
        if (optimized != null && optimized.match && optimized.reducible && optimized.selector.length > 1) {
            for (const selector of optimized.selector) {
                if (selector.length > 1 && selector[0] == '&' &&
                    (combinators.includes(selector[1]) || !/^[a-zA-Z:]/.test(selector[1]))) {
                    selector.shift();
                }
            }
            const unique = new Set;
            const raw = [
                [
                    optimized.optimized[0], ':is('
                ].concat(optimized.selector.reduce((acc, curr) => {
                    const sig = curr.join('');
                    if (!unique.has(sig)) {
                        if (acc.length > 0) {
                            acc.push(',');
                        }
                        unique.add(sig);
                        acc.push(...curr);
                    }
                    return acc;
                }, [])).concat(')')
            ];
            const sel = raw[0].join('');
            if (sel.length < node.sel.length) {
                node.sel = sel;
                // node.raw = raw;
                Object.defineProperty(node, 'raw', { ...definedPropertySettings, value: raw });
            }
        }
    }

    const matchUrl = /^(https?:)?\/\//;
    function dirname(path) {
        if (path == '/' || path === '') {
            return path;
        }
        let i = 0;
        let parts = [''];
        for (; i < path.length; i++) {
            const chr = path.charAt(i);
            if (chr == '/') {
                parts.push('');
            }
            else if (chr == '?' || chr == '#') {
                break;
            }
            else {
                parts[parts.length - 1] += chr;
            }
        }
        parts.pop();
        return parts.length == 0 ? '/' : parts.join('/');
    }
    function splitPath(result) {
        const parts = [''];
        let i = 0;
        for (; i < result.length; i++) {
            const chr = result.charAt(i);
            if (chr == '/') {
                parts.push('');
            }
            else if (chr == '?' || chr == '#') {
                break;
            }
            else {
                parts[parts.length - 1] += chr;
            }
        }
        let k = -1;
        while (++k < parts.length) {
            if (parts[k] == '.') {
                parts.splice(k--, 1);
            }
            else if (parts[k] == '..') {
                parts.splice(k - 1, 2);
                k -= 2;
            }
        }
        return { parts, i };
    }
    function resolve(url, currentDirectory, cwd) {
        if (matchUrl.test(url)) {
            return {
                absolute: url,
                relative: url
            };
        }
        if (matchUrl.test(currentDirectory)) {
            const path = new URL(url, currentDirectory).href;
            return {
                absolute: path,
                relative: path
            };
        }
        let result;
        if (url.charAt(0) == '/') {
            result = url;
        }
        else if (currentDirectory.charAt(0) == '/') {
            result = dirname(currentDirectory) + '/' + url;
        }
        else if (currentDirectory === '' || dirname(currentDirectory) === '') {
            result = url;
        }
        else {
            result = dirname(currentDirectory) + '/' + url;
        }
        let { parts, i } = splitPath(result);
        if (parts.length == 0) {
            const path = result.charAt(0) == '/' ? '/' : '';
            return {
                absolute: path,
                relative: path
            };
        }
        const absolute = parts.join('/');
        const { parts: dirs } = splitPath(cwd ?? currentDirectory);
        for (const p of dirs) {
            if (parts[0] == p) {
                parts.shift();
            }
            else {
                parts.unshift('..');
            }
        }
        return {
            absolute,
            relative: parts.join('/') + (i < result.length ? result.slice(i) : '')
        };
    }

    function parseResponse(response) {
        if (!response.ok) {
            throw new Error(`${response.status} ${response.statusText} ${response.url}`);
        }
        return response.text();
    }
    async function load(url, currentFile) {
        let t;
        if (matchUrl.test(url)) {
            t = new URL(url);
        }
        else if (matchUrl.test(currentFile)) {
            t = new URL(url, currentFile);
        }
        else {
            const path = resolve(url, currentFile).absolute;
            t = new URL(path, self.origin);
        }
        // @ts-ignore
        return fetch(t, t.origin != self.origin ? { mode: 'cors' } : {}).then(parseResponse);
    }

    function render(data, options = {}) {
        return doRender(data, Object.assign(options, {
            load,
            resolve,
            dirname,
            cwd: options.cwd ?? self.location.pathname.endsWith('/') ? self.location.pathname : dirname(self.location.pathname)
        }));
    }
    async function parse(iterator, opt = {}) {
        return doParse(iterator, Object.assign(opt, {
            load,
            resolve,
            dirname,
            cwd: opt.cwd ?? self.location.pathname.endsWith('/') ? self.location.pathname : dirname(self.location.pathname)
        }));
    }
    async function transform(css, options = {}) {
        options = { minify: true, removeEmpty: true, removeCharset: true, ...options };
        const startTime = performance.now();
        return parse(css, options).then((parseResult) => {
            const rendered = render(parseResult.ast, options);
            return {
                ...parseResult,
                ...rendered,
                errors: parseResult.errors.concat(rendered.errors),
                stats: {
                    bytesOut: rendered.code.length,
                    ...parseResult.stats,
                    render: rendered.stats.total,
                    total: `${(performance.now() - startTime).toFixed(2)}ms`
                }
            };
        });
    }

    exports.dirname = dirname;
    exports.expand = expand;
    exports.load = load;
    exports.minify = minify;
    exports.parse = parse;
    exports.parseString = parseString;
    exports.parseTokens = parseTokens;
    exports.render = render;
    exports.renderToken = renderToken;
    exports.resolve = resolve;
    exports.transform = transform;
    exports.walk = walk;
    exports.walkValues = walkValues;

}));
